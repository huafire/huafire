<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot中feign调用微服务</title>
      <link href="posts/332af4c7.html"/>
      <url>posts/332af4c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="springboot中feign调用微服务"><a href="#springboot中feign调用微服务" class="headerlink" title="springboot中feign调用微服务"></a><code>springboot</code>中<code>feign</code>调用微服务</h2><p>​    在<code>springcloud</code>项目中，有可能遇到以下这种情况，需要跨模块调用接口，来实现某一个操作。</p><p>​    举个”栗子”：需要在某个模块（简称A模块）中调用权限认证模块（简称B模块）中的用户表信息，此时，可以使用<code>springboot</code>的微服务来实现，微服务的实现方法有三种，这里主要介绍通过<code>Feign</code>访问，具体步骤如下：</p><p>​    前置步骤：</p><ul><li>需要的依赖为：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在<code>A</code>模块中的启动类上，加入<code>@EnableFeignClients</code>注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1、实现接口与业务"><a href="#1、实现接口与业务" class="headerlink" title="1、实现接口与业务"></a>1、实现接口与业务</h3><p>​    首先被调用的模块（<code>B</code>模块）中需要实现接口，但是在实现接口的同时，我们需要加上一个新的注解，用来进行内部调用时，免认证操作，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inner</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">UserAuth</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用业务层方法，实现需求</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>注意</strong>：在业务中正常使用时，一定要问清楚，在某个项目中，是否可以使用<code>@Inner</code>注解，如果自定义了其他的注解，需要按需使用规定的内部免认证注解。</p><p>​    <code>B</code>模块操作完成。</p><h3 id="2、创建Feign客户端接口"><a href="#2、创建Feign客户端接口" class="headerlink" title="2、创建Feign客户端接口"></a>2、创建Feign客户端接口</h3><p>​    在调用的模块（<code>A</code>模块）中，创建一个<code>Feign</code>客户端接口来定义远程服务的调用。使用<code>@FeignClient</code>注解来指定服务名称和可选的回退机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RemoteServiceFallbackFactory是自己编写的回退工厂机制，用于报警降级处理，可以优雅的处理异常，其他参数可以根据自己需要填写</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;remote-service&quot;, url = &quot;http://localhost:8081&quot;, fallbackFactory = RemoteServiceFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意此时的PostMapping与上方的PostMapping相对应，注意输入正确的路径</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="comment">// 此时的方法与上面的方法相对应</span></span><br><span class="line">    <span class="function">String <span class="title">UserAuth</span><span class="params">(String test)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、实现FallbackFactory回退机制"><a href="#3、实现FallbackFactory回退机制" class="headerlink" title="3、实现FallbackFactory回退机制"></a>3、实现<code>FallbackFactory</code>回退机制</h3><p>​    模块同样为<code>A</code>模块，可以在<code>Feign</code>调用出现异常时，进行异常处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">RemoteServiceClient</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteServiceClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RemoteServiceClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 这里与上面的方法名，参数相同</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 一般可以写入日志</span></span><br><span class="line">                System.err.println(<span class="string">&quot;Remote service failed: &quot;</span> + cause.getMessage());</span><br><span class="line">                <span class="comment">// 返回回退数据</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Fallback response for id: &quot;</span> + id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、调用微服务"><a href="#4、调用微服务" class="headerlink" title="4、调用微服务"></a>4、调用微服务</h3><p>​    此时，微服务已经完成，可以引入文件并进行调用（这就不用问了，那肯定是<code>A</code>模块）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RemoteServiceClient remoteServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fetch-data/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fetchData</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remoteServiceClient.getData(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这里只有一个需要注意的地方，在你看到这篇博客时，<code>@Autowired</code>早已经不再提供维护了，此时使用<code>@Autowired</code>注解，就会发现<code>ide</code>在报错，但实际上，测试后发现，并不会影响项目正常运行，<code>@Autowired</code>注解已经换成了<code>@Resource</code>注解，其中的变化就不在这里展开了。</p><p>​    <strong>注1：在上面的步骤<code>2</code>，<code>3</code>，<code>4</code>中的文件均可放在模块<code>C</code>中，但是模块<code>A</code>需要继承模块<code>C</code>，好处为，每次遇到需要调用此微服务时，均可直接继承该模块，直接调用。</strong></p><p>​    <strong>注2：<code>springboot</code>中尽量不要循环继承，例如，模块<code>A</code>继承了模块<code>C</code>，那么模块<code>C</code>就不要再继承模块<code>A</code>了，但是有时候，需要引用<code>A</code>的实例类，此时就需要直接将模块<code>A</code>中的实体类复制到模块<code>C</code>中。</strong></p><p>​    哦，有一个文件忘记说了，如果有报错的话（具体什么报错忘记了），可以试试在<code>application.properties</code>或<code>application.yml</code>文件中配置<code>Feign</code>和<code>Hystrix</code>（如果使用的话）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Feign配置</span></span><br><span class="line"><span class="meta">feign.hystrix.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>​    再见！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实战</title>
      <link href="posts/ae9f4892.html"/>
      <url>posts/ae9f4892.html</url>
      
        <content type="html"><![CDATA[<p>​    在<code>dialog</code>中添加一个<code>form</code>时，设置该<code>form</code>可编辑，写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data&#x3D;&quot;gatewayProtocolItem&quot; :rules&#x3D;&quot;rules&quot; class&#x3D;&quot;screen-conent&quot;</span><br><span class="line">          header-row-class-name&#x3D;&quot;custom-table-header&quot; table-class&#x3D;&quot;custom-table&quot;&gt;</span><br><span class="line">&lt;el-table-column fixed type&#x3D;&quot;selection&quot; width&#x3D;&quot;55&quot;&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br><span class="line">&lt;el-table-column label&#x3D;&quot;属性名称&quot; prop&#x3D;&quot;propName&quot;&gt;</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">&lt;el-input v-if&#x3D;&quot;scope.row.edit&quot; v-model&#x3D;&quot;scope.row.propName&quot;</span><br><span class="line"> :required&#x3D;&quot;scope.row.required&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">&lt;span v-else&gt;&#123;&#123; scope.row.propName &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br><span class="line">&lt;el-table-column label&#x3D;&quot;功能码&quot; prop&#x3D;&quot;funCode&quot;&gt;</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">&lt;el-input v-if&#x3D;&quot;scope.row.edit&quot; v-model&#x3D;&quot;scope.row.funCode&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">&lt;span v-else&gt;&#123;&#123; scope.row.funCode &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br><span class="line">&lt;&#x2F;el-table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在&lt;el-form&gt;中添加一个新的空行</span></span><br><span class="line"><span class="function"><span class="title">formItemAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> newLine = &#123;&#125;</span><br><span class="line">            <span class="built_in">this</span>.gatewayProtocolItem.push(newLine)</span><br><span class="line">            <span class="keyword">let</span> lastIndex = <span class="built_in">this</span>.gatewayProtocolItem.length - <span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.handleEdit(<span class="built_in">this</span>.gatewayProtocolItem[lastIndex])</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><pre><code>当无法使用`required`来控制`input`输入框是否可以为空时，可以使用下面的方法来判断：dialog`</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历表格数据，检查所有必填字段是否为空</span></span><br><span class="line"><span class="function"><span class="title">handleSubmit</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.gatewayProtocolItem.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> row = <span class="built_in">this</span>.gatewayProtocolItem[i]</span><br><span class="line"><span class="keyword">if</span> (!row.propName || !row.funCode ) &#123;</span><br><span class="line"><span class="built_in">this</span>.$message.error(<span class="string">&#x27;请填写完整信息&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 如果有字段为空，则直接返回，不继续提交表单</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果所有必填字段都不为空，则继续提交表单</span></span><br><span class="line"><span class="built_in">this</span>.submitForm(formName)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>​    持续更新…</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git实战</title>
      <link href="posts/ff99adbe.html"/>
      <url>posts/ff99adbe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git实战"><a href="#Git实战" class="headerlink" title="Git实战"></a>Git实战</h1><p>​    先把文件添加到缓存区，从这一步开始，我们就要防止出现冲突，为了防止出现冲突，我们只需要将自己修改过的文件，添加到缓存区即可，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将某个文件夹中的某个文件添加到缓存区</span></span><br><span class="line">git add &lt;文件路径/文件名&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将某个文件夹中所有文件添加到缓存区</span></span><br><span class="line">git add &lt;文件夹名称&gt;</span><br></pre></td></tr></table></figure><p>​    然后正常<code>commit</code>即可，命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;本次提交的修改&quot;</span><br></pre></td></tr></table></figure><p>​    如果知道远程代码已经被同事修改，我们就需要多一步操作了，先将代码拉到本地，合并后在提交，命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先将代码拉到本地，--allow-unrelated-histories表示允许存在不同的历史提交</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>​    此时，我们就已经将代码拉到本地了，如果有冲突，就会有提示，此时我们可以用下面命令来查看哪些文件有冲突：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>​    此时，我们已经看到了有冲突的文件，接下来就需要修改了，如果是想要远程代码覆盖本地，只需要将远程代码<code>copy</code>过来即可，如果想要本地代码覆盖远程，可再次使用<code>git add &lt;文件路径/文件夹/文件名&gt;</code>即可，命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin &quot;master&quot;</span><br></pre></td></tr></table></figure><p>​    至此，冲突解决完成。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中ECharts柱状图组件</title>
      <link href="posts/fc48d151.html"/>
      <url>posts/fc48d151.html</url>
      
        <content type="html"><![CDATA[<p>柱状图效果如下：</p><img src="/posts/fc48d151/柱状图效果.png" style="zoom: 80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width: 100%; height: 400px&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import echarts from &#39;echarts&#39;</span><br><span class="line">require(&#39;echarts&#x2F;theme&#x2F;macarons&#39;) &#x2F;&#x2F; echarts theme</span><br><span class="line">import resize from &#39;..&#x2F;dashboard&#x2F;mixins&#x2F;resize&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    mixins: [resize],</span><br><span class="line">    &#x2F;&#x2F; 因为柱状图参数较多，直接在props中返回，便于调用</span><br><span class="line">    props: &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default: () &#x3D;&gt; &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: &quot;&quot;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123; name: &quot;1&quot;, type: &quot;bar&quot;, data: [1, 2] &#125;,</span><br><span class="line">                        &#123; name: &quot;2&quot;, type: &quot;bar&quot;, data: [2, 3] &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    xAxisData: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            chart: null</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">            this.initChart()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        if (!this.chart) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        this.chart.dispose()</span><br><span class="line">        this.chart &#x3D; null</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果数据发生变化，自动刷新柱状图</span><br><span class="line">        data: &#123;</span><br><span class="line">            handler: function () &#123;</span><br><span class="line">                this.initChart()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 遍历到所有参数</span><br><span class="line">            deep: true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        initChart() &#123;</span><br><span class="line">            this.chart &#x3D; echarts.init(this.$el, &#39;macarons&#39;)</span><br><span class="line">            const legendData &#x3D; []</span><br><span class="line">            this.data.series.forEach(data &#x3D;&gt; &#123;</span><br><span class="line">                legendData.push(data.name || &#39;没有名字&#39;)</span><br><span class="line">            &#125;)</span><br><span class="line">            this.chart.setOption(&#123;</span><br><span class="line">                &#x2F;&#x2F; 标题</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: this.data.title,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#39;axis&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    data: legendData</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        dataView: &#123; show: true, readOnly: false &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#39;line&#39;, &#39;bar&#39;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        saveAsImage: &#123; show: true &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                calculable: true,</span><br><span class="line">                xAxis: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#39;category&#39;,</span><br><span class="line">                        data: this.data.xAxisData,</span><br><span class="line">                        &#x2F;&#x2F; data: [&#39;2024-04-15&#39;, &#39;2024-04-16&#39;, &#39;2024-04-17&#39;, &#39;2024-04-18&#39;, &#39;2024-04-19&#39;, &#39;2024-04-20&#39;, &#39;2024-04-21&#39;]</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                yAxis: [</span><br><span class="line">                    &#x2F;&#x2F; 如果是两组数据，则放两个</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#39;value&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                series: this.data.series</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>​    补充：<code>watch</code>中的方法，只要数据改变，则刷新柱状图</p><p>​    在另个一组件中调用时，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Techart class&#x3D;&quot;echart&quot; :data&#x3D;&quot;echartData&quot; style&#x3D;&quot;height: 492px&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            &#x2F;&#x2F; 柱状图参数</span><br><span class="line">            echartData: &#123;</span><br><span class="line">                title: &quot;新增授权&quot;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123; name: &quot;新增授权&quot;, type: &quot;bar&quot;, data: [] &#125;,</span><br><span class="line">                    &#123; name: &quot;数据访问&quot;, type: &quot;bar&quot;, data: [] &#125;,</span><br><span class="line">                ],</span><br><span class="line">                xAxisData: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#x2F;&#x2F; 使标签生效</span><br><span class="line">    components: &#123;</span><br><span class="line">        Techart,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>​    调用完成。</p><p>​    补充：<code>mounted</code>中的方法，在渲染前就会执行。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> ECharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="posts/df7b5028.html"/>
      <url>posts/df7b5028.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h1><h3 id="1、Vue请求后端"><a href="#1、Vue请求后端" class="headerlink" title="1、Vue请求后端"></a>1、Vue请求后端</h3><p>​    <code>vue</code>文件，访问后端获取数据不止这一种方法，此方法应该为封装后方法，有其他需要请直接查看官方文档(‘’)，并展示到前端的步骤：</p><p>​    1、在<code>&lt;template&gt;</code>中完成大概样式，查看参数找到绑定数据的参数用来绑定数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:data=<span class="string">&quot;subList&quot;</span></span><br></pre></td></tr></table></figure><p>​    2、上面绑定的数据，需要返回，在<code>return</code>中返回<code>subList</code>，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">subList: generateData(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、<code>generateData()</code>函数需要在<code>data()</code>中定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> generateData = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subList = [];</span><br><span class="line">    test = getSubList();</span><br><span class="line">    subList.push(&#123;</span><br><span class="line">        key: <span class="number">1</span>,</span><br><span class="line">        label: <span class="string">`test`</span>,</span><br><span class="line">        disabled: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">        <span class="keyword">return</span> subList;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>​    4、前端方法实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getSubList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      utils.requiredData(</span><br><span class="line">        <span class="string">&quot;/authPlatform/sysInfConfig/read/list&quot;</span>, &#123; <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;1&#x27;</span> &#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.subList = [];</span><br><span class="line">          <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.rows.forEach(<span class="function">(<span class="params">dt</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subList.push(&#123;<span class="string">&#x27;key&#x27;</span>: dt.id, <span class="string">&#x27;label&#x27;</span>: dt.name &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">          utils.showError(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>​    <code>getSubList</code>方法中，使用了<code>requiredData</code>方法，一般使用三个参数，<code>requiredData(&quot;后端接口路径&quot;， &#123; &#39;属性&#39;： &#39;值&#39; &#125;)， (data) =&gt; &#123;方法&#125;</code>，当<code>&#123; &#39;属性&#39;： &#39;值&#39; &#125;</code>为<code>true</code>时，数据才可以进入，否则无法进入。</p><p>​    下面是中间部分，也是真正取数据的部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line">data.rows.forEach(<span class="function">(<span class="params">dt</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.subList.push(&#123;<span class="string">&#x27;key&#x27;</span>: dt.id, <span class="string">&#x27;label&#x27;</span>: dt.name &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        首先<code>if (data)</code>判断了数据是否为空，数据中的<code>rows</code>是该列表中的一个<code>key</code>，遍历<code>rows</code>中的每一个元素，然后<code>push</code>进<code>subList</code>，<code>subList</code>为一个对象字面量结构为：<code>&#123;key: 1, value: 2&#125;</code>，在<code>java</code>中被称为<code>Map</code>类型。</p><p>​        此时我们就已经拿到了需要的数据并将其封装到了<code>subList</code>中（本人小白，不知道这种说法是否准确），我们将其放到对应的组件中使用就可以了。</p><h3 id="2、Vue绑定字典步骤"><a href="#2、Vue绑定字典步骤" class="headerlink" title="2、Vue绑定字典步骤"></a>2、Vue绑定字典步骤</h3><p>​    <code>MySql</code>数据库中的<code>tinyint</code>对应的是后端的<code>Boolean</code>类型，但是为了处理数据，后端一般使用<code>Integer</code>类型来返回给前端，前端拿到<code>Boolean</code>类型的数据后，在<code>&lt;script&gt;</code>标签中，添加一个字典类型<code>dic</code>来处理<code>Boolean</code>类型的数据，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dicts: [<span class="string">&#x27;sys_client_config_type&#x27;</span>, <span class="string">&#x27;sys_client_config_status&#x27;</span>],</span><br></pre></td></tr></table></figure><p>​    在<code>&lt;template&gt;</code>标签中的正确位置上，例如添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column </span><br><span class="line">prop&#x3D;&quot;type&quot;</span><br><span class="line">label&#x3D;&quot;客户端类型, 1: 业务授权&quot;</span><br><span class="line">width&#x3D;&quot;150&quot;&gt;</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">&lt;dict-tag :options&#x3D;&quot;dict.type.sys_client_config_type&quot; :value&#x3D;&quot;scope.row.type&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br></pre></td></tr></table></figure><p>​    注意上面代码中的<code>&lt;dict-tag&gt;</code>标签，<code>:options</code>中的值，应该对应<code>dict</code>中的值，例如<code>dict</code>中的值为<code>sys_client_config_type</code>，则<code>:options</code>中的值应该为<code>dict.type.sys_client_config_type</code>，同理<code>:value</code>中的值应该对应<code>prop</code>中的值。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python项目虚拟环境的管理</title>
      <link href="posts/83572680.html"/>
      <url>posts/83572680.html</url>
      
        <content type="html"><![CDATA[<h2 id="python项目虚拟环境的管理"><a href="#python项目虚拟环境的管理" class="headerlink" title="python项目虚拟环境的管理"></a>python项目虚拟环境的管理</h2><p>​    python库一般不安装在全局环境，一般虚拟机环境更安全。</p><p>​    新建一个项目时候，应该新建一个虚拟环境，来保证项目的稳定性。</p><p>​    在刚拿到一个没有虚拟环境的项目时，应该新建一个虚拟环境，来保证项目的稳定性，在<code>pycharm</code>中，<code>File-&gt;Settings-&gt;Project: project_name-&gt;Python Interpreter</code>找到<code>Add Interpreter</code>，从而新建一个新的虚拟环境。</p><p>​    <strong>激活虚拟环境：</strong> 打开命令行界面（如终端或命令提示符），然后导航到你的项目目录。进入到项目目录后，激活虚拟环境。此时项目中已经有一个虚拟环境，可以执行下面命令来激活虚拟环境：</p><p>在 Windows 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>在 macOS/Linux 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>​    <strong>安装库：</strong> 激活虚拟环境后，你可以使用 <code>pip</code> 命令安装你需要的库。比如，要安装名为 <code>requests</code> 的库，可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>​    <strong>退出虚拟环境：</strong> 当你完成项目工作后，可以使用以下命令退出虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>这将会停用虚拟环境，并回到系统的默认 Python 环境（全局环境）。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbase部分命令</title>
      <link href="posts/15d0cd02.html"/>
      <url>posts/15d0cd02.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hbase部分命令"><a href="#Hbase部分命令" class="headerlink" title="Hbase部分命令"></a>Hbase部分命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入hbase shell</span></span><br><span class="line">hbase shell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建表</span></span><br><span class="line">create &#x27;behavior&#x27;, &#x27;pc&#x27;, &#x27;ph&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有表</span></span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看表结构</span></span><br><span class="line">describe &#x27;behavior&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将数据添加到表中</span></span><br><span class="line">put &#x27;behavior&#x27;,&#x27;zhang_2020101021723_51001_1&#x27;,&#x27;pc:v&#x27;,&#x27;1001&#x27;</span><br><span class="line">put &#x27;behavior&#x27;,&#x27;wang_2020101121723_51001_1&#x27;,&#x27;pc:v&#x27;,&#x27;1002&#x27;</span><br><span class="line">put &#x27;behavior&#x27;,&#x27;zhao_2020101221723_51001_1&#x27;,&#x27;ph:v&#x27;,&#x27;1003&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将第二条数据的值改为1004</span></span><br><span class="line">put &#x27;behavior&#x27;, &#x27;wang_2020101121723_51001_1&#x27;, &#x27;pc:v&#x27;,&#x27;1004&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除第三条数据</span></span><br><span class="line">deleteall &#x27;behavior&#x27;,&#x27;zhao_2020101221723_51001_1&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空表数据</span></span><br><span class="line">truncate &#x27;behavior&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用表，然后删除表</span></span><br><span class="line">disable &#x27;behavior&#x27;</span><br><span class="line">drop &#x27;hehavior&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hbase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbase单机部署</title>
      <link href="posts/dbf36185.html"/>
      <url>posts/dbf36185.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hbase单机部署"><a href="#Hbase单机部署" class="headerlink" title="Hbase单机部署"></a>Hbase单机部署</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line">tar -zxvf hbase-2.3.6-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">cd /usr/local</span><br><span class="line">mv hbase-2.3.6-bin hbase</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 刷新环境变量</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>​    修改配置文件<code>/usr/lcoal/hbase/conf/hbase-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///usr/local/hbase/hbasedata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///usr/local/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hbase/hbasezookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动命令</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看进程</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p>​    如果是虚拟机，可以考虑关掉防火墙，<code>hbase</code>默认端口是<code>16010</code>，如果需要更改端口，可以在<code>hbase-site.xml</code>中，添加下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hbase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware挂载共享文件夹</title>
      <link href="posts/b71f1281.html"/>
      <url>posts/b71f1281.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other -o uid=1000 -o gid=1000 -o umask=022</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VMware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装zookeeper</title>
      <link href="posts/5f822e77.html"/>
      <url>posts/5f822e77.html</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7安装zookeeper"><a href="#Centos7安装zookeeper" class="headerlink" title="Centos7安装zookeeper"></a>Centos7安装zookeeper</h1><blockquote><p>环境：CentOS7、jdk1.8.0_281、hadoop-3.2.2</p><p>zookeeper版本：3.6.3</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压apache-zookeeper-3.6.3-bin.tar.gz</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.6.3-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入/usr/<span class="built_in">local</span>，改一下文件夹名字，方便后续操作</span></span><br><span class="line">cd /usr/local/</span><br><span class="line">mv apache-zookeeper-3.6.3-bin/ zookeeper</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建用来存放数据的文件夹</span></span><br><span class="line">mkdir -p /usr/local/zookeeper/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建用来存放日志的文件夹</span></span><br><span class="line">mkdir -p /usr/local/zookeeper/logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zookeeper默认启动配置文件名字为zoo.cfg，所以将样例配置文件复制一下，原文件做备份</span></span><br><span class="line">cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将/usr/<span class="built_in">local</span>/zookeeper/conf/下的案例，复制一个简单的案例</span></span><br><span class="line">cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>​    修改<code>zoo.cfg</code>文件，找到下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper</span><br></pre></td></tr></table></figure><p>​    改为下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;data</span><br><span class="line">dataLogDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;logs</span><br><span class="line">server.1&#x3D;master:2890:3890</span><br><span class="line">server.2&#x3D;slave1:2890:3890</span><br><span class="line">server.3&#x3D;slave2:2890:3890</span><br></pre></td></tr></table></figure><p>​    在<code>/usr/local/zookeeper/data</code>下，建立一个文件<code>myid</code>用于区别主机和备用机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/zookeeper/data/myid</span><br></pre></td></tr></table></figure><p>​    <code>CentOS01</code>中写入1，<code>CentOS02</code>中写入2，<code>CentOS03</code>写入3</p><p>配置环境变量<code>/etc/profile</code></p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/home/program/zookeeper</span><br><span class="line">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动zookeeper</span></span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查进程（正常有一个进程QuorumPeerMain</span></span><br><span class="line">jps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查状态（正常状态应该是一台是leader，另两台是follower）</span></span><br><span class="line">zkServer.sh status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭zookeeper</span></span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure><p>​    <strong>注意事项：日志中报错信息为拒绝连接，在<code>zoo.cfg</code>文件中，<code>master、slave1、slave2</code>不可以使用<code>localhost</code>或者<code>127.0.0.1</code>，同时在<code>/etc/hosts</code>中，不可以使用<code>127.0.0.1</code>来映射<code>master</code>等。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hbase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hbase </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本初见</title>
      <link href="posts/4d566b3e.html"/>
      <url>posts/4d566b3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本初见"><a href="#shell脚本初见" class="headerlink" title="shell脚本初见"></a>shell脚本初见</h1><p>​    脚本有两种形式，一种是正常的<code>shell</code>命令，另一种是二进制文件，目前对于我这种初学者来说，感觉区别不是太大。</p><p>​    <code>shell</code>命令形式是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p>​    二进制形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><ul><li><p>​    二进制文件的权限较为严格，必须先赋权，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &lt;filename.sh&gt;</span><br></pre></td></tr></table></figure></li></ul><p>​    个人比较喜欢用<code>shell</code>命令的格式，下面记录一些最基本的操作，如有不合适的地方，请留言</p><p>​    常规的命令就不多写了，例如<code>mkdir test</code>等命令直接写就ok。</p><p>​    请在操作前确定当前用户对想要操作的文件有操作权限！！！</p><h2 id="替换文件"><a href="#替换文件" class="headerlink" title="替换文件"></a>替换文件</h2><p>​    将整个文件中的内容都替换掉，请注意文件一旦被替换，其中的内容是无法找回的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;Hello World&#x27;&gt;/home/test.txt</span><br></pre></td></tr></table></figure><p>​    注意后面的路径尽量用绝对路径，个人没有尝试过相对路径</p><h2 id="在文件最后添加一行或者多行"><a href="#在文件最后添加一行或者多行" class="headerlink" title="在文件最后添加一行或者多行"></a>在文件最后添加一行或者多行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;Hello World&#x27;&gt;&gt;/home/test.txt</span><br></pre></td></tr></table></figure><h2 id="替换掉文件中特定内容"><a href="#替换掉文件中特定内容" class="headerlink" title="替换掉文件中特定内容"></a>替换掉文件中特定内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/aaaaaa/Hello World/g&#x27; /home/test.txt</span><br></pre></td></tr></table></figure><p>​    其中，<code>aaaaaa</code>是我们想要的内容，<code>Hello World</code>是我们想要替换的内容</p><h2 id="在文件头添加一行"><a href="#在文件头添加一行" class="headerlink" title="在文件头添加一行"></a>在文件头添加一行</h2><p>​    注意：只能添加一行，添加多行会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;1i\Hello World !!&#x27; /home/test.txt</span><br></pre></td></tr></table></figure><p>​    目前个人用到的只有这四种，如有需要，后期再添加，但是这四种操作，已经可以完成大部分的部署操作了。</p><p>​    <code>shell</code>脚本可以帮助我们避免重复的操作，在部署多台服务器的环境的时候，非常方便！</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mybatis-plus</title>
      <link href="posts/c1b62771.html"/>
      <url>posts/c1b62771.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合mybatis-plus"><a href="#springboot整合mybatis-plus" class="headerlink" title="springboot整合mybatis-plus"></a>springboot整合mybatis-plus</h1><h2 id="1、导入依赖包"><a href="#1、导入依赖包" class="headerlink" title="1、导入依赖包"></a>1、导入依赖包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、编写实体类"><a href="#2、编写实体类" class="headerlink" title="2、编写实体类"></a>2、编写实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、编写接口"><a href="#3、编写接口" class="headerlink" title="3、编写接口"></a>3、编写接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.corhor.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、编写测试类"><a href="#4、编写测试类" class="headerlink" title="4、编写测试类"></a>4、编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.corhor.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.corhor.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>需要在启动类上加上<code>@MapperScan(&quot;com.xxx.mapper&quot;)</code>，<code>xxx</code>是路径。</li><li><code>mybatis-plus</code>可以少写一些简单的数据库查询方法，例如上面的<code>selectList</code>方法，但是这种方法并不多，感兴趣的小伙伴可以直接查看源码。</li></ul><p>b站视频<code>Mybatis-plus</code>详解：<a href="https://www.bilibili.com/video/BV1NE411Q7Nx?p=1">https://www.bilibili.com/video/BV1NE411Q7Nx?p=1</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10家庭版升级为win10专业版</title>
      <link href="posts/486277fc.html"/>
      <url>posts/486277fc.html</url>
      
        <content type="html"><![CDATA[<p><code>J7QT3-3GCPG-9GVWT-CH2XR-GMRJM</code></p><p>2021年8月24日零点升级成功，加载完会有警告，不用管，直接重启，重启完，就升级好了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初见Vue</title>
      <link href="posts/f23d18c8.html"/>
      <url>posts/f23d18c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="初见Vue"><a href="#初见Vue" class="headerlink" title="初见Vue"></a>初见<code>Vue</code></h1><h2 id="安装vue脚手架"><a href="#安装vue脚手架" class="headerlink" title="安装vue脚手架"></a>安装<code>vue</code>脚手架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="新建vue项目"><a href="#新建vue项目" class="headerlink" title="新建vue项目"></a>新建<code>vue</code>项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;project name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第一次创建需要挺久，看个人网速</p></blockquote><p>创建项目加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR  command failed: npm install --loglevel error</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>打开<code>C:\Users\admin.vuerc</code>文件，没有的直接新建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;useTaobaoRegistry&quot;: true,&#x2F;&#x2F;将这里的true修改为false,vue创建项目就能成功了</span><br><span class="line">  &quot;presets&quot;: &#123;</span><br><span class="line">    &quot;my-project&quot;: &#123;</span><br><span class="line">      &quot;useConfigFiles&quot;: true,</span><br><span class="line">      &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;@vue&#x2F;cli-plugin-babel&quot;: &#123;&#125;,</span><br><span class="line">        &quot;@vue&#x2F;cli-plugin-router&quot;: &#123;</span><br><span class="line">          &quot;historyMode&quot;: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;@vue&#x2F;cli-plugin-eslint&quot;: &#123;</span><br><span class="line">          &quot;config&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;lintOn&quot;: [</span><br><span class="line">            &quot;save&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vite-Vue3-ElementPlus"><a href="#Vite-Vue3-ElementPlus" class="headerlink" title="Vite+Vue3+ElementPlus"></a>Vite+Vue3+ElementPlus</h1><ol><li><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @vitejs/app demo --template vue</span><br></pre></td></tr></table></figure></li><li><h2 id="安装ElementPius"><a href="#安装ElementPius" class="headerlink" title="安装ElementPius"></a>安装<code>ElementPius</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure></li><li><h2 id="引入ElementPlus"><a href="#引入ElementPlus" class="headerlink" title="引入ElementPlus"></a>引入<code>ElementPlus</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; creatAPP &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">creatApp(App)</span><br><span class="line">.use(ElementPlus)</span><br><span class="line">.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端项目理解</title>
      <link href="posts/cad95530.html"/>
      <url>posts/cad95530.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端以<code>vue</code>为例，后端以<code>springboot</code>为例，本人小白，有理解不对的地方，请斧正，后续会补充。</p></blockquote><ol><li><p>用户访问前端。</p></li><li><p>前端处理用户的需求，当需要从后端取得数据的时候，前端开始访问后端。</p></li><li><p>后端做好的接口，例如<code>https://127.0.0.1:8080/hello</code>当后端获取到请求后，开始进行处理，首先是接收到<code>controller</code>层，<code>controller</code>层中，我们可以设计多个接口，接收并处理各种不同的请求，<code>controller</code>调用<code>service</code>层，在<code>service</code>层中，便是我们常说的业务逻辑，在这里，我们需要处理请求，用代码展示我们的逻辑，处理各种请求的同时，还需要应对各种不同的情况，<code>service</code>层调用实体类和<code>sql</code>语句，从数据库中获取数据。</p></li><li><p>获取数据后返回给前端，前端展示给用户。</p></li></ol><blockquote><p> 其中的访问交给计算机网络这门课。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git报错failed to push some refs to</title>
      <link href="posts/323fc1e4.html"/>
      <url>posts/323fc1e4.html</url>
      
        <content type="html"><![CDATA[<h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To https://gitee.com/likanghua/springboot_test.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;https://gitee.com/likanghua/springboot_test.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>解决方法：</p><blockquote><p>注意！！！</p><p>如果不是第一次提交代码，运行下面的命令前，一定要先备份！！！</p><p>因为同名文件会被远程的替换掉，远程没有的不会被替换。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>​    然后再次推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="情况二："><a href="#情况二：" class="headerlink" title="情况二："></a>情况二：</h3><p>报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to &#x27;https://...&#x27;</span><br></pre></td></tr></table></figure><p>如果只报错了上面的代码，是因为没有<code>commit</code></p><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注：xxx是本次提交的理由</span></span><br><span class="line">git commit -m xxx</span><br></pre></td></tr></table></figure><p>然后再次推送：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><blockquote><p>​    <code>git push origin master</code>命令将本地的<code>master</code>分支推送到<code>origin</code>主机</p><p>​    如果加上了<code>-u</code>参数，即<code>git push -u origin master</code>。<code>git</code>不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令为<code>git push</code>。</p><p>​    但是<code>git push</code>，默认只推送当前分支</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JPA</title>
      <link href="posts/c473074d.html"/>
      <url>posts/c473074d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Data-JPA介绍"><a href="#Spring-Data-JPA介绍" class="headerlink" title="Spring Data JPA介绍"></a><code>Spring Data JPA</code>介绍</h2><p>​    <code>Spring Data JPA</code>是<code>Spring</code>在<code>ORM</code>框架、<code>JPA</code>规范的基础上封装的一套<code>JPA</code>应用框架，它提供了增删改查等常用功能，使开发者可以用较少的代码实现数据操作，同时还易于扩展。</p><h3 id="1、编写实体类"><a href="#1、编写实体类" class="headerlink" title="1、编写实体类"></a>1、编写实体类</h3><p>​    <code>Spring Data JPA</code>框架是针对具有<code>ORM</code>关系的数据进行操作，所以在使用<code>Spring Data JPA</code>时，首先需要编写一个实体类与数据表进行映射，并且配置好映射关系，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity(name = &quot;t_comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Discuss</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@Column(name = &quot;a_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer aId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码定义了一个<code>Spring Data JPA</code>实体类<code>Discuss</code>，并将该类与数据表<code>t_comment</code>进行映射，下面针对上述代码用到的注解进行简要说明，如下：</p><ol><li><code>@Entity</code>：标注要与数据库做映射的实体类，默认情况下，数据表的名称就是首字母小写的类名。当然，还可以使用<code>name</code>属性指定映射的表名。</li><li><code>@Id</code>：标注在类属性或者<code>getter</code>方法上，表示某一个属性对应表中的主键。</li><li><code>@GeneratedValue</code>：与<code>@Id</code>注解标注在同一位置，用于表示属性对应主键的生成策略，可省略。<code>Spring Data JPA</code>支持的主键生长策略包括有<code>TABLE</code>（使用一个特定的数据库表格来保存主键）、<code>SEQUENCE</code>（不支持主键自增长的数据库主键生长策略）、<code>IDENTITY</code>（主键自增）和<code>AUTO</code>（<code>JPA</code>自主选择前面3种合适的策略，是默认选项）。</li><li><code>@Column</code>：标注在属性上，当类属性与表字段不同时，能够配合<code>name</code>属性表示类属性对应的表字段名。</li></ol><h3 id="2、编写Repository接口"><a href="#2、编写Repository接口" class="headerlink" title="2、编写Repository接口"></a>2、编写<code>Repository</code>接口</h3><p>​    针对不同的表数据操作编写各自对应的<code>Repository</code>接口，并根据需要编写对应的数据操作方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DiscussRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Discuss</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">findByAuthorNotNull</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT c FROM t_comment c WHERE c.aId = ?1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">getDiscussPaged</span><span class="params">(Integer aid, PageRequest pageable)</span></span>;</span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT * FROM t_comment WHERE a_id = ?1&quot;, nativeQuery = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">getDiscussPaged2</span><span class="params">(Integer aid, Package pageable)</span></span>;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(&quot;UPDATE t_comment c SET c.author = ?1 WHERE c.id = ?2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDiscuss</span><span class="params">(String author, Integer id)</span></span>;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(&quot;DELETE FROM t_comment c WHERE c.id = ?1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDiscuss</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    相关介绍：</p><ol><li><code>findByAuthorNotNull()</code>方法：该方法是一个基本的查询方法，上面没有任何注解，属于<code>JPA</code>支持的方法名关键字查询方式；同时更过定义的方法名可以猜出，该方法的作用是查新<code>author</code>费控的<code>Discuss</code>评论信息。</li><li><code>getDiscussPaged()</code>方法；该方法上方通过<code>Query</code>注解引入了一个<code>SQL</code>语句，用于通过文章分页<code>ID</code>查询<code>Discuss</code>评论信息。</li><li><code>getDiscussPaged2()</code>方法：该方法的功能与<code>getDiscussPaged()</code>基本类似，区别是该方法上方的<code>@Query</code>注解将<code>nativeQuery</code>属性设置为<code>true</code>(默认<code>false</code>)，用来编写原生<code>SQL</code>语句。</li><li><code>updateDiscuss()</code>方法和<code>deleteDiscuss()</code>方法：这两个方法同样使用<code>@Query</code>注解配置了对应的<code>SQL</code>语句，这两个方法分别对应数据的更新和删除操作；需要说明的是，数据更新或者删除操作的方法上还是用了<code>@Modifying</code>和<code>@Transactional</code>注解，其中，<code>@Modifying</code>表示支持数据变更，<code>@Transactional</code>表示支持事务管理。</li></ol><p>下面我们针对编写<code>Spring Data JPA</code>的<code>Repository</code>接口方法时需要注意的问题进行重点说明。</p><ol><li><p>使用<code>Spring Data JPA</code>自定义接口<code>Repository</code>接口，必须继承<code>XXRepository&lt;T,ID&gt;</code>接口，其中的<code>T</code>代表要操作的实体类，<code>ID</code>代表实体类主键数据类型。在上面示例中，选择继承了<code>JpaRepository</code>接口，继承结构如下：</p><img src="/posts/c473074d/a.png" style="zoom:80%;"><ul><li><code>Repository</code>是<code>Spring Data JPA</code>提供的用于自定义<code>Repository</code>接口的顶级父类接口，该接口中没有声明任何方法。</li><li><code>CurdRepository</code>接口是<code>Repository</code>的继承接口之一，包含了一些基本的<code>CRUD</code>方法。</li><li><code>PagingAndSortingRepository</code>接口继承<code>CurdRepository</code>接口的同时，提供了分页和排序两个方法。</li><li><code>QueryByExampleExecutor</code>接口是进行条件封装查询的顶级父接口，允许通过<code>Example</code>实例执行复杂条件查询。</li></ul><p><code>JpaRepository</code>接口同时继承了<code>PagingAndSortingRepository</code>接口的<code>QueryByExampleExecutor</code>接口，并额外提供了一些数据操作方法。自定义<code>Repository</code>接口文件时，通常会直接选择继承<code>JpaRepository</code>接口。</p></li><li><p>在使用<code>Spring Data JPA</code>进行数据操作时，可以有多种实现方式，主要如下：</p><ul><li>如果自定义接口继承了<code>JpaRepository</code>接口，则默认包含了一些常用的<code>CRUD</code>方法。</li><li>自定义<code>Repository</code>接口中，可以使用<code>@Query</code>注解配合<code>SQL</code>语句进行数据的查、改、删操作。</li><li>自定义<code>Repository</code>接口中，可以直接使用方法名关键字进行查询操作。</li></ul><p>其中，<code>Spring Data JPA</code>中支持的方法名关键字及对应的<code>SQL</code>片段说明，如下表：</p><img src="/posts/c473074d/b.png" style="zoom:80%;"></li></ol><ol start="3"><li><p>在自定义的<code>Repository</code>接口中，针对数据的变更操作（修改、删除），无论是否使用了<code>@Query</code>注解，都必须在方法上方添加<code>@Transactional</code>注解进行事务管理，否则程序执行就会出现<code>InvalidDataAccessApiUsageException</code>异常。如果在调用<code>Respository</code>接口方法的业务层<code>Service</code>类上已经添加了<code>@Transactional</code>注解。</p></li><li><p>在自定义的<code>Repository</code>接口中，使用<code>@Query</code>注解方式执行数据变更操作（修改、删除），除了要使用<code>@Query</code>注解，还必须添加<code>@Modifying</code>注解表示数据变更。</p></li><li><p><code>JPA</code>还支持使用<code>Example</code>实例进行复杂条件查询，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Example精确匹配查询条件</span></span><br><span class="line">Discuss discuss = <span class="keyword">new</span> Discuss();</span><br><span class="line">discuss.setAuthor(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Example&lt;Discuss&gt; example = Example.of(discuss);</span><br><span class="line">List&lt;Discuss&gt; list = repository.findAll(example);</span><br><span class="line"><span class="comment">// 使用ExampleMatcher模糊匹配查询条件</span></span><br><span class="line">Discuss discuss = <span class="keyword">new</span> Discuss();</span><br><span class="line">discuss.setAuthor(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">ExampleMatcher matcher = ExampleMatcher.matching().withMatcher(<span class="string">&quot;author&quot;</span>, startsWith());</span><br><span class="line">Example&lt;Discuss&gt; example = Example.of(discuss, matcher);</span><br><span class="line">List&lt;Discuss&gt; list = repository.findAll(example);</span><br></pre></td></tr></table></figure><blockquote><p>注意：代码中中文的编码格式，要与数据库中的编码格式一致，个人推荐字体编码<code>UTF-8</code>。</p></blockquote></li></ol><h2 id="SpringBoot整合JPA"><a href="#SpringBoot整合JPA" class="headerlink" title="SpringBoot整合JPA"></a><code>SpringBoot</code>整合<code>JPA</code></h2><p>步骤如下：</p><ol><li><p>添加依赖启动器，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <code>SpringBoot</code>对<code>Spring Data JPA</code>版本号进行了统一管理。</p></li><li><p>编写实体类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity(name = &quot;t_comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Discuss</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@Column(name = &quot;a_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer aId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>Repository</code>接口。在<code>com.learn.mapper</code>包下，创建一个用于对数据库表<code>t_comment</code>进行操作的<code>Repository</code>接口<code>DiscussRepository</code>，并编写对数据表<code>t_comment</code>进行查、改、删操作方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kanghua.bean.Discuss;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Modifying;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DiscussRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Discuss</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 1、查询author费控的Discuss评论集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">findByAuthorNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据文章id分页查询Discuss评论集合</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT c from t_comment c where c.aId = ?1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">getDiscussPaged</span><span class="params">(Integer aid, Package pageable)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、使用元素SQL语句，根据文章id分页查询Discuss评论集合</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT * from t_comment where a_id = ?1&quot;, nativeQuery = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Discuss&gt; <span class="title">getDiscussPaged2</span><span class="params">(Integer aid, Package pageable)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、根据评论id修改评论作者author</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(&quot;update t_comment c set c.author = ?1 where c.id = ?2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDiscuss</span><span class="params">(String author, Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5、根据评论id删除评论</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(&quot;delete t_comment c where c.id = ?1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDiscuss</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写单元测试进行接口方法测试。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.domain.ExampleMatcher.GenericPropertyMatchers.startsWith;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscussRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、使用JpaRepository内部方法进行数据操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectComment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Optional&lt;Discuss&gt; optional = repository.findById(<span class="number">1</span>);</span><br><span class="line">        optional.ifPresent(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、使用方法名关键字进行数据操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectCommentByKeys</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Discuss&gt; list = repository.findByAuthorNotNull();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、使用@Query注解进行数据操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectCommentPaged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PageRequest pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Discuss&gt; allPaged = repository.getDiscussPaged(<span class="number">1</span>, pageable);</span><br><span class="line">        System.out.println(allPaged);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、使用Example封装参数进行数据查询操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectCommentByExample</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Discuss discuss = <span class="keyword">new</span> Discuss();</span><br><span class="line">        discuss.setAuthor(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Example&lt;Discuss&gt; example = Example.of(discuss);</span><br><span class="line">        List&lt;Discuss&gt; list = repository.findAll(example);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectCommentByExampleMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Discuss discuss = <span class="keyword">new</span> Discuss();</span><br><span class="line">        discuss.setAuthor(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">        ExampleMatcher matcher = ExampleMatcher.matching().withMatcher(<span class="string">&quot;author&quot;</span>, startsWith());</span><br><span class="line">        Example&lt;Discuss&gt; example = Example.of(discuss, matcher);</span><br><span class="line">        List&lt;Discuss&gt; list = repository.findAll(example);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，使用注入的<code>DiscussRepository</code>实例对象编写了多个单元测试方法针对<code>DiscussRepository</code>接口中的方法进行调试测试。通过示例中的代码注释可以看到，测试方法中分别使用了<code>JpaRepository</code>默认方法，方法名关键字、<code>@Query</code>注解和<code>Example</code>封装参数的形式进行了数据操作。</p></li><li><p>测试。运行测试类中的<code>selectCommentByExampleMatcher()</code>方法，即可看到效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Discuss(id&#x3D;4, content&#x3D;很好，非常详细, author&#x3D;张三, aId&#x3D;1), Discuss(id&#x3D;5, content&#x3D;很不错, author&#x3D;张扬, aId&#x3D;2)]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot数据访问</title>
      <link href="posts/16cf83b7.html"/>
      <url>posts/16cf83b7.html</url>
      
        <content type="html"><![CDATA[<pre><code>`SpringData`是`Spring`提供的一个用于简化数据库访问、支持云服务器的开原框架。`SpringData`提供了多种类型数据库支持，`SpringBoot`对`SpringData`支持的数据库进行了整合管理，提供了各种依赖启动器。如下表：</code></pre><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>spring-boot-starter-data-jpa</code></td><td><code>Spring Data JPA</code>与<code>Hibernate</code>启动器</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td><code>MongoDB</code>和<code>Spring Data MongoDB</code>的启动器</td></tr><tr><td><code>spring-boot-starter-data-neo4j</code></td><td><code>Neo4j</code>图数据库和<code>Spring Data Neo4j</code>的启动器</td></tr><tr><td><code>spring-boot-starter-data-redis</code></td><td><code>Redis</code>键值数据存储与<code>Spring Data Redis</code>和<code>Jedis</code>客户端的启动器</td></tr></tbody></table><p>​    需要说明的是，<code>MyBatis</code>作为操作数据库的流行框架，<code>SpringBoot</code>没有提供<code>MyBatis</code>场景依赖，但是<code>MyBatis</code>开发团队自己适配了<code>SpringBoot</code>，提供了<code>mybatis-spring-boot-starter</code>依赖启动器实现数据访问操作。</p><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a><code>SpringBoot</code>整合<code>Mybatis</code></h2><h3 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h3><p>​    实现<code>SpringBoot</code>与数据访问层框架（例如：<code>MyBatis</code>）的整合非常简单，主要是引入对应的依赖启动器，具体步骤如下：</p><ol><li><p>数据准备</p><p>​    在<code>MySQL</code>数据库中，创建一个<code>springBoot_learn</code>的数据库，并创建两张表<code>t_article</code>和<code>t_comment</code>，并放入几条测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE springboot_learn;</span><br><span class="line"></span><br><span class="line"># 选择使用数据库</span><br><span class="line">USE springboot_learn;</span><br><span class="line"></span><br><span class="line"># 创建表t_article并插入数据</span><br><span class="line">USE springboot_learn;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> `t_article`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_article` (</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;文章id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span> ( <span class="number">200</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文章标题&#x27;</span>,</span><br><span class="line">`content` LONGTEXT COMMENT <span class="string">&#x27;文章内容&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_article`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;SpringBoot基础入门&#x27;</span>, <span class="string">&#x27;从入门到精通讲解...&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_article`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;SpringBoot基础入门&#x27;</span>, <span class="string">&#x27;从入门到精通讲解...&#x27;</span> );</span><br><span class="line"></span><br><span class="line"># 创建表t_comment并插入相关数据</span><br><span class="line">USE springboot_learn;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> `t_comment`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_comment` (</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;评论id&#x27;</span>,</span><br><span class="line">`content` LONGTEXT COMMENT <span class="string">&#x27;评论内容&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span> ( <span class="number">200</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论作者&#x27;</span>,</span><br><span class="line">`a_id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;关联的文章id&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB auto_increment <span class="operator">=</span> <span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;很全、很详细&#x27;</span>, <span class="string">&#x27;狂奔的蜗牛&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;赞一个&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;很详细&#x27;</span>, <span class="string">&#x27;kitty&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;很好，非常详细&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;很不错&#x27;</span>, <span class="string">&#x27;张扬&#x27;</span>, <span class="string">&#x27;2&#x27;</span> );</span><br></pre></td></tr></table></figure><p>​    上面的<code>sql</code>语句中，先创建了一个数据库<code>springboot_learn</code>，然后创建了两个表<code>t_article</code>和<code>t_comment</code>，并向表中插入数据。其中，评论表<code>t_comment</code>的<code>a_id</code>与文章表<code>t_article</code>的主键<code>id</code>相关联。</p></li><li><p>创建项目，引入相应的启动器</p><ol><li><p>在依赖中引入<code>MySQL</code>和<code>MyBatis</code>依赖，其中<code>MySQL</code>是为了提供<code>MySQL</code>数据库连接驱动，<code>MyBatis</code>则是为了提供<code>MyBatis</code>框架来操作数据库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    数据库连接池 jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写数据库表对应的实体类。在<code>com.learn.bean</code>包下编写<code>Comment</code>和<code>Article</code>实体类，分别对应数据库表<code>t_comment</code>和<code>t_article</code>，内容如下：</p><p><code>Comment.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Integer aId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; commentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写配置文件</p><ol><li><p>在<code>application.properties</code>配置文件中进行数据库连接配置。打开全局配置文件<code>application.properties</code>，在配置文件中编写对用的<code>MySQL</code>数据库连接配置，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL数据库连接配置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot_learn?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>数据源类型选择配置。<code>SpringBoot 1.x</code>版本默认使用的是<code>tomcat.jdbc</code>数据源，<code>SpringBoot 2.x</code>版本默认使用的是<code>hikari</code>数据源，如果需要其他的数据源，需要额外配置。</p><p>​    这里使用的是阿里巴巴的<code>Druid</code>数据源，在<code>pom.xml</code>文件中添加<code>Druid</code>数据源的依赖启动器，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    上面引入依赖<code>druid-spring-boot-starter</code>，同样是阿里巴巴为了迎合<code>SpringBoot</code>项目而适配的<code>Druid</code>数据源启动器，当在<code>pom.xml</code>文件中引入了该启动器后，不需要再进行其他额外配置，<code>SpringBoot</code>项目会自动识别配置<code>Druid</code>数据源。</p><p>​    要说明的是，上面配置的<code>Druid</code>数据源启动器内部已经初始化了一些运行参数（例如：<code>initialSize</code>、<code>minldle</code>和<code>maxActive</code>等），如果开发时要修改第三方<code>Druid</code>的运行参数，则必须在全局配置文件中修改，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加并配置第三方数据源Druid</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure><p>​    文件中修改了<code>Druid</code>数据源的类型、初始化连接数、最小空闲数和最大连接数属性。当然还可以设置更多属性，参考<code>Druid</code>属性设置。</p></li></ol></li></ol><h3 id="使用注解的方式整合MyBatis"><a href="#使用注解的方式整合MyBatis" class="headerlink" title="使用注解的方式整合MyBatis"></a>使用注解的方式整合<code>MyBatis</code></h3><p>​    相比<code>Spring</code>与<code>MyBatis</code>的整合，<code>SpringBoot</code>与<code>MyBatis</code>的整合会使项目开发更加简便，同时还支持<code>XML</code>和注解两种配置方式。下面为注解的方式，步骤如下：</p><ol><li><p>创建<code>Mapper</code>接口文件，在<code>com.learn.mapper</code>包下，创建一个用于对数据库<code>t_comment</code>数据操作的接口<code>CommentMapper</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kanghua.bean.Comment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM t_comment WHERE id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comment <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO t_comment(content, author, a_id)&quot; + &quot;values (#&#123;content&#125;, #&#123;author&#125;, #&#123;aId&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE INTO t_comment SET content=#&#123;content&#125; WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM t_comment WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteComment</span><span class="params">(Integer id)</span></span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    文件中，<code>@Mapper</code>注解表示该类是一个<code>MyBatis</code>接口文件，并保证能够被<code>SpringBoot</code>自动扫描到<code>Spring</code>容器中，在接口内部，分别通过<code>@Select</code>、<code>@Insert</code>、<code>@Update</code>、<code>@Delete</code>注解配合<code>SQL</code>语句完成了对数据库表<code>t_comment</code>数据的增删改查操作。</p><blockquote><p>上面文件中，在对应的接口类上添加了<code>@Mapper</code>注解，如果编写的<code>Mapper</code>接口过多时，需要重复为每一个接口文件添加<code>@Mapper</code>注解，为了避免这种麻烦，可以直接在<code>SpringBoot</code>项目启动器类上添加<code>@MapperScan(&quot;xxx&quot;)</code>注解，不需要再逐个添加<code>@Mapper</code>注解。<code>@MapperScan(&quot;xxx&quot;)</code>注解的作用和<code>@Mapper</code>注解类似，但是它必须指定需要扫描的具体包名，例如<code>@MapperScan(&quot;com.learn.mapper&quot;)</code>。</p></blockquote></li><li><p>编写单元测试进行接口方法测试。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CommentMapper commentMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectComment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comment comment = commentMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    先通过<code>@Autowired</code>注解将<code>CommentMapper</code>接口自动装配为<code>Spring</code>容器中的<code>Bean</code>，然后使用<code>@Test</code>注解标注<code>selectComment()</code>方法是单元测试方法，这里仅演示了<code>Mapper</code>接口中的数据查询。</p></li><li><p>运行<code>selectComment()</code>方法，控制台输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;null)</span><br></pre></td></tr></table></figure><p>我们会发现，<code>aId</code>的结果是<code>null</code>，并不是我们设置的1，这是因为编写的实体类<code>Comment</code>中使用了驼峰命令法，将<code>t_comment</code>表中的<code>a_id</code>字段设计成了<code>aId</code>属性，所以无法正确映射查询结果，为了解决上面的问题，可以在<code>application.properties</code>中添加一下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>再次测试即可得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;1)</span><br></pre></td></tr></table></figure></li></ol><h3 id="用配置文件的方式整合MyBatis"><a href="#用配置文件的方式整合MyBatis" class="headerlink" title="用配置文件的方式整合MyBatis"></a>用配置文件的方式整合<code>MyBatis</code></h3><p>​    <code>SpringBoot</code>整合<code>MyBatis</code>时，不仅支持注解方式，还支持<code>XML</code>配置文件的方式，具体步骤如下：</p><ol><li><p>创建一个<code>Mapper</code>接口文件，在<code>com.learn.mapper</code>包中，创建一个操作数据表<code>t_article</code>的接口<code>ArticleMapper</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">selectArticle</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>XML</code>映射文件，在<code>resource</code>目录下，创建一个统一管理映射文件的包<code>mapper</code>，并在该包下编写与<code>ArticleMapper</code>接口对应的映射文件<code>ArticleMapper.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kanghua.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectArticle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;articleWithComment&quot;</span>&gt;</span></span><br><span class="line">        SELECT a.*,c.id c_id, c.content c_content, c.author</span><br><span class="line">        FROM t_article a, t_comment c</span><br><span class="line">        WHERE a.id=c.a_id AND a.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;articleWithComment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;commentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_content&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateArticle&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_article</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title !=null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;content !=null and content !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                content=#&#123;content&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，<code>&lt;mapper&gt;</code>标签中的<code>namespace</code>属性值对用的是<code>ArticleMapper</code>接口文件全路径名称，在映射文件中根据<code>ArticleMapper</code>接口文件中的方法，编写两个对应的<code>SQL</code>语句，同时配置数据类型映射时，没有使用类的全路径名称，而是使用了类的别名，（例如，没有使用<code>com.learn.Article</code>而是使用了<code>Article</code>）。</p></li><li><p>配置<code>XML</code>映射文件路径，我们在项目中编写的<code>XML</code>映射文件，<code>SpringBoot</code>无法扫描到自定义编写的<code>XML</code>配置文件，还必须在全局配置文件<code>application.properties</code>中添加<code>MyBatis</code>映射文件路径的配置，同时需要添加实体类别名映射路径，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置MyBatis的XML配置文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment"># 配置XML映射文件中指定的实体类别名路径</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.bean</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，在使用配置文件方式整合<code>MyBatis</code>时，<code>MyBatis</code>映射文件路径的配置必不可少；而实体类别名的配置是根据前面创建的<code>XML</code>映射文件别名使用情况来确定的，如果<code>XML</code>映射文件中使用的都是类的全路径名称，则不需要配置。</p></li><li><p>编写测试类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line">Article article = articleMapper.selectArticle(<span class="number">1</span>);</span><br><span class="line">System.out.println(article);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>控制台中打印出了下面的信息，说明配置完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Article(id&#x3D;1, title&#x3D;SpringBoot基础入门, content&#x3D;从入门到精通讲解..., commentList&#x3D;[Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;null), Comment(id&#x3D;2, content&#x3D;赞一个, author&#x3D;tom, aId&#x3D;null), Comment(id&#x3D;3, content&#x3D;很详细, author&#x3D;kitty, aId&#x3D;null), Comment(id&#x3D;4, content&#x3D;很好，非常详细, author&#x3D;张三, aId&#x3D;null)])</span><br></pre></td></tr></table></figure><blockquote><p>​    对于<code>SpringBoot</code>支持与<code>MyBatis</code>整合的两种方式而言，使用注解的方式比较合适简单的增删改查操作；而使用配置文件的方式稍微麻烦，但对于复杂的数据操作却显得比较实用。实际开发中，使用<code>SpringBoot</code>整合<code>MyBatis</code>进行项目开发时，通常会混合使用两种整合方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mybatis</title>
      <link href="posts/16cf83b7.html"/>
      <url>posts/16cf83b7.html</url>
      
        <content type="html"><![CDATA[<p>​    <code>SpringData</code>是<code>Spring</code>提供的一个用于简化数据库访问、支持云服务器的开原框架。<code>SpringData</code>提供了多种类型数据库支持，<code>SpringBoot</code>对<code>SpringData</code>支持的数据库进行了整合管理，提供了各种依赖启动器。如下表：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>spring-boot-starter-data-jpa</code></td><td><code>Spring Data JPA</code>与<code>Hibernate</code>启动器</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td><code>MongoDB</code>和<code>Spring Data MongoDB</code>的启动器</td></tr><tr><td><code>spring-boot-starter-data-neo4j</code></td><td><code>Neo4j</code>图数据库和<code>Spring Data Neo4j</code>的启动器</td></tr><tr><td><code>spring-boot-starter-data-redis</code></td><td><code>Redis</code>键值数据存储与<code>Spring Data Redis</code>和<code>Jedis</code>客户端的启动器</td></tr></tbody></table><p>​    需要说明的是，<code>MyBatis</code>作为操作数据库的流行框架，<code>SpringBoot</code>没有提供<code>MyBatis</code>场景依赖，但是<code>MyBatis</code>开发团队自己适配了<code>SpringBoot</code>，提供了<code>mybatis-spring-boot-starter</code>依赖启动器实现数据访问操作。</p><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a><code>SpringBoot</code>整合<code>Mybatis</code></h2><h3 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h3><p>​    实现<code>SpringBoot</code>与数据访问层框架（例如：<code>MyBatis</code>）的整合非常简单，主要是引入对应的依赖启动器，具体步骤如下：</p><ol><li><p>数据准备</p><p>​    在<code>MySQL</code>数据库中，创建一个<code>springBoot_learn</code>的数据库，并创建两张表<code>t_article</code>和<code>t_comment</code>，并放入几条测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE springboot_learn;</span><br><span class="line"></span><br><span class="line"># 选择使用数据库</span><br><span class="line">USE springboot_learn;</span><br><span class="line"></span><br><span class="line"># 创建表t_article并插入数据</span><br><span class="line">USE springboot_learn;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> `t_article`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_article` (</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;文章id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span> ( <span class="number">200</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文章标题&#x27;</span>,</span><br><span class="line">`content` LONGTEXT COMMENT <span class="string">&#x27;文章内容&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_article`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;SpringBoot基础入门&#x27;</span>, <span class="string">&#x27;从入门到精通讲解...&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_article`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;SpringBoot基础入门&#x27;</span>, <span class="string">&#x27;从入门到精通讲解...&#x27;</span> );</span><br><span class="line"></span><br><span class="line"># 创建表t_comment并插入相关数据</span><br><span class="line">USE springboot_learn;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> `t_comment`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_comment` (</span><br><span class="line">`id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;评论id&#x27;</span>,</span><br><span class="line">`content` LONGTEXT COMMENT <span class="string">&#x27;评论内容&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span> ( <span class="number">200</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论作者&#x27;</span>,</span><br><span class="line">`a_id` <span class="type">INT</span> ( <span class="number">20</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;关联的文章id&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB auto_increment <span class="operator">=</span> <span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;很全、很详细&#x27;</span>, <span class="string">&#x27;狂奔的蜗牛&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;赞一个&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;很详细&#x27;</span>, <span class="string">&#x27;kitty&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;很好，非常详细&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;1&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_comment`</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;很不错&#x27;</span>, <span class="string">&#x27;张扬&#x27;</span>, <span class="string">&#x27;2&#x27;</span> );</span><br></pre></td></tr></table></figure><p>​    上面的<code>sql</code>语句中，先创建了一个数据库<code>springboot_learn</code>，然后创建了两个表<code>t_article</code>和<code>t_comment</code>，并向表中插入数据。其中，评论表<code>t_comment</code>的<code>a_id</code>与文章表<code>t_article</code>的主键<code>id</code>相关联。</p></li><li><p>创建项目，引入相应的启动器</p><ol><li><p>在依赖中引入<code>MySQL</code>和<code>MyBatis</code>依赖，其中<code>MySQL</code>是为了提供<code>MySQL</code>数据库连接驱动，<code>MyBatis</code>则是为了提供<code>MyBatis</code>框架来操作数据库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    数据库连接池 jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写数据库表对应的实体类。在<code>com.learn.bean</code>包下编写<code>Comment</code>和<code>Article</code>实体类，分别对应数据库表<code>t_comment</code>和<code>t_article</code>，内容如下：</p><p><code>Comment.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Integer aId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; commentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写配置文件</p><ol><li><p>在<code>application.properties</code>配置文件中进行数据库连接配置。打开全局配置文件<code>application.properties</code>，在配置文件中编写对用的<code>MySQL</code>数据库连接配置，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL数据库连接配置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot_learn?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>数据源类型选择配置。<code>SpringBoot 1.x</code>版本默认使用的是<code>tomcat.jdbc</code>数据源，<code>SpringBoot 2.x</code>版本默认使用的是<code>hikari</code>数据源，如果需要其他的数据源，需要额外配置。</p><p>​    这里使用的是阿里巴巴的<code>Druid</code>数据源，在<code>pom.xml</code>文件中添加<code>Druid</code>数据源的依赖启动器，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    上面引入依赖<code>druid-spring-boot-starter</code>，同样是阿里巴巴为了迎合<code>SpringBoot</code>项目而适配的<code>Druid</code>数据源启动器，当在<code>pom.xml</code>文件中引入了该启动器后，不需要再进行其他额外配置，<code>SpringBoot</code>项目会自动识别配置<code>Druid</code>数据源。</p><p>​    要说明的是，上面配置的<code>Druid</code>数据源启动器内部已经初始化了一些运行参数（例如：<code>initialSize</code>、<code>minldle</code>和<code>maxActive</code>等），如果开发时要修改第三方<code>Druid</code>的运行参数，则必须在全局配置文件中修改，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加并配置第三方数据源Druid</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure><p>​    文件中修改了<code>Druid</code>数据源的类型、初始化连接数、最小空闲数和最大连接数属性。当然还可以设置更多属性，参考<code>Druid</code>属性设置。</p></li></ol></li></ol><h3 id="使用注解的方式整合MyBatis"><a href="#使用注解的方式整合MyBatis" class="headerlink" title="使用注解的方式整合MyBatis"></a>使用注解的方式整合<code>MyBatis</code></h3><p>​    相比<code>Spring</code>与<code>MyBatis</code>的整合，<code>SpringBoot</code>与<code>MyBatis</code>的整合会使项目开发更加简便，同时还支持<code>XML</code>和注解两种配置方式。下面为注解的方式，步骤如下：</p><ol><li><p>创建<code>Mapper</code>接口文件，在<code>com.learn.mapper</code>包下，创建一个用于对数据库<code>t_comment</code>数据操作的接口<code>CommentMapper</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kanghua.bean.Comment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM t_comment WHERE id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comment <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO t_comment(content, author, a_id)&quot; + &quot;values (#&#123;content&#125;, #&#123;author&#125;, #&#123;aId&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE INTO t_comment SET content=#&#123;content&#125; WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM t_comment WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteComment</span><span class="params">(Integer id)</span></span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    文件中，<code>@Mapper</code>注解表示该类是一个<code>MyBatis</code>接口文件，并保证能够被<code>SpringBoot</code>自动扫描到<code>Spring</code>容器中，在接口内部，分别通过<code>@Select</code>、<code>@Insert</code>、<code>@Update</code>、<code>@Delete</code>注解配合<code>SQL</code>语句完成了对数据库表<code>t_comment</code>数据的增删改查操作。</p><blockquote><p>上面文件中，在对应的接口类上添加了<code>@Mapper</code>注解，如果编写的<code>Mapper</code>接口过多时，需要重复为每一个接口文件添加<code>@Mapper</code>注解，为了避免这种麻烦，可以直接在<code>SpringBoot</code>项目启动器类上添加<code>@MapperScan(&quot;xxx&quot;)</code>注解，不需要再逐个添加<code>@Mapper</code>注解。<code>@MapperScan(&quot;xxx&quot;)</code>注解的作用和<code>@Mapper</code>注解类似，但是它必须指定需要扫描的具体包名，例如<code>@MapperScan(&quot;com.learn.mapper&quot;)</code>。</p></blockquote></li><li><p>编写单元测试进行接口方法测试。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CommentMapper commentMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectComment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comment comment = commentMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    先通过<code>@Autowired</code>注解将<code>CommentMapper</code>接口自动装配为<code>Spring</code>容器中的<code>Bean</code>，然后使用<code>@Test</code>注解标注<code>selectComment()</code>方法是单元测试方法，这里仅演示了<code>Mapper</code>接口中的数据查询。</p></li><li><p>运行<code>selectComment()</code>方法，控制台输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;null)</span><br></pre></td></tr></table></figure><p>我们会发现，<code>aId</code>的结果是<code>null</code>，并不是我们设置的1，这是因为编写的实体类<code>Comment</code>中使用了驼峰命令法，将<code>t_comment</code>表中的<code>a_id</code>字段设计成了<code>aId</code>属性，所以无法正确映射查询结果，为了解决上面的问题，可以在<code>application.properties</code>中添加一下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>再次测试即可得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;1)</span><br></pre></td></tr></table></figure></li></ol><h3 id="用配置文件的方式整合MyBatis"><a href="#用配置文件的方式整合MyBatis" class="headerlink" title="用配置文件的方式整合MyBatis"></a>用配置文件的方式整合<code>MyBatis</code></h3><p>​    <code>SpringBoot</code>整合<code>MyBatis</code>时，不仅支持注解方式，还支持<code>XML</code>配置文件的方式，具体步骤如下：</p><ol><li><p>创建一个<code>Mapper</code>接口文件，在<code>com.learn.mapper</code>包中，创建一个操作数据表<code>t_article</code>的接口<code>ArticleMapper</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">selectArticle</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>XML</code>映射文件，在<code>resource</code>目录下，创建一个统一管理映射文件的包<code>mapper</code>，并在该包下编写与<code>ArticleMapper</code>接口对应的映射文件<code>ArticleMapper.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kanghua.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectArticle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;articleWithComment&quot;</span>&gt;</span></span><br><span class="line">        SELECT a.*,c.id c_id, c.content c_content, c.author</span><br><span class="line">        FROM t_article a, t_comment c</span><br><span class="line">        WHERE a.id=c.a_id AND a.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;articleWithComment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;commentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_content&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateArticle&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Article&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_article</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title !=null and title != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;content !=null and content !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                content=#&#123;content&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，<code>&lt;mapper&gt;</code>标签中的<code>namespace</code>属性值对用的是<code>ArticleMapper</code>接口文件全路径名称，在映射文件中根据<code>ArticleMapper</code>接口文件中的方法，编写两个对应的<code>SQL</code>语句，同时配置数据类型映射时，没有使用类的全路径名称，而是使用了类的别名，（例如，没有使用<code>com.learn.Article</code>而是使用了<code>Article</code>）。</p></li><li><p>配置<code>XML</code>映射文件路径，我们在项目中编写的<code>XML</code>映射文件，<code>SpringBoot</code>无法扫描到自定义编写的<code>XML</code>配置文件，还必须在全局配置文件<code>application.properties</code>中添加<code>MyBatis</code>映射文件路径的配置，同时需要添加实体类别名映射路径，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置MyBatis的XML配置文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment"># 配置XML映射文件中指定的实体类别名路径</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.bean</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，在使用配置文件方式整合<code>MyBatis</code>时，<code>MyBatis</code>映射文件路径的配置必不可少；而实体类别名的配置是根据前面创建的<code>XML</code>映射文件别名使用情况来确定的，如果<code>XML</code>映射文件中使用的都是类的全路径名称，则不需要配置。</p></li><li><p>编写测试类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line">Article article = articleMapper.selectArticle(<span class="number">1</span>);</span><br><span class="line">System.out.println(article);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>控制台中打印出了下面的信息，说明配置完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Article(id&#x3D;1, title&#x3D;SpringBoot基础入门, content&#x3D;从入门到精通讲解..., commentList&#x3D;[Comment(id&#x3D;1, content&#x3D;很全、很详细, author&#x3D;狂奔的蜗牛, aId&#x3D;null), Comment(id&#x3D;2, content&#x3D;赞一个, author&#x3D;tom, aId&#x3D;null), Comment(id&#x3D;3, content&#x3D;很详细, author&#x3D;kitty, aId&#x3D;null), Comment(id&#x3D;4, content&#x3D;很好，非常详细, author&#x3D;张三, aId&#x3D;null)])</span><br></pre></td></tr></table></figure><blockquote><p>​    对于<code>SpringBoot</code>支持与<code>MyBatis</code>整合的两种方式而言，使用注解的方式比较合适简单的增删改查操作；而使用配置文件的方式稍微麻烦，但对于复杂的数据操作却显得比较实用。实际开发中，使用<code>SpringBoot</code>整合<code>MyBatis</code>进行项目开发时，通常会混合使用两种整合方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="posts/3ce02997.html"/>
      <url>posts/3ce02997.html</url>
      
        <content type="html"><![CDATA[<p>​    可以用<code>Maven</code>构建<code>Spring Boot</code>项目，当然也可以用<code>Spring Initializr</code>构建<code>Spring Boot</code>项目，具体步骤就不写了。</p><h3 id="添加Spring-Boot相关依赖"><a href="#添加Spring-Boot相关依赖" class="headerlink" title="添加Spring Boot相关依赖"></a>添加<code>Spring Boot</code>相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入SpringBoot相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Web场景依赖启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，<code>&lt;parent&gt;</code>标签中添加的<code>spring-boot-starter-parent</code>依赖是<code>SpringBoot</code>框架集成项目的统一父类管理依赖，添加该依赖后就可以使用<code>SpringBoot</code>的相关特性；<code>&lt;version&gt;</code>标签是指定<code>SpringBoot</code>的版本号是<code>2.5.2</code>，<code>  &lt;dependencies&gt;</code>标签中添加的<code>spring-boot-starter-web</code>依赖是<code>SpringBoot</code>框架对<code>Web</code>开发场景集成支持的依赖启动器，添加后就可以自动导入<code>Spring MVC</code>框架相关依赖进行<code>Web</code>开发了。</p><p>​    注意：导入依赖后最好刷新一下<code>Maven</code></p><img src="/posts/3ce02997/a.png" style="zoom:80%;"><h3 id="编写出程序启动类"><a href="#编写出程序启动类" class="headerlink" title="编写出程序启动类"></a>编写出程序启动类</h3><p>​    在我们创建的项目中的<code>java</code>文件夹下创建一个名称为<code>com.learn</code>的包，在该包下创建一个主程序启动类<code>Starter</code>，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Starter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    其中<code>@SpringBootApplication</code>是<code>SpringBoot</code>框架的核心注解，用于表明<code>Start</code>类是<code>SpringBoot</code>项目的主程序启动类。第10行代码调用<code>SpringApplication.run()</code>方法启动主程序类。</p><h3 id="创建用于Web访问的Controller"><a href="#创建用于Web访问的Controller" class="headerlink" title="创建用于Web访问的Controller"></a>创建用于Web访问的<code>Controller</code></h3><p>​    在<code>com.learn</code>包下创建一个<code>controller</code>的包，在这个包下创建一个名称为<code>HelloController</code>的请求处理控制类，并编写一个请求处理方法，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GettMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>@RestController</code>注解是一个组合注解，等同于<code>@Controller</code>和<code>@ResponseBody</code>两个注解结合使用的效果。主要作用是将当前类作为控制层的组件添加到<code>Spring</code>容器中，同时该类的方法无法返回<code>JSP</code>页面，而且会返回<code>JSON</code>字符串。</li><li><code>@GetMapping</code>注解等同于<code>@RequestMapping(method=RequestMethod.GET)</code>注解，主要作用是设置方法的访问路径并限定其访问方法为<code>Get</code>。</li></ol><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>​    项目运行成功后，在控制台上会发现<code>SpringBoot</code>项目默认启动的端口号为8080，在浏览器上访问”<a href="http://127.0.0.1:8080/hello&quot;%E3%80%82%E8%BE%93%E5%87%BA%E5%86%85%E5%AE%B9%E6%98%AF%E2%80%9CHello">http://127.0.0.1:8080/hello&quot;。输出内容是“Hello</a> Spring Boot”。</p><p>​    利用<code>Spring Initializr</code>创建的项目结构如下</p><img src="/posts/3ce02997/b.png" style="zoom:80%;"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven打包工具插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>​    个人不太喜欢用热部署，网上有很多教程，就不写了。</p><p>​    <code>Ctrl+F5</code>是个好东西，感兴趣的小伙伴可以尝试一下</p><h3 id="部分核心注解详解"><a href="#部分核心注解详解" class="headerlink" title="部分核心注解详解"></a>部分核心注解详解</h3><p>​    <code>@SpringBootApplication</code>注解是一个组合注解，包含<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>3个核心注解。具体如下：</p><ol><li><p><code>@SpringBootConfiguration</code>注解</p><p>​    <code>@SpringBootConfiguration</code>注解表示<code>SpringBoot</code>配置类。查看<code>@SpringBootConfiguration</code>注解源码，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"><span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码可以看出，<code>@SpringBootConfiguration</code>注解内部有一个核心注解<code>@Configuration</code>该注解是<code>Spring</code>框架提供的，表现当前类为一个配置类（XML配置文件的注解表现形式），并可以被组件扫描器扫描，由此可见，<code>@SpringBootConfiguration</code>注解的作用与<code>@Configuration</code>注解相同，都是标识一个可以被组件扫描器扫描的配置类，只不过<code>@SpringBootConfiguration</code>是被<code>SpringBoot</code>进行了重新封装命令了。</p></li><li><p><code>@EnableAutoConfiguration</code>注解</p><p>​    <code>@EnableAutoConfiguration</code>注解是表示开启自动配置功能，该注解是<code>SpringBoot</code>框架最重要的注解，也是实现自动化配置的注解，同样，查看该注解内部查看源码信息，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span><span class="comment">// 自动配置包</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span><span class="comment">// 自动配置类扫描导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码可以看出，<code>@EnableAutoConfiguration</code>注解是一个组合注解，主要包含有<code>@AutoConfigurationPackage</code>注解和<code>@Import</code>两个核心注解，下面对这两个注解介绍：</p><ol><li><p><code>@AutoConfigurationPackage</code>注解</p><p>查看其源码信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="comment">// 导入Registrar中注册的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    </span><br><span class="line">String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面源码可以看出，<code>@AutoConfigurationPackage</code>注解的功能是由<code>@Import</code>实现的，作用是向容器中导入注册的所有组件，导入的组件由<code>Registrar</code>决定。查看<code>Registrar</code>的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，在<code>Registrar</code>类中有一个<code>registerBeanDefinitions()</code>方法，使用<code>Debug</code>模式中会发现上面代码中加粗部分获取的是项目主程序启动类所在的目录<code>com.itheima</code>。也就是说，<code>@AutoConfigurationPackage</code>注解的主要所用是获取项目主程序启动类所在的根目录，从而制定后续组件扫描器要扫描的包位置。因此在定义项目包结构时，要求定义的包结构非常规范，项目主程序启动类要定义在最外层的根目录位置，然后在根目录位置内部建立子包和类进行业务开发，这样才能保证定义的类能够被组件扫描器扫描。</p></li><li><p><code>@Import(AutoConfigurationImportSelector.class)</code>注解</p><p>​    查看<code>AutoConfigurationImportSelector</code>类里的<code>getAutoConfigurationEntry()</code>方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">// 获取所有SpringBoot提供的后续自动配置类xxxAutoConfiguration</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">    <span class="comment">// 筛选并过滤出当前应用环境下需要的自动配置类xxxAutoConfiguration</span></span><br><span class="line">configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面的<code>getAutoConfigurationEntry()</code>方法，其主要作用是筛选出当前项目运行需要启动的自动配置类<code>xxxAutoConfiguration</code>，从而实现当前项目运行所需的自动配置环境。另外，在上述核心方法加注释的地方显示了两个比较重要的业务处理方法，具体说明如下：</p><ul><li><p><code>getCandidateConfigurations(annotationMetadata, attributes)</code>方法：该方法的主要作用是从<code>SpringBoot</code>提供的自动配置依赖<code>META-INF/spring.factories</code>文件中获取所有候选自动配置类<code>xxxAotuConfiguration</code>（<code>springboot2.5.2</code>版本中提供的自动配置类有131个）。</p></li><li><p><code>configurations = getConfigurationClassFilter().filter(configurations);</code>方法：该方法的作用是对所有候选的自动配置类进行筛选，根据项目<code>pom.xml</code>文件中加入的依赖文件筛选出最终符合当前项目运行环境对应的自动配置类（筛选完成后可能只有25个）。</p><p><code>META-INF/spring.factories</code>文件路径如下：</p></li></ul><img src="/posts/3ce02997/c.png" style="zoom:80%;"></li></ol></li><li><p><code>@ComponentScan</code>注解</p><p>​    <code>@ComponentScan</code>注解是一个组件包扫描器，用于指定包中注解类自动配置到<code>Spring</code>的<code>Bean</code>容器中。</p><p>​    <code>@ComponentScan</code>注解具体扫描的包的根路径由<code>SpringBoot</code>项目主程序启动类所在包的位置决定，在扫描过程中由前面介绍的<code>@AutoConfigurationPackage</code>注解进行解析，从而得到<code>SpringBoot</code>项目主程序启动类所在包的具体位置。</p></li></ol><h3 id="SpringBoot-执行流程"><a href="#SpringBoot-执行流程" class="headerlink" title="SpringBoot 执行流程"></a>SpringBoot 执行流程</h3><p>​    每个<code>SpringBoot</code>项目都有一个主程序启动类，在主程序启动类中有一个启动项目的<code>main()</code>方法，在该方法中通过执行<code>SpringApplication.run()</code>即可启动整个<code>SpringBoot</code>程序。<code>run()</code>方法内部的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中可以看出，<code>SpringApplication.run()</code>方法内部执行了两个操作，分别是<code>SpringApplication</code>实例的初始化和调用<code>run()</code>启动项目，这两个阶段的实现具体说明如下。</p><ol><li><h5 id="SpringApplication实例的初始化"><a href="#SpringApplication实例的初始化" class="headerlink" title="SpringApplication实例的初始化"></a><code>SpringApplication</code>实例的初始化</h5><p>查看<code>SpringApplication</code>实例对象初始化源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"><span class="keyword">this</span>.bootstrapRegistryInitializers = getBootstrapRegistryInitializersFromSpringFactories();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在上面代码中能看出，<code>SpringApplication</code>初始化过程主要包含了4部分，具体如下：</p><ol><li><code>this.webApplicationType = WebApplicationType.deduceFromClasspath();</code>用于判断当前<code>webApplicationType</code>应用类型。<code>deduceFromClasspath()</code>方法用于查看<code>Classpath</code>类路径下是否存在某个特征类，从而判断当前<code>webApplicationType</code>类型是<code>SERVLET</code>应用（<code>Spring5</code>之前的传统<code>MVC</code>应用）还是<code>REACTIVE</code>应用（<code>Spring5</code>开始出现的<code>WebFlux</code>交互式应用）。</li><li><code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code>用于设置<code>SpringApplication</code>应用的初始化器。在初始化设置过程中，会使用<code>Spring</code>类加载器<code>SpringFactoriesLoader</code>从<code>META-INF/spring.factories</code>文件中获取所有可用的应用初始化器类<code>ApplicationContextInitializer</code>。</li><li><code>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</code>用于设置<code>SpringApplication</code>应用的监听器。监听器设置过程与上一步初始化器设置的过程基本一样，也是使用<code>SpringFactoriesLoader</code>从<code>META-INF/spring.factories</code>文件中获取所有可用的应用初始化器类<code>ApplicationContextInitializer</code>。</li><li><code>this.mainApplicationClass = deduceMainApplicationClass();</code>用于推断并设置项目<code>main()</code>方法启动的主程序启动类。</li></ol></li><li><h5 id="项目的初始化启动"><a href="#项目的初始化启动" class="headerlink" title="项目的初始化启动"></a>项目的初始化启动</h5><p>​    下面是<code>run(args)</code>方法执行的项目初始化启动过程，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">DefaultBootstrapContext bootstrapContext = createBootstrapContext();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.获取SpringApplication初始化的SpringApplicationRunListener运行监听器并运行</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2.项目运行环境Environment的预配置</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">            </span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3.项目应用上下文ApplicationContext的预配置</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">            </span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4.由项目运行监听器启动配置好的应用上下文ApplicationContext</span></span><br><span class="line">listeners.started(context);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5.调用应用上下文ApplicationContext中配置的程序执行器xxxRunner</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6.由项目运行监听器持续运行配置好的应用上下文ApplicationContext</span></span><br><span class="line">listeners.running(context);</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    由上面源码可以看出，项目初始化启动过程大致包含6个部分：</p><ol><li><code>getRunListeners(args)</code>和<code>listeners.starting()</code>方法主要用于获取<code>SpringApplication</code>实例初始化过程中初始化的<code>SpringApplicationRunListener</code>监听器并运行。</li><li><code>prepareEnvironment(listeners, bootstrapContext, applicationArguments);</code>方法主要用于对项目运行环境进行预设置，同时通过<code>configureIgnoreBeanInfo(environment);</code>方法排除一些不需要的运行环境。</li><li><code>context = createApplicationContext();</code>方法及下面4行代码，主要作用是对项目应用上下文<code>ApplicationContext</code>的预设置，包含先创建应用上下文环境<code>ApplicationContext</code>，接着使用之前初始化设置的<code>context</code>（应用上下文环境）、<code>enviroment</code>（项目运行环境）、<code>listener</code>（运行监听器）、<code>applicationArguments</code>（项目参数）和<code>printBanner</code>（项目图标信息）进行应用上下文的组装配置，并刷新配置。</li><li><code>listeners.started(context)</code>方法用于使运行监听器<code>SpringApplicationRunListener</code>启动配置好的应用上下文<code>ApplicationContext</code>。</li><li><code>callRunners(context, applicationArguments);</code>方法用于调用项目中自定义的执行器<code>XxxRunner</code>类，使得在项目启动完成后立即执行一些特定程序。其中，<code>SpringBoot</code>提供的执行器接口有<code>ApplicationRunner</code>和<code>CommandLineRunner</code>两种，在使用时只需要定义一个执行器类实现其中一个接口并重写对应的<code>run()</code>方法接口，<code>SpringBoot</code>项目启动后会立即执行这些特定程序。</li><li><code>listeners.running(context);</code>方法表示在前面一切初始化启动都没有问题的情况下，使用运行监听器<code>SpringApplicationRunListener</code>持续运行配置好的应用上下文<code>ApplicationContext</code>，这样整个<code>SpringBoot</code>项目就正式启动成功了。与此同时，经过初始化封装设置的应用上下文<code>ApplicationContext</code>也处于活跃状态。</li></ol></li></ol><img src="/posts/3ce02997/d.png" style="zoom:80%;" name="SpringBoot执行流程图"><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><h4 id="application-properties配置文件"><a href="#application-properties配置文件" class="headerlink" title="application.properties配置文件"></a><code>application.properties</code>配置文件</h4><p>​    使用<code>Spring Initializr</code>方式构建<code>SpringBoot</code>项目时，会在<code>resource</code>目录下自动生成一个空的文件<code>application.properties</code>文件，<code>SpringBoot</code>项目启动时会自动加载<code>application.properties</code>文件。</p><p>​    我们可以在<code>application.properties</code>文件中定义<code>SpringBoot</code>项目的相关属性，当然，这些相关属性可以是系统属性，环境变量，命令参数等，也可以是自定义配置文件名称和位置，例如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.address</span>=<span class="string">80</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8443</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.config.localtion</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><p>​    详见<a href="https://spring.io/projects/spring-boot#learn">官网</a>说明文档。</p><p>​    <code>application.properties</code>实战</p><ol><li><p>创建好项目</p></li><li><p>在<code>com.learn</code>包下创建一个<code>bean</code>包，并在该包下创建两个实体类<code>Pet</code>和<code>User</code>，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> PetId;</span><br><span class="line">    <span class="keyword">private</span> String PetName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> String[] family;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>目录下的<code>application.properties</code>配置文件，在该配置文件中编写需要对<code>Person</code>类设置的配置属性，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.id</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">person.name</span>=<span class="string">tom</span></span><br><span class="line"><span class="meta">person.hobby</span>=<span class="string">play, read</span></span><br><span class="line"><span class="meta">person.family</span>=<span class="string">father, mother</span></span><br><span class="line"><span class="meta">person.map.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.map.k2</span>=<span class="string">v2</span></span><br><span class="line"><span class="meta">person.pet.type</span>=<span class="string">dog</span></span><br><span class="line"><span class="meta">person.pet.name</span>=<span class="string">kity</span></span><br></pre></td></tr></table></figure><p>​    注意：可在配置文件中加入下面依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    同时，为了打包时减少包的大小，也可以加上下面依赖（上面配置并不会影响整个项目的运行，只是为了开发的时候方便了很多，在<code>application.properties</code>文件中有了<code>person</code>这个属性的提示。）</p><blockquote><p>添加依赖后，注意重新启动运行项目，或者使用<code>Ctrl+F9</code>重构当前项目。</p></blockquote></li><li><p>在<code>com.learn.controller.HelloController</code>中，进行测试，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kanghua.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    Person person;    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">hello1</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> person;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行整个项目，在浏览器中访问<code>http://127.0.0.1:8080/hello</code>，即可得到如下结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">&quot;hobby&quot;</span>:[<span class="string">&quot;play&quot;</span>,<span class="string">&quot;read&quot;</span>],<span class="attr">&quot;family&quot;</span>:[<span class="string">&quot;father&quot;</span>,<span class="string">&quot;mother&quot;</span>],<span class="attr">&quot;map&quot;</span>:&#123;<span class="attr">&quot;k1&quot;</span>:<span class="string">&quot;v1&quot;</span>,<span class="attr">&quot;k2&quot;</span>:<span class="string">&quot;v2&quot;</span>&#125;,<span class="attr">&quot;pet&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;dog&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;kity&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="application-yaml配置文件"><a href="#application-yaml配置文件" class="headerlink" title="application.yaml配置文件"></a><code>application.yaml</code>配置文件</h4><p>​    <code>application.yaml</code>配置文件也可以写成<code>application.yml</code>，同样可以被项目识别。</p><p>​    <code>YAML</code>文件格式是<code>SpringBoot</code>支持的一种<code>JSON</code>超集文件格式，相较于传统的<code>Properties</code>配置文件，<code>YAML</code>文件以数据为核心，是一种更为直观且容易被计算机识别的数据序列化格式。<code>application.yaml</code>配置文件的工作原理和<code>application.properties</code>是一样的，只不过<code>YAML</code>格式配置文件看起来更简洁一些。</p><blockquote><p>​    注意：<code>application.properties</code>文件的优先级别比<code>application.yaml</code>的优先级别高，所有配置先以<code>application.properties</code>文件优先</p></blockquote><p>​    <code>application.yaml</code>文件使用<code>key:(空格)value</code>格式配置文件，使用缩进控制层级关系。</p><p>​    下面列举一些不同的数据类型：</p><ol><li><p><code>value</code>值为普通数据类型(如数字、字符串、布尔等)</p><p>当<code>YAML</code>配置文件中配置的属性值为普通数据类型时，可以直接配置对应的属性值，同时对于字符串类型的属性值，不需要格外添加引号，代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>上面代码配置了<code>server</code>的<code>port</code>和<code>path</code>属性，<code>port</code>和<code>path</code>属于同一层级。</p></li><li><p><code>value</code>值为数组和单列集合</p><p>当<code>YAML</code>配置文件中配置的属性值为数组或单列集合类型时，主要有两种书写方式；缩进式写法和行内写法。</p><p>缩进式写法有两种，例1：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line"><span class="attr">hobby:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">play</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">read</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sleep</span></span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line"><span class="attr">hobby:</span> </span><br><span class="line"><span class="string">play,</span></span><br><span class="line"><span class="string">read,</span></span><br><span class="line"><span class="string">sleep</span></span><br></pre></td></tr></table></figure><p>​    上面代码使用两种缩进式写法为<code>person</code>对象的属性<code>hobby</code>赋值，其中一种是通过<code>-(空格)属性值</code>的形式为属性赋值，另外一种是直接复制并使用英文逗号分隔属性值。</p><p>行内式写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line"><span class="attr">hobby:</span> [<span class="string">play</span>, <span class="string">read</span>, <span class="string">sleep</span>]</span><br></pre></td></tr></table></figure><p>在<code>YAML</code>配置文件中，行内式的写法显然比缩进式更加简便。使用行内式写法设置属性值时，中括号“[]”是可以省略的，程序会自动匹配校对属性的值。</p></li><li><p><code>value</code>值为<code>Map</code>集合和对象</p><p>当<code>YAML</code>配置文件中的配置的属性值为<code>Map</code>集合或对象类型时，<code>YAML</code>配置文件格式同样可以分为缩进式写法和行内写法：</p><p>缩进式写法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line"><span class="attr">map:</span> </span><br><span class="line"><span class="string">k1:v1</span></span><br><span class="line"><span class="string">k2:v2</span></span><br></pre></td></tr></table></figure><p>行内式写法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> <span class="attr">map:</span> &#123;<span class="string">k1:v1</span>, <span class="string">k2:v2</span>&#125;</span><br></pre></td></tr></table></figure><p>在<code>YAML</code>配置文件中，配置的属性值为<code>Map</code>集合或对象类型时，缩进式写法的形式按照<code>YAML</code>文件格式编写即可，而行内式写法的属性值要用大括号“{}”包含。</p></li></ol><p>​    在<code>application.yaml</code>配置文件中设置<code>Person</code>对象，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:  id: 1  name: zhangsan  family:</span> <span class="string">father,</span> <span class="attr">mother  pet:    type: dog    name:</span> <span class="string">hh</span></span><br></pre></td></tr></table></figure><p>​    上面<code>application.yaml</code>中配置的<code>Person</code>的部分属性，也会通过<code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>注释注入<code>Person</code>实体类的对应属性中。</p><p>​    运行程序，成功。</p><p><strong>注意：<code>application.properties</code>配置文件的优先级别要比<code>application.yaml</code>级别高，重复配置一个属性时，会显示<code>aapplication.properties</code>中的值</strong></p><p>​    对比发现，<code>YAML</code>配置文件的格式更加简明，方便，所以推荐<code>YAML</code>格式配置文件。</p><h3 id="配置文件属性值的注入"><a href="#配置文件属性值的注入" class="headerlink" title="配置文件属性值的注入"></a>配置文件属性值的注入</h3><p>​    使用<code>SpringBoot</code>全局配置文件配置属性时，如果配置的属性是<code>SpringBoot</code>默认提供的属性，例如服务器端口<code>server.port</code>，那么<code>SpringBoot</code>内部会自动扫描并读取属性值。如果配置的属性石用户自定义属性，如上面的<code>Person</code>实体类属性，则必须在程序中注入这些配置属性方可生效。<code>SpringBoot</code>支持多种注入配置文件的方式，下面介绍<code>@ConfigruationProperties</code>和<code>@Value</code>注入属性。</p><h4 id="使用-ConfigurationProperties注入属性"><a href="#使用-ConfigurationProperties注入属性" class="headerlink" title="使用@ConfigurationProperties注入属性"></a>使用<code>@ConfigurationProperties</code>注入属性</h4><p>​    <code>SpringBoot</code>提供的<code>@ConfigurationProperties</code>注解用来快速、方便的将配置文件中的自定义属性值批量注入某个<code>Bean</code>对象的多个对用属性中。假设现在有一个配置文件，使用<code>@ConfigurationProperties</code>注入配置文件的属性，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码使用<code>@Component</code>和<code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>将配置文件的每个属性映射到<code>person</code>类属性中。</p><blockquote><p>​    注意：使用<code>@ConfigurationProperties</code>注解批量注入属性值时，要保证配置文件中的属性与对应实体类的属性名一致，否则无法正确获取并注入属性值。</p></blockquote><h4 id="使用-Value注入属性"><a href="#使用-Value注入属性" class="headerlink" title="使用@Value注入属性"></a>使用<code>@Value</code>注入属性</h4><p>​    <code>@Value</code>注解是<code>Spring</code>框架提供的，用来读取配置是文件中的属性值并逐个注入<code>Bean</code>对象的对应属性中。<code>SpringBoot</code>框架对<code>Spring</code>框架中的<code>@Value</code>注解精心了默认继承。所以在<code>SpringBoot</code>框架中还可以使用该注解读取和注入配置文件属性值，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，<code>@Component</code>和<code>@Value</code>用于注入<code>Person</code>的<code>id</code>属性。其中<code>@Value</code>不仅支持注入<code>Person</code>的<code>id</code>属性，而且还可以直接为<code>id</code>属性复制，这是<code>@ConfigurationProperties</code>不支持的。</p><p>​    具体实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">// 用于将Person类作为Bean注入Spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用@Value注入id</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// 利用@Value注入name</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> String[] family;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，使用<code>@Value</code>注解注入的属性类型只能是基本数据类型。</p></blockquote><h4 id="两种注解对比分析"><a href="#两种注解对比分析" class="headerlink" title="两种注解对比分析"></a>两种注解对比分析</h4><p>​    下面我们针对上面的<code>SpringBoot</code>支持的配置文件属性注入的两个主要注解<code>@ConfigurationProperties</code>和<code>@Value</code>进行对比分析。如下：</p><table><thead><tr><th>对比点</th><th><code>@ConfigurationProperties</code></th><th><code>@Value</code></th></tr></thead><tbody><tr><td>底层框架</td><td><code>SpringBoot</code></td><td><code>Spring</code></td></tr><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>单个注入</td></tr><tr><td>setter方法</td><td>需要</td><td>不需要</td></tr><tr><td>复杂类型属性注入</td><td>支持</td><td>不支持</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td><code>JSR303</code>数据校验</td><td>支持</td><td>不支持</td></tr><tr><td><code>SqEL</code>表达式</td><td>不支持</td><td>支持</td></tr></tbody></table><p>具体说明如下：</p><ol><li><p>底层框架</p><p>​    <code>@ConfigurationProperties</code>注解是<code>SpringBoot</code>框架自带的，而<code>@Value</code>注解是<code>Spring</code>框架支持的，只不过<code>SpringBoot</code>框架对<code>Spring</code>进行了默认支持，所以也可以使用<code>@Value</code>注解相关的相关功能。</p></li><li><p>功能</p><p>​    <code>@ConfigruationProperties</code>能够将配置文件中的属性批量注入<code>Bean</code>对象，而<code>@Value</code>只能一个一个单独注入。</p></li><li><p>属性<code>setter</code>方法</p><p>​    在使用<code>@ConfigruationProperties</code>注释进行配置文件属性值读取注入时，还必须为每一个属性设置<code>setter</code>方法，通过对应的注解才能够将配置文件中的属性一一匹配并注入对用的<code>Bean</code>属性上，如果配置文件中没有配置属性值，则会自动将对象的<code>Bean</code>属性设置为空。</p><p>​    <code>@Value</code>完全不需要为属性设置<code>setter</code>方法，该注解会先通过表达式读取配置文件中指定的属性值，然后自动注入下方的<code>Bean</code>属性上。如果读取的配置文件属性为空，进行属性注入时程序会自动报错。</p></li><li><p>复杂类型属性注入</p><p>​    <code>@ConfigruationProperties</code>和<code>@Value</code>都能注入配置文件中的属性，不同的是，<code>@ConfigurationProperties</code>支持任意类型数据类型的属性注入，包括基本数据类型和复杂数据类型，而<code>@Value</code>只能注入基本类型的属性。</p></li><li><p>松散绑定</p><p>​    <code>@ConfigruationProperties</code>注解进行配置文件属性值注入时，支持松散绑定语法，例如<code>Person</code>类有一个字符串类型的属性<code>firstName</code>，那么在配置文件中进行属性配置时可以使用如下配置方式，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.firstName</span>=<span class="string">james//标准写法，对用Person类属性名</span></span><br><span class="line"><span class="meta">person.first-name</span>=<span class="string">james//使用横线“-”分隔多个单词</span></span><br><span class="line"><span class="meta">person.first_name</span>=<span class="string">james//使用下划线“_”分隔多个单词</span></span><br><span class="line"><span class="meta">PERSON.FIRST_NAME</span>=<span class="string">james//使用大小写格式，推荐常量属性配置</span></span><br></pre></td></tr></table></figure></li><li><p><code>JSR303</code>数据校验</p><blockquote><p>补充：</p><p>​    <code>JSR</code>是<code>Java Specification Requests</code>的缩写，意思是<code>Java</code>规范提案。是指向<a href="https://baike.baidu.com/item/jcp">JCP</a><code>(Java Community Process)</code>提出新增一个标准化技术规范的正式请求。任何人都可以提交<code>JSR</code>，以向<code>Java</code>平台增添新的<code>API</code>和服务。<code>JSR</code>已成为<code>Java</code>界的一个重要标准。</p><p>​    <code>JSR-303</code>是<code>JAVA EE 6</code>中的一项子规范，叫做<code>Bean Validation</code>，<code>Hibernate Validator</code>是<code>Bean Validation</code>的参考实现 。 <code>Hibernate Validator</code>提供了<code>JSR 303</code>规范中所有内置<code>constraint</code>的实现，除此之外还有一些附加的<code>constraint</code>。</p><img src="/posts/3ce02997/e.png" style="zoom:80%;"><p><code>Hibernate Validator</code>附加的<code>constraint</code></p><img src="/posts/3ce02997/f.png" style="zoom:80%;"></blockquote><p>​    <code>@ConfigruationProperties</code>注解进行配置文件属性值注入时，支持<code>JSR303</code>数据校验，其主要作用是校验配置文件中注入对用<code>Bean</code>属性的值是否符合相关值的规则，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span><span class="comment">// 引入Spring框架支持的数据校验规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上诉代码代码中，使用<code>@ConfigurationProperties</code>注解注入配置文件属性值时，在实体类<code>Example</code>上引入<code>@Validated</code>注解进行数据校验，在属性<code>email</code>上引入<code>@Email</code>注解进行邮件规则校验。如果注入的配置文件属性不符合相关校验规则，程序会自动报错。<code>@Value</code>注解不支持<code>JSR303</code>数据校验功能。</p></li><li><p><code>SqEL</code>表达式</p><p>​    <code>@Value</code>注解逐日配置文件属性时，支持<code>SqEL</code>表达式语法，即“#{xx}”。例如<code>Person</code>类有一个整数类型的属性<code>id</code>，直接使用<code>SqEL</code>表达式语法进行属性注入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;5*2&quot;)</span><span class="comment">// 使用@Value注解的SqEL表达式直接为属性注入值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br></pre></td></tr></table></figure><p>​    上面代码在不使用配置文件的情况下，直接使用<code>@Value</code>注解支持的<code>SqEL</code>表达式注入<code>Bean</code>属性，而<code>@ConfigurationProperties</code>注解不支持此功能。</p><p>​    前面的部分我们队<code>@ConfigurationProperties</code>和<code>@Value</code>两种注解注入配置文件属性的情况进行了对比分析，那么在实际开发中，怎么使用，下面给出两种注解的主要优缺点：</p><ol><li>​    如果只是针对某一个业务需求，要引入配置文件中的个别属性值，推荐使用<code>@Value</code>注解</li><li>如果针对某个<code>JavaBean</code>类，需要批量注入属性值，则推荐使用<code>@ConfigurationProperties</code>注解。</li></ol></li></ol><h3 id="SpringBoot自定义配置"><a href="#SpringBoot自定义配置" class="headerlink" title="SpringBoot自定义配置"></a><code>SpringBoot</code>自定义配置</h3><p>​    <code>SpringBoot</code>免除了大部分配置，但是如果我们自定义配置文件，<code>SpringBoot</code>时无法识别这些配置文件的，此时就需要我们手动加载。</p><h4 id="使用-PropertySource加载配置文件"><a href="#使用-PropertySource加载配置文件" class="headerlink" title="使用@PropertySource加载配置文件"></a>使用<code>@PropertySource</code>加载配置文件</h4><p>​    如果要加载自定义配置文件，可以使用<code>@PropertySource</code>和<code>@Configuration</code>注解实现。<code>PropertySource</code>注解可以指定自定义配置文件的位置和名称，<code>@Configuration</code>注解可以将实体类指定为自定义配置类。如果需要将自定义配置文件中的属性值注入实体类属性，可以使用<code>@ConfigurationProperties</code>或者<code>@Value</code>注入属性值。</p><p>下面用一个案例说明：</p><ol><li><p>在<code>resource</code>项目下，新建一个<code>test.properties</code>自定义配置文件，在该配置文件中编写需要设置的配置属性，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">test.id</span>=<span class="string">110</span></span><br><span class="line"><span class="meta">test.name</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>com.learn.bean</code>中自定义一个配置类<code>MyProperties</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MyProperties.class)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;test&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码核心注解介绍如下：</p><ul><li><code>@Configuration</code>注解用于表示当前类是一个自定义配置类，该类会作为<code>Bean</code>组件添加到<code>Spring</code>容器中，这里等同于<code>@Component</code>注解。</li><li><code>@PropertySource(&quot;classpath:test.properties&quot;)</code>注解指定了自定义配置文件位置和名称，这里表示自定义配置文件为<code>classpath</code>类路径下的<code>test.properties</code>文件。</li><li><code>@ConfigurationProperties(prefix = &quot;test&quot;)</code>注解将上诉自定义配置文件<code>test.properties</code>中以<code>test</code>开头的属性值注入该配置类属性中。</li><li><code>@EnableConfigurationProperties(MyProperties.class)</code>注解表示开启对应配置类，<code>MyProperties</code>的属性注入功能，该注解是配合<code>@ConfigurationProperties</code>使用的。如果自定义配置类使用了<code>@Component</code>注解而不是<code>@Configuration</code>注解，那么<code>@EnableConfigurationProperties</code>注解可以省略。</li></ul></li><li><p>测试类中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyPropertiesTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类的方法，控制台成功打印出<code>MyProperties(id=110, name=test)</code>，即<code>@PropertySource</code>注解成功加载了自定义配置文件。</p></li></ol><h4 id="使用-ImportResource加载xml配置文件"><a href="#使用-ImportResource加载xml配置文件" class="headerlink" title="使用@ImportResource加载xml配置文件"></a>使用<code>@ImportResource</code>加载<code>xml</code>配置文件</h4><p>​    传统的<code>Spring</code>项目配置主要基于<code>XML</code>文件。<code>SpringBoot</code>框架在<code>Spring 4.x</code>基础上进行了改进，默认不再使用<code>XML</code>文件配置项目，而且<code>XMl</code>配置文件不会加载到<code>Spring</code>容器中。如果希望将外部的<code>XML</code>文件加载到程序中，可以使用<code>@ImportResource</code>注解加载配置文件。</p><p>​    <code>@ImportSource</code>注解标注在一个配置类上，通常放置在应用启动类上，使用时需要制定<code>XML</code>配置文件的路径和名称。</p><p>​    案例如下：</p><ol><li><p>新建<code>com.learn.config</code>包，并在该包下创建一个类<code>MyService</code>，该类中不需要编写任何代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    文件中新建了一个空的<code>MyService</code>类，而该类目前没有添加任何配置和注解，因此还无法正常被<code>SpringBoot</code>扫描和识别。</p></li><li><p>在<code>resource</code>目录，在该目录下创建一个名为<code>beans.xml</code>的<code>XML</code>自定义配置文件，在该配置文件中将<code>MyService</code>配置为<code>Bean</code>，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.learn.config.MyService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：新建文件时，找到<code>XML Configuration File</code>中的<code>Spring Config</code>即可出现上面的代码。</strong></p></li><li><p>编写完<code>Spring</code>的<code>XML</code>配置文件后，<code>SpringBoot</code>默认是无法识别的，为了保证<code>XML</code>配置文件生效，需要在项目启动类上添加<code>@ImportResource</code>注解来指定<code>XML</code>文件位置。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><span class="comment">//加载自定义XML配置文件位置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Starter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开测试类，在测试类中引入<code>ApplicationContext</code>实体类<code>Bean</code>，并新增一个测试方法进行输出测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iocTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(applicationContext.containsBean(<span class="string">&quot;myService&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，先通过<code>@Autowired</code>注解引入了<code>Spring</code>容器实例<code>ApplicationContext</code>，然后测试方法<code>iocTest()</code>中测试查看该容器中是否包含<code>id</code>为<code>mySerice</code>的组件。</p><p>​    运行测试类，返回为<code>true</code>，则表示<code>Spring</code>容器中已经包含了<code>id</code>为<code>myService</code>实例，说明<code>@ImportResource</code>注解成功加载了<code>Spring</code>框架的<code>XML</code>的配置文件。</p></li></ol><h4 id="使用-Configuration编写自定义配置类"><a href="#使用-Configuration编写自定义配置类" class="headerlink" title="使用@Configuration编写自定义配置类"></a>使用<code>@Configuration</code>编写自定义配置类</h4><p>​    上面介绍了<code>SpringBoot</code>中引入自定义的<code>XML</code>配置文件，这种配置文件在实际开发中，特殊情况下才会使用。在<code>SpringBoot</code>开发中，“约定大于配置”的思想，更推荐使用配置类的方式代替<code>XML</code>配置。</p><p>​    使用<code>@Configuration</code>注解可以指定配置类，其作用和<code>XML</code>配置是一样的，配置类中<code>@Bean</code>注解方法返回的对象都将作为<code>Bean</code>注入<code>Spring</code>容器，默认情况下，使用<code>@Bean</code>注解的方法名就是组件名。</p><p>​    下面为具体实例：</p><ol><li><p>在<code>com.learn.config</code>包下新建一个类<code>MyConfig</code>，并使用<code>@Configuration</code>注解将该类声明一个配置类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">// 定义该类是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">// 将返回值对象作为组件添加到Spring容器中，该组件id默认为方法名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，<code>MyConfig</code>是<code>@Configuration</code>注解声明的配置类（类似于声明了一个<code>XML</code>配置文件），该配置类会被<code>SpringBoot</code>自动扫描识别；使用<code>@Bean</code>注解的<code>MyService()</code>方法，其返回值对象会作为组件添加到<code>Spring</code>容器中（类似于<code>XML</code>配置文件中的<code>&lt;bean&gt;</code>标签配置），并且该组件的<code>id</code>默认是方法名<code>myService</code>。</p></li><li><p>为了测试<code>@Configuration</code>注解配置类的效果，我们需要将之前项目启动类上添加的<code>@ImportResource</code>注解注释，然后再次执行测试类中的<code>iocTest()</code>方法，控制台输出结果为<code>true</code>。</p></li></ol><p>​    上面测试中，测试方法<code>iocTest()</code>运行成功，结果为<code>true</code>，表示<code>Spring</code>容器中已经包含了<code>id</code>为<code>myService</code>的实例对象组件，说明使用自定义配置类的方法同样可以向<code>Spring</code>容器中添加和配置组件。</p><h3 id="Profile多环境配置"><a href="#Profile多环境配置" class="headerlink" title="Profile多环境配置"></a><code>Profile</code>多环境配置</h3><h4 id="使用-Profile文件进行多环境配置"><a href="#使用-Profile文件进行多环境配置" class="headerlink" title="使用@Profile文件进行多环境配置"></a>使用<code>@Profile</code>文件进行多环境配置</h4><p>​    在<code>SpringBoot</code>框架中，使用<code>Profile</code>配置文件进行多环境配置时，该配置文件名必须满足<code>application-&#123;profile&#125;.properties</code>的格式，其中<code>&#123;profile&#125;</code>对应具体的环境标识。这里以开发环境、测试环境和生产环境为例，编写对应的配置文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application-dev.properties&#x2F;&#x2F; 开发环境配置文件</span><br><span class="line">application-test.properties&#x2F;&#x2F; 测试环境配置文件</span><br><span class="line">application-prod.properties&#x2F;&#x2F; 生产环境配置文件</span><br></pre></td></tr></table></figure><p>​    如果想使用上面对应环境的配置文件，只需要在<code>SpringBoot</code>全局配置文件中激活指定环境的配置文件即可。例如，在控制台执行下列命令激活环境配置，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>​    除了在控制台使用命令激活指定环境的方式外，还可以在项目全局配置文件中配置<code>spring.profile.active</code>属性激活配置。这里以激活<code>dev</code>开发环境配置文件为例，在全局配置文件<code>application.properties</code>中配置激活环境的属性，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活开发环境配置文件</span></span><br><span class="line"><span class="meta">spring.properties.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><p>下面有一个案例，步骤如下：</p><ol><li><p>在<code>resource</code>目录下，按照<code>Profile</code>文件命令规则创建不同运行环境对应的配置文件，这里分别创建<code>application-dev.properties</code>、<code>application-test.properties</code>和<code>application-prod.properties</code>多环境配置文件，并在各个配置文件中对服务器端口进行不同的设置，代码如下：</p><ul><li><p><code>application-dev.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-test.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-prod.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8083</span></span><br></pre></td></tr></table></figure></li></ul><p>在<code>SpringBoot</code>项目中，程序内部默认端口为8080，而上面通过<code>Profile</code>文件进行了多环境配置，不同的运行环境设置了不同的服务端口号。其中，<code>application-dev.properties</code>开发环境中，设置的服务端口号为8081；<code>application-test.properties</code>测试环境中，设置服务端口号为8082；<code>application-prdo.properties</code>生产环境中，设置服务开端口号为8083。</p></li><li><p>在<code>resource</code>目录下的<code>application.properties</code>中配置<code>spring.profiles.active</code>属性选择性激活<code>Porfile</code>文件设置，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定要激活的profile多环境配置文件</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，在全局配置文件<code>application.properties</code>中指定激活了开发环境的配置文件。</p></li><li><p>查看效果，直接启动项目，在控制台查看输出结果即可。如果想用<code>Profile</code>文件激活其他环境，可以在全局配置文件<code>application.properties</code>中设置对应的配置文件，重启项目即可。</p></li></ol><h4 id="使用-Profile注解进行多环境配置"><a href="#使用-Profile注解进行多环境配置" class="headerlink" title="使用@Profile注解进行多环境配置"></a>使用<code>@Profile</code>注解进行多环境配置</h4><p>​    除了使用<code>Profile</code>文件进行多环境配置外，还可以使用<code>@Profile</code>注解进行多环境配置。<code>@Profile</code>注解主要作用于类，并通过<code>value</code>属性指定配置环境（等同于<code>Profile</code>文件名称中的<code>profile</code>值）。使用<code>@Profile</code>注解配置的环境，同样需要在全局配置文件中激活。</p><p>​    下面用一个案例，步骤如下：</p><ol><li><p>在<code>com.learn.config</code>包下，创建一个用于配置数据库的接口文件<code>DBConnector</code>，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBConnector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.learn.config</code>包下，创建三个实现了<code>DBConnector</code>接口的类<code>DevDBConnector</code>、<code>TestDBConnector</code>和<code>ProdDBConnector</code>并重写<code>configure()</code>方法，分别模拟连接配置不同的数据库环境，具体如下：</p><ul><li><code>DBConnector.java</code>文件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDBConnector</span> <span class="keyword">implements</span> <span class="title">DBConnector</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库配置环境dev&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>TestDBConnector.java</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBConnector</span> <span class="keyword">implements</span> <span class="title">DBConnector</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库配置环境test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ProdDBConnector.java</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProdDBConnector</span> <span class="keyword">implements</span> <span class="title">DBConnector</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库配置环境prod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面的三个类都使用了<code>@Configuration</code>和<code>@Profile</code>注解，其中，<code>@Configuration</code>注解将实现类声明为配置类，可以保证<code>SpringBoot</code>自动扫描并识别；<code>@Profile</code>注解用于进行多环境配置，并通过属性表示配置环境。</p></li></ul></li><li><p>在全局配置文件<code>application.properties</code>中设置<code>spring.profiles.active</code>属性激活使用<code>@Profile</code>注解构建的多环境配置。</p></li><li><p>为了测试<code>@Profile</code>注解多环境配置的效果，在<code>com.learn.controller</code>包下创建一个表示数据库连接配置的<code>DBController</code>类进行测试，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kanghua.config.DBConnector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DBConnector dbConnector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/showDB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dbConnector.configure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    文件中<code>@Autowired</code>注解用于注入<code>DBConnector</code>，<code>@GetMapping(&quot;/showDB&quot;)</code>注解用于映射<code>GET</code>请求，这里用来映射路径为<code>&quot;/showDB&quot;</code>的请求。</p><p>​    最后查看运行项目，查看控制台输出效果。</p><p>​    无论使用<code>Profile</code>文件还是<code>@Profile</code>注解类都可以进行多环境配置，而且相互之间不会干扰。</p></li></ol><h3 id="随机值设置以及参数间引用"><a href="#随机值设置以及参数间引用" class="headerlink" title="随机值设置以及参数间引用"></a>随机值设置以及参数间引用</h3><p>​    <code>SpringBoot</code>配置文件中设置属性时，除了可以像前面示例中显示的配置属性之外，还可以使用随机值和参数间引用对属性值进行设置。下面是配置文件中两种属性值的设置方法。</p><h4 id="随机值设置"><a href="#随机值设置" class="headerlink" title="随机值设置"></a>随机值设置</h4><p>​    在<code>SpringBoot</code>配置文件中，随机值设置使用到了<code>SpringBoot</code>内嵌的<code>RandomValuePropertySource</code>类，对一些隐秘属性值或者测试用例属性值进行随机值注入。</p><p>​    随机只设置的语法格式为<code>￥&#123;random.xx&#125;</code>，<code>xx</code>表示需要指定生成的随机数类型和范围，它可以生成随机的整数，、通用唯一识别码（<code>UUID</code>）或字符串，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">my.string</span>=<span class="string">$&#123;random.value&#125;// 配置随机字符串</span></span><br><span class="line"><span class="meta">my.number</span>=<span class="string">$&#123;random.int&#125;// 配置随机的整数</span></span><br><span class="line"><span class="meta">my.bignumber</span>=<span class="string">$&#123;random.long&#125;// 配置随机long类型数</span></span><br><span class="line"><span class="meta">my.uuid</span>=<span class="string">$&#123;random.uuid&#125;// 配置随机UUID类型数</span></span><br><span class="line"><span class="meta">my.number.less.than.ten</span>=<span class="string">$&#123;random.int(10)&#125;// 配置小于10的随机整数</span></span><br><span class="line"><span class="meta">my.number.in.range</span>=<span class="string">$&#123;random.int[1024,65536]&#125;// 配置范围在[1024,65536]之间的随机整数</span></span><br></pre></td></tr></table></figure><p>​    上面代码中，使用<code>RandomValuePropertySource</code>类中<code>random</code>提供的随机数类型，分别展示了不同类型随机值的设置示例。</p><h4 id="参数间引用"><a href="#参数间引用" class="headerlink" title="参数间引用"></a>参数间引用</h4><p>​    在<code>SpringBoot</code>配置文件中，配置文件的属性值还可以进行参数间的引用，也就是说，先前定义的属性可以被引用，并且配置文件可以解析引用的属性值。使用参数间引用的好处就是在多个具有相互关联的配置属性中，只需要对其中一处属性预先配置，其他地方都可以引用，省去了后续多处修改的麻烦。</p><p>​    参数间引用的语法格式为<code>￥&#123;xx&#125;</code>，<code>xx</code>表示先前在配置文件中已经配置过的属性名，代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="meta">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application</span></span><br></pre></td></tr></table></figure><p>​    在上面参数间引用设置示例中，先设置了<code>&quot;app.name=MyApp&quot;</code>，将<code>app.name</code>属性的属性值设置为了<code>MyApp</code>；接着，在<code>app.description</code>属性配置中，使用<code>￥&#123;app.name&#125;</code>对前一个属性值进行了引用。</p><p>​    具体步骤如下：</p><ol><li><p>在全局配置文件<code>application.properties</code>中分别通过随机数和参数间引用的方式添加两个测试属性，具体如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机值设置以及参数间引用配置</span></span><br><span class="line"><span class="meta">tom.age</span>=<span class="string">$&#123;random.int[10,20]&#125;</span></span><br><span class="line"><span class="meta">tom.description</span>=<span class="string">Tom的年龄可能是$&#123;tom.age&#125;</span></span><br></pre></td></tr></table></figure><p>​    上面的<code>application.properties</code>配置文件中，先试用了随机值设置了<code>tom.age</code>属性的属性值，该属性值设置在了<code>[10,20]</code>之间，随后使用参数间引用配置了<code>tom.description</code>属性。</p></li><li><p>在测试类中，定义<code>description</code>属性，并使用<code>@Value</code>注解注入<code>tom.description</code>属性。定义了一个测试方法<code>placeholderTest()</code>输出<code>description</code>属性值，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;tom.description&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeholderTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(description);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行测试方法，即可在控制台看到效果</p></li></ol><blockquote><p>如果有小伙伴发现，控制台中输出的中文是乱码，可以参考文章中的方法：<a href="https://www.cnblogs.com/diffx/p/9866717.html">https://www.cnblogs.com/diffx/p/9866717.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop打jar包</title>
      <link href="posts/58e1e24f.html"/>
      <url>posts/58e1e24f.html</url>
      
        <content type="html"><![CDATA[<p>​    默认情况下，在<code>Maven</code>中<code>Lifecycle</code>中有<code>package</code>这个选项，我们可以直接双击来进行<code>java</code>项目的打包。</p><h2 id="报错：Retrying-connect-to-server-0-0-0-0-0-0-0-0-8032"><a href="#报错：Retrying-connect-to-server-0-0-0-0-0-0-0-0-8032" class="headerlink" title="报错：Retrying connect to server: 0.0.0.0/0.0.0.0:8032"></a>报错：Retrying connect to server: 0.0.0.0/0.0.0.0:8032</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hua hadoop]# hadoop jar java_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar mapreduce.MyDriver</span><br><span class="line">2021-07-05 19:28:42,671 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032</span><br><span class="line">2021-07-05 19:28:43,924 INFO ipc.Client: Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)</span><br><span class="line">2021-07-05 19:28:44,925 INFO ipc.Client: Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)</span><br><span class="line">2021-07-05 19:28:45,925 INFO ipc.Client: Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)</span><br><span class="line">2021-07-05 19:28:46,926 INFO ipc.Client: Retrying connect to server: 0.0.0.0/0.0.0.0:8032. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start.yarn.sh</span><br></pre></td></tr></table></figure><h2 id="报错代码127"><a href="#报错代码127" class="headerlink" title="报错代码127"></a>报错代码127</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@hua hadoop]# hadoop jar java_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar mapreduce.MyDriver</span><br><span class="line">2021-07-05 19:35:59,384 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032</span><br><span class="line">2021-07-05 19:35:59,864 WARN mapreduce.JobResourceUploader: Hadoop command-line option parsing not performed. Implement the Tool interface and execute your application with ToolRunner to remedy this.</span><br><span class="line">2021-07-05 19:35:59,877 INFO mapreduce.JobResourceUploader: Disabling Erasure Coding for path: /tmp/hadoop-yarn/staging/root/.staging/job_1625484948353_0001</span><br><span class="line">2021-07-05 19:36:00,259 INFO input.FileInputFormat: Total input files to process : 1</span><br><span class="line">2021-07-05 19:36:00,698 INFO mapreduce.JobSubmitter: number of splits:1</span><br><span class="line">2021-07-05 19:36:00,817 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1625484948353_0001</span><br><span class="line">2021-07-05 19:36:00,818 INFO mapreduce.JobSubmitter: Executing with tokens: []</span><br><span class="line">2021-07-05 19:36:00,953 INFO conf.Configuration: resource-types.xml not found</span><br><span class="line">2021-07-05 19:36:00,953 INFO resource.ResourceUtils: Unable to find &#x27;resource-types.xml&#x27;.</span><br><span class="line">2021-07-05 19:36:01,147 INFO impl.YarnClientImpl: Submitted application application_1625484948353_0001</span><br><span class="line">2021-07-05 19:36:01,179 INFO mapreduce.Job: The url to track the job: http://hua:8088/proxy/application_1625484948353_0001/</span><br><span class="line">2021-07-05 19:36:01,180 INFO mapreduce.Job: Running job: job_1625484948353_0001</span><br><span class="line">2021-07-05 19:36:06,220 INFO mapreduce.Job: Job job_1625484948353_0001 running in uber mode : false</span><br><span class="line">2021-07-05 19:36:06,221 INFO mapreduce.Job:  map 0% reduce 0%</span><br><span class="line">2021-07-05 19:36:06,231 INFO mapreduce.Job: Job job_1625484948353_0001 failed with state FAILED due to: Application application_1625484948353_0001 failed 2 times due to AM Container for appattempt_1625484948353_0001_000002 exited with  exitCode: 127</span><br><span class="line">Failing this attempt.Diagnostics: [2021-07-05 19:36:05.216]Exception from container-launch.</span><br><span class="line">Container id: container_1625484948353_0001_02_000001</span><br><span class="line">Exit code: 127</span><br><span class="line"></span><br><span class="line">[2021-07-05 19:36:05.218]Container exited with a non-zero exit code 127. Error file: prelaunch.err.</span><br><span class="line">Last 4096 bytes of prelaunch.err :</span><br><span class="line">Last 4096 bytes of stderr :</span><br><span class="line">/bin/bash: /bin/java: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[2021-07-05 19:36:05.218]Container exited with a non-zero exit code 127. Error file: prelaunch.err.</span><br><span class="line">Last 4096 bytes of prelaunch.err :</span><br><span class="line">Last 4096 bytes of stderr :</span><br><span class="line">/bin/bash: /bin/java: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For more detailed output, check the application tracking page: http://hua:8088/cluster/app/application_1625484948353_0001 Then click on links to logs of each attempt.</span><br><span class="line">. Failing the application.</span><br><span class="line">2021-07-05 19:36:06,250 INFO mapreduce.Job: Counters: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方法：在<code>etc/hadoop/yarn-env.sh</code>中配置<code>java</code>变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export $JAVA_HOME=/usr/local/java/jdk1.8.0_281</span><br></pre></td></tr></table></figure><p><code>hadoop</code>报错<code>/bin/java: No such file or directory</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[2021-07-06 15:06:11.970]Container exited with a non-zero exit code 127. Error file: prelaunch.err.</span><br><span class="line">Last 4096 bytes of prelaunch.err :</span><br><span class="line">Last 4096 bytes of stderr :</span><br><span class="line">/bin/bash: /bin/java: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[2021-07-06 15:06:11.970]Container exited with a non-zero exit code 127. Error file: prelaunch.err.</span><br><span class="line">Last 4096 bytes of prelaunch.err :</span><br><span class="line">Last 4096 bytes of stderr :</span><br><span class="line">/bin/bash: /bin/java: No such file or directory</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/jdk1.8.0_112/bin/java /bin/java</span><br></pre></td></tr></table></figure><h2 id="hadoop报错：无法找到或加载主类-org-apache-hadoop-mapreduce-v2-app-MRAppMaster"><a href="#hadoop报错：无法找到或加载主类-org-apache-hadoop-mapreduce-v2-app-MRAppMaster" class="headerlink" title="hadoop报错：无法找到或加载主类 org.apache.hadoop.mapreduce.v2.app.MRAppMaster"></a><code>hadoop</code>报错：无法找到或加载主类 <code>org.apache.hadoop.mapreduce.v2.app.MRAppMaster</code></h2><p>解决：</p><p>运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop classpath</span><br></pre></td></tr></table></figure><p>将自己的命令行中的输出内容复制到<code>yarn-site.xml</code>中：</p><p><strong>注意：一定是自己的输出内容</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/etc/hadoop:/usr/local/hadoop/share/hadoop/common/lib/*:/usr/local/hadoop/share/hadoop/common/*:/usr/local/hadoop/share/hadoop/hdfs:/usr/local/hadoop/share/hadoop/hdfs/lib/*:/usr/local/hadoop/share/hadoop/hdfs/*:/usr/local/hadoop/share/hadoop/mapreduce/lib/*:/usr/local/hadoop/share/hadoop/mapreduce/*:/usr/local/hadoop/share/hadoop/yarn:/usr/local/hadoop/share/hadoop/yarn/lib/*:/usr/local/hadoop/share/hadoop/yarn/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客</title>
      <link href="posts/4f72e00a.html"/>
      <url>posts/4f72e00a.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 butterfly主题</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改配置文件<code>_config.yml</code>中的主题为<code>butterfly</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装一些必须的依赖</span></span><br><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>修改<code>_config.yml</code>中的<code>post_asset_folder</code>属性以及 <code>permalink</code> 属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否启动资源文件夹，开启后通过 hexo new :title.md 生成新文章会建立一个同名的文件夹</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 生成文章链接的格式，这是默认的格式；修改的规则也比较简单，标签前面要加英文冒号；（注意图片资源生成的格式必须是这个格式，否则会出现图片加载失败的情况，可见下方第6条生成的图片资源的引入格式）</span></span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装显示图片的插件</span></span><br><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7服务器被挖矿</title>
      <link href="posts/79477970.html"/>
      <url>posts/79477970.html</url>
      
        <content type="html"><![CDATA[<p>​    某天的一个早晨，打开电脑，忽然发现服务器<code>cpu</code>和内存基本跑满，我尝试着将所有进程都关掉，<code>cpu</code>由100变成了97，好家伙，我开始尝试着抓包，又问了度娘，结果度娘告诉我我的服务器很可能中了挖矿病毒…这是一个悲伤的故事…</p><p>​    由于本人太菜，找不到占用大量<code>cpu</code>的进程在哪里，所以只能先在阿里云的控制台上关掉了所有自定义端口，然后保存数据后，重装系统…</p><p>​    由于一开始配置了<code>hadoop</code>，懒得配置防火墙，就直接把防火墙关掉了，应该就是这样了…所以各位童鞋一定不要学我</p><p>​    一定一定不要嫌麻烦，一定要开启防火墙！！！</p><p>​    防火墙命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机启动</span></span><br><span class="line">systemctl enable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止并禁用开机启动</span></span><br><span class="line">sytemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加80端口（--permanent 为永久生效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看端口状态</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除开放的端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有开启的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝所有包</span></span><br><span class="line">firewall-cmd --panic-on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消拒绝状态</span></span><br><span class="line">firewall-cmd --panic-off</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>​    <strong>注意</strong>：<strong>每次都更改防火墙规则，都需要重新更新：<code>firewall-cmd --reload</code>，更新状态</strong></p>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop命令及测试</title>
      <link href="posts/7e1d5767.html"/>
      <url>posts/7e1d5767.html</url>
      
        <content type="html"><![CDATA[<h2 id="hadoop命令及测试"><a href="#hadoop命令及测试" class="headerlink" title="hadoop命令及测试"></a>hadoop命令及测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭hadoop</span></span><br><span class="line">stop-all.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动hdfs</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动yarn</span></span><br><span class="line">start-yarn.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式化namenode</span></span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>说明：<code>bin/hadoop fs 具体命令</code>和<code>bin/hdfs/ dfs 具体命令</code>这两个是完全相同的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看某个命令的参数(这里以rm命令为例)</span></span><br><span class="line">hadoop fs -help rm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建文件夹<span class="built_in">test</span></span></span><br><span class="line">hadoop fs -mkdir test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示目录信息</span></span><br><span class="line">hadoop fs -ls /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从本地剪切到到HDFS(注意：是剪切，不是复制)</span></span><br><span class="line">hadoop fs -moveFromLocal ./test.txt /hadoop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加一个文件到已经存在的文件末尾</span></span><br><span class="line">hadoop fs -appendToFile test1.txt /hadoop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示文件内容</span></span><br><span class="line">hadoop fs -cat /hadoop/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -chgrp 、-chmod、-chown命令与Linux文件系统中的用法一样，修改文件所属权限</span></span><br><span class="line">hadoop fs -chmod 666 /hadoop/test.txt</span><br><span class="line">hadoop fs -chown root:root /hadoop/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从本地文件系统中拷贝文件到HDFS路径去</span></span><br><span class="line">hadoop fs -copyFromLocal test.txt /hadoop/test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> put命令:等同于copyFromLocal</span></span><br><span class="line">hadoop fs -put test.txt /hadoop/test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从HDFS拷贝到本地</span></span><br><span class="line">hadoop fs -copyToLocal /hadoop/test.txt ./</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从HDFS下载文件到本地(等于copyToLocal)</span></span><br><span class="line">hadoop fs -get /hadoop/test.txt ./</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从HDFS的一个路径拷贝到HDFS的另一个路径</span></span><br><span class="line">hadoop fs -cp /hadoop/test/test1.txt /hadoop/test2.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在HDFS目录中移动文件</span></span><br><span class="line">hadoop fs -mv /hadoop/test.txt /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并下载多个文件,比如HDFS的目录 /user/<span class="built_in">test</span>下有多个文件:log.1, log.2,log.3,...</span></span><br><span class="line">hadoop fs -getmerge /user/test/* ./log.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示一个文件的末尾</span></span><br><span class="line">hadoop fs -tail /hadoop/test/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除文件或者文件夹</span></span><br><span class="line">hadoop fs -rm /hadoop/test/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除空目录</span></span><br><span class="line">hadoop fs -rmdir /test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计文件夹的大小信息(第一列标示该目录下总文件大小,第二列标示该目录下所有文件在集群上的总存储大小和你的副本数相关,第二列内容=文件大小*副本数)</span></span><br><span class="line">hadoop fs -du -s -h /hadoop/test</span><br><span class="line">62  62  /hadoop/test</span><br><span class="line"></span><br><span class="line">hadoop fs -du -h /hadoop/test</span><br><span class="line">62  62  /hadoop/test/hadoop_test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置HDFS中文件的副本数量(注意:这里设置的副本数量只是记录在NameNode的元数据中的，是否真的会有这么多副本，还得看DataNode的数量，比如我只有3台Data)</span></span><br><span class="line">hadoop fs -setrep 10 /hadoop/test/test.txt</span><br></pre></td></tr></table></figure><p>​    <code>hadoop</code>文件系统中文件默认放置位置：<code>/usr/local/hadoop/hdfs/data/current/BP-2106138772-172.22.43.97-1620789083115/current/finalized/subdir0/subdir0</code></p><h2 id="ide远程访问hadoop"><a href="#ide远程访问hadoop" class="headerlink" title="ide远程访问hadoop"></a>ide远程访问hadoop</h2><blockquote><p>环境：Centos7.6，已经部署好了hadoop3.1.4</p></blockquote><p>注意：</p><ol><li>服务器上的hadoop的环境变量一定要先配置好，确保hdfs命令可以使用！</li><li>配置好本地的hadoop环境变量，不需要配置其中的文件，不需要启动，解压缩以后，只配置环境变量就可以了(经过本人的多次尝试，发现需要特定的<code>bin</code>文件夹，所以就找了一份，因为网上的不好找，如有需要的请私聊我！)</li></ol><p>在ide中创建一个空的工程，在配置文件中添加一下的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client-minicluster<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在main中创建一个类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSFileIfExist</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BasicConfigurator.configure();</span><br><span class="line">            String fileName = <span class="string">&quot;/home/test.txt&quot;</span>;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://localhost:9000&quot;</span>);</span><br><span class="line">            conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, <span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="keyword">if</span>(fs.exists(<span class="keyword">new</span> Path(fileName)))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>/home/test.txt</code>是服务器上的路径，可以随意修改，localhost改成自己的服务器的ip地址即可</p><p>这样，一个简单的hadoop查询功能便做好了</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop遇到的问题</title>
      <link href="posts/39e09ce8.html"/>
      <url>posts/39e09ce8.html</url>
      
        <content type="html"><![CDATA[<h2 id="阿里云服务器hadoop忽然占用大量cpu和内存"><a href="#阿里云服务器hadoop忽然占用大量cpu和内存" class="headerlink" title="阿里云服务器hadoop忽然占用大量cpu和内存"></a>阿里云服务器hadoop忽然占用大量cpu和内存</h2><p>​    今天登录服务器看了一眼，好家伙，<code>cpu</code>和内存都跑满了，我只开了<code>hadoop</code>，但是我关掉以后，还是占用了大量的资源，重启以后恢复正常。</p><p>​    重启以后，发现<code>ssh</code>无法本地登录了，部署过<code>hadoop</code>的应该都知道，<code>ssh</code>无法连接本地，<code>hadoop</code>就启动不了</p><h3 id="ssh报错："><a href="#ssh报错：" class="headerlink" title="ssh报错："></a><code>ssh</code>报错：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No route to host</span><br></pre></td></tr></table></figure><p>​    我是用<code>finalshell</code>连接的服务器，当前窗口没有关闭，然而当我想再次打开一个窗口时，我发现我连接不上了，幸亏当前窗口没关闭。</p><p>​    网上说防火墙没有关，我删除了防火墙规则，无效</p><p>​    卸载了<code>ssh</code>以后，重新安装，无效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看ssh相关服务和安装情况</span></span><br><span class="line">rpm -qa openssh*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">yum remove openssh*</span><br></pre></td></tr></table></figure><p>​    检查后发现<code>ssh</code>没有安装客户端，用下面命令安装<code>ssh</code>客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssh-clients</span><br></pre></td></tr></table></figure><p>​    查看<code>ssh</code>进程发现<code>ssh</code>没有开启服务，启动<code>ssh</code>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line">systemctl status sshd.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启服务</span></span><br><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure><h3 id="authorized-keys报错权限不够"><a href="#authorized-keys报错权限不够" class="headerlink" title="authorized_keys报错权限不够"></a><code>authorized_keys</code>报错权限不够</h3><p>​    再次检查<code>/root/.ssh</code>文件夹，发现无法对<code>authorized_keys</code>进行操作，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: authorized_keys: 权限不够</span><br></pre></td></tr></table></figure><p>​    原因是<code>authorized_keys</code>这个文件被锁住，需要对此文件解锁，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -i authorized_keys</span><br></pre></td></tr></table></figure><p>​    解锁完以后，如果还是无法本地登录，直接删掉这个文件，然后用下面这条命令，生成一个新的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>​    生成新的文件以后，还是无法用<code>ssh</code>本地登录的，这个是正常的，原因就是没有给这个文件设置权限，新生成的<code>authorized_keys</code>文件默认权限是777，只要检测到777，就会默认不安全，所以不让连接，我们可以用下面的命令来重新设置访问这个文件的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ~</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure><p>​    成功！</p><p>​    所以至于为什么忽然占用了大量的<code>cpu</code>和内存，我觉得可能还是<code>ssh</code>的问题，因为我重新配置好<code>ssh</code>以后，就没有这个问题了。当然问题可能不止这一个，这个只是我目前遇到的问题，欢迎大家留言谈论~</p><h2 id="报错：hadoop中datanode无法启动"><a href="#报错：hadoop中datanode无法启动" class="headerlink" title="报错：hadoop中datanode无法启动"></a>报错：<code>hadoop</code>中<code>datanode</code>无法启动</h2><p>原因：由于多次对<code>namenode</code>进行格式化，导致<code>namenode</code>的<code>clusterID</code>变动，与<code>datanode</code>的<code>clusterID</code>不匹配所致。<br> 方法1：将我们自己创建的<code>/usr/local/hadoop/hdfs/name/current/VERSION</code>中的<code>clusterID</code>改成<code>/usr/local/hadoop/hdfs/data/current/VERSION</code>中的<code>clusterID</code>即可，或者将<code>data</code>中的<code>clusterID</code>，改成<code>name</code>中的也可以，只需要保持一致即可。<br> 方法2：直接删除<code>/usr/local/hadoop/hdfs/data</code>文件夹，再重新使用<code>./sbin/start-all.sh</code>命令启动。</p><p>搞定！</p><h2 id="报错：Permission-denied-user-access-WRITE-inode-quot-quot-root-supergroup-drwxr-x"><a href="#报错：Permission-denied-user-access-WRITE-inode-quot-quot-root-supergroup-drwxr-x" class="headerlink" title="报错：Permission denied: user=**, access=WRITE, inode=&quot;/&quot;:root:supergroup:drwxr-x"></a>报错：<code>Permission denied: user=**, access=WRITE, inode=&quot;/&quot;:root:supergroup:drwxr-x</code></h2><p><code>ide</code>访问<code>hadoop</code>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied: user&#x3D;hua, access&#x3D;WRITE, inode&#x3D;&quot;&#x2F;&quot;:root:supergroup:drwxr-x</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, username);</span><br></pre></td></tr></table></figure><h2 id="报错Connection-refused-no-further-information"><a href="#报错Connection-refused-no-further-information" class="headerlink" title="报错Connection refused: no further information"></a>报错<code>Connection refused: no further information</code></h2><p>解决方法：</p><p>​    将<code>/usr/local/hadoop/etc/hadoop/core-site.xml</code>中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义namenode地址 默认9000--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ip:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ip</code>改成私网<code>ip</code></p><p><strong>注：本人使用的是阿里云服务器，其他没有尝试</strong></p><h2 id="log4j日志报错："><a href="#log4j日志报错：" class="headerlink" title="log4j日志报错："></a>log4j日志报错：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (org.apache.htrace.core.Tracer). log4j:WARN Please initialize the log4j system properly.</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>在配置文件<code>log4j.properties</code>（文件名必须这个，放在<code>resources</code>目录） 全选粘贴如下代码：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><p><code>winutils.exe</code>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can not find winutils.exe</span><br></pre></td></tr></table></figure><p>在本地的<code>hadoop/bin</code>中加入这个<code>.exe</code>可执行程序</p><p>注意：需要重启<code>ide</code>，如果还是不行，请重启电脑</p><h2 id="每次访问datanode，变成私网ip"><a href="#每次访问datanode，变成私网ip" class="headerlink" title="每次访问datanode，变成私网ip"></a>每次访问<code>datanode</code>，变成私网<code>ip</code></h2><p>hosts文件配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::1     localhost       localhost.localdomain   localhost6      localhost6.localdomain6</span><br><span class="line">127.0.0.1       localhost       localhost.localdomain   localhost4      localhost4.localdomain4</span><br><span class="line"></span><br><span class="line">172.22.****    hua     hua</span><br></pre></td></tr></table></figure><p>添加一句配置，使<code>NameNode</code>返回<code>DataNode</code>的主机名而不是<code>IP</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><p>本地可以拿到了<code>DataNode</code>的主机名，要访问还需要配置本地<code>Hosts</code>映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">112.74.****    hua</span><br></pre></td></tr></table></figure><p>注意：<code>win10</code>下的<code>hosts</code>文件在<code>C:\Windows\System32\drivers\etc</code>路径下</p><h2 id="log4j中出现太多DEBUG日志"><a href="#log4j中出现太多DEBUG日志" class="headerlink" title="log4j中出现太多DEBUG日志"></a>log4j中出现太多DEBUG日志</h2><p>​    将<code>log4j.properties</code>中的第一行代码：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">WARN, stdout</span></span><br></pre></td></tr></table></figure><p>这样输出的日志就只有WARN级别及以上的才会被输出</p><p>注：日志输出级别<code>[level]</code>共有5级，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FATAL 0</span><br><span class="line">ERROR 3</span><br><span class="line">WARN 4</span><br><span class="line">INFO 6</span><br><span class="line">DEBUG 7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop单机部署</title>
      <link href="posts/91054617.html"/>
      <url>posts/91054617.html</url>
      
        <content type="html"><![CDATA[<h2 id="部署hadoop3-1-4"><a href="#部署hadoop3-1-4" class="headerlink" title="部署hadoop3.1.4"></a>部署<code>hadoop3.1.4</code></h2><blockquote><p>说明：<code>hadoop</code>单机部署与分布式部署基本一样，但是需要注意的是，<code>hadoop2</code>与<code>hadoop3</code>差距较大，这里部署的是<code>hadoop3.1.4</code></p><p>环境：阿里云服务器<code>Centos7.6</code>，<code>jdk1.8.0_281</code></p></blockquote><p>首先创建几个目录，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/hadoop/data</span><br><span class="line">mkdir /usr/local/hadoop/hdfs/name</span><br><span class="line">mkdir /usr/local/hadoop/hdfs/data</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>以下文件均在<code>/usr/local/hadoop/etc/hadoop</code>下</p><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a><code>core-site.xml</code></h4><p>​    添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义namenode地址 默认9000--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9003<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- 注意：hadoop1要改成自己的主机号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--修改用于hadoop存储数据的默认位置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml "></a><code>hdfs-site.xml </code></h4><p>添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml "></a><code>mapred-site.xml </code></h4><p>添加配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a><code>yarn-site.xml</code></h4><p>添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">问题出在hadoop文件夹下/etc/hadoop/目录下的配置文件：yarn-site.xml</span><br><span class="line"></span><br><span class="line">修改yarn-site.xml文件，将其<span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>中的配置修改为：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span>   <span class="comment">&lt;!--填写自定义的主机名/ip--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yarn-env-sh"><a href="#yarn-env-sh" class="headerlink" title="yarn-env.sh"></a><code>yarn-env.sh</code></h4><p>添加如下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="variable">$JAVA_HOME</span>=/usr/<span class="built_in">local</span>/java/jdk1.8.0_281</span><br></pre></td></tr></table></figure><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a><code>hadoop-env.sh</code></h4><p>添加如下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_281</span><br><span class="line">HADOOP_SHELL_EXECNAME=root</span><br></pre></td></tr></table></figure><h4 id="hadoop-bin-hdfs"><a href="#hadoop-bin-hdfs" class="headerlink" title="hadoop/bin/hdfs"></a><code>hadoop/bin/hdfs</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把HADOOP_SHELL_EXECNAME&#x3D;&quot;hdfs&quot;修改为HADOOP_SHELL_EXECNAME&#x3D;&quot;root&quot;即可</span><br></pre></td></tr></table></figure><h4 id="sh文件"><a href="#sh文件" class="headerlink" title=".sh文件"></a><code>.sh</code>文件</h4><p>为防止启动失败，需修改<code>start-dfs.sh</code>、<code>start-yarn.sh</code>、<code>stop-dfs.sh</code>、<code>stop-yarn.sh</code>，这四个文件均在<code>/usr/local/hadoop/sbin/</code>中</p><p>修改<code>start-dfs.sh</code>、<code>stop-dfs.sh</code>，在文件头添加如下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_DATANODE_SECURE_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure><p>修改<code>start-yarn.sh</code>、<code>stop-yarn.sh</code>，在文件头添加如下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><h3 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h3><p>在<code>~/.bashrc</code>中追加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop/hadoop-3.1.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><p>刷新<code>~/.bashrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="格式化namenode，并启动hadoop："><a href="#格式化namenode，并启动hadoop：" class="headerlink" title="格式化namenode，并启动hadoop："></a>格式化<code>namenode</code>，并启动<code>hadoop</code>：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式化namenode</span></span><br><span class="line">./bin/hadoop namenode -format</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动hdfs和yarn</span></span><br><span class="line">./sbin/start-all.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动hdfs</span></span><br><span class="line">./sbin/start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动yarn</span></span><br><span class="line">./sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><h3 id="关闭hadoop"><a href="#关闭hadoop" class="headerlink" title="关闭hadoop"></a>关闭<code>hadoop</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭hadoop</span></span><br><span class="line">./sbin/stop-all.sh</span><br></pre></td></tr></table></figure><h2 id="部署hadoop2-7-1"><a href="#部署hadoop2-7-1" class="headerlink" title="部署hadoop2.7.1"></a>部署<code>hadoop2.7.1</code></h2><blockquote><p>hadoop2.7.1的配置比3.1.4要简单一点，少配置了几个文件</p></blockquote><p>修改配置文件，路径为<code>/usr/local/hadoop/etc/hadoop</code></p><h3 id="下面是hdfs的配置"><a href="#下面是hdfs的配置" class="headerlink" title="下面是hdfs的配置"></a>下面是<code>hdfs</code>的配置</h3><h4 id="hadoop-env-sh-1"><a href="#hadoop-env-sh-1" class="headerlink" title="hadoop-env.sh"></a><code>hadoop-env.sh</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop-2.7.5/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>找到<code>JAVA_HOME</code>，并将其改成如下形式，根据自己<code>jdk</code>路径配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_281</span><br></pre></td></tr></table></figure><h4 id="core-site-xml-1"><a href="#core-site-xml-1" class="headerlink" title="core-site.xml "></a><code>core-site.xml </code></h4><p>5.2和5.3中配置文件里的文件路径和端口随自己习惯配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop-2.7.5/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/hadoop-2.7.5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.44.128:8888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="hdfs-site-xml-1"><a href="#hdfs-site-xml-1" class="headerlink" title="hdfs-site.xml"></a><code>hdfs-site.xml</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/hadoop-2.7.5/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/hadoop-2.7.5/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/hadoop-2.7.5/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下面是yarn的配置"><a href="#下面是yarn的配置" class="headerlink" title="下面是yarn的配置"></a>下面是<code>yarn</code>的配置</h3><h4 id="mapred-site-xml-1"><a href="#mapred-site-xml-1" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/hadoop-2.7.5/etc/hadoop/</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通知框架MR使用YARN --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yarn-site-xml-1"><a href="#yarn-site-xml-1" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- reducer取数据的方式是mapreduce_shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yarn-env-sh-1"><a href="#yarn-env-sh-1" class="headerlink" title="yarn-env.sh"></a>yarn-env.sh</h4><p>添加如下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="variable">$JAVA_HOME</span>=/usr/<span class="built_in">local</span>/java/jdk1.8.0_281</span><br></pre></td></tr></table></figure><h3 id="配置Hadoop环境变量-1"><a href="#配置Hadoop环境变量-1" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h3><p>在<code>~/.bashrc</code>中追加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop/hadoop-2.7.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><p>刷新<code>~/.bashrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="格式化namenode，并启动hadoop：-1"><a href="#格式化namenode，并启动hadoop：-1" class="headerlink" title="格式化namenode，并启动hadoop："></a>格式化<code>namenode</code>，并启动<code>hadoop</code>：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式化namenode</span></span><br><span class="line">./bin/hadoop namenode -format</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动hdfs和yarn</span></span><br><span class="line">./sbin/start-all.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动hdfs</span></span><br><span class="line">./sbin/start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只启动yarn</span></span><br><span class="line">./sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><h3 id="关闭hadoop-1"><a href="#关闭hadoop-1" class="headerlink" title="关闭hadoop"></a>关闭<code>hadoop</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭hadoop</span></span><br><span class="line">./sbin/stop-all.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架之复杂映射&amp;配置文件深入</title>
      <link href="posts/d12da41c.html"/>
      <url>posts/d12da41c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>补充<code>sql</code>注入：</p><p>​    简单的说，就是通过修改<code>sql</code>语句里的参数，来获取数据库里的一些数据。</p><p>​    我们从数据库里查询数据时，我们有时候需要向<code>sql</code>语句中传入参数，如果直接通过拼接字符串的方式来拼接<code>sql</code>语句的话，那么别人就有可能通过参数，来直接获取到数据库里的一些原来无权访问的数据。</p></blockquote><p>​        <code>sql</code>查询方式有好多种，但是个人感觉直接在程序里写死的情况是很少见的，这种数据我们可以直接放入<code>Redis</code>数据库中，不必放入<code>mysql</code>中。所以下面我就直接记录高级查询方法了。</p><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>需求：根据<code>id</code>和<code>username</code>查询<code>user</code>表</p><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>​        使用<code>#&#123;arg0&#125;-#&#123;argn&#125;</code>或者<code>#&#123;param1&#125;-#&#123;paramn&#125;</code>获取参数</p><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername1</span><span class="params">(Integer id, String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- select * from user where id = #&#123;arg0&#125; and username = #&#123;arg1&#125; --&gt;</span></span><br><span class="line">select * from user where id = #&#123;param1&#125; and username = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIdAndUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = userMapper.findByIdAndUsername1(<span class="number">1</span> , <span class="string">&quot;子慕&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>​        使用注解，引入@Param() 注解获取参数。</p><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername2</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer</span></span></span><br><span class="line"><span class="function"><span class="params">id,<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIdAndUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = userMapper.findByIdAndUsername2(<span class="number">1</span>, <span class="string">&quot;子慕&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三：（推荐）"><a href="#方式三：（推荐）" class="headerlink" title="方式三：（推荐）"></a>方式三：（推荐）</h4><p>使用<code>pojo</code>对象传递参数</p><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername3</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lagou.domain.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lagou.domain.User&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIdAndUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User param = <span class="keyword">new</span> User();</span><br><span class="line">        param.setId(<span class="number">1</span>);</span><br><span class="line">        param.setUsername(<span class="string">&quot;子慕&quot;</span>);</span><br><span class="line">        List&lt;User&gt; list = userMapper.findByIdAndUsername3(param);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="模糊查询："><a href="#模糊查询：" class="headerlink" title="模糊查询："></a>模糊查询：</h3><p>​        根据<code>username</code>模糊查询<code>user</code>表</p><h4 id="方式一：-1"><a href="#方式一：-1" class="headerlink" title="方式一："></a>方式一：</h4><p>​        <code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByUsername1</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">select * from user where username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByUsername1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.findByUsername1(<span class="string">&quot;%子%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="方式二：（不推荐使用，会出现sql注入）"><a href="#方式二：（不推荐使用，会出现sql注入）" class="headerlink" title="方式二：（不推荐使用，会出现sql注入）"></a>方式二：（不推荐使用，会出现sql注入）</h4><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByUsername2</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不推荐使用，因为会出现sql注入问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">select * from user where username like &#x27;$&#123;value&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByUsername2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.findByUsername2(<span class="string">&quot;%子%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="与-区别【笔试题】"><a href="#与-区别【笔试题】" class="headerlink" title="${} 与 #{} 区别【笔试题】"></a>${} 与 #{} 区别【笔试题】</h4><p>#{} :表示一个占位符号</p><ul><li><p>通过#{} 可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，#{}可以有效防止sql注入。</p></li><li><p>#{} 可以接收简单类型值或pojo属性值。</p></li><li><p>如果parameterType传输单个简单类型值， #{} 括号中名称随便写。</p></li></ul><p>${} :表示拼接sql串</p><ul><li>通过${} 可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换，会出现sql注入<br>问题。</li><li>${} 可以接收简单类型值或pojo属性值。</li><li>如果parameterType传输单个简单类型值， ${} 括号中只能是value。</li><li>补充：TextSqlNode.java 源码可以证明</li></ul><h3 id="Mybatis映射文件深入"><a href="#Mybatis映射文件深入" class="headerlink" title="Mybatis映射文件深入"></a>Mybatis映射文件深入</h3><h4 id="返回主键"><a href="#返回主键" class="headerlink" title="返回主键"></a>返回主键</h4><p>应用场景</p><p>​        我们很多时候有这种需求，向数据库插入一条记录后，希望能立即拿到这条记录在数据库中的主键值。</p><h4 id="useGeneratedKeys："><a href="#useGeneratedKeys：" class="headerlink" title="useGeneratedKeys："></a><code>useGeneratedKeys</code>：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">useGeneratedKeys=&quot;true&quot; 声明返回主键</span></span><br><span class="line"><span class="comment">keyProperty=&quot;id&quot; 把返回主键的值，封装到实体的id属性中</span></span><br><span class="line"><span class="comment">注意：只适用于主键自增的数据库，mysql和sqlserver支持，oracle不支持</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">INSERT INTO `user`(username,birthday,sex,address)</span><br><span class="line">values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：只适用于主键自增的数据库，<code>mysql</code>和<code>sqlserver</code>支持，<code>oracle</code>不行。</strong></p><h4 id="selectKey："><a href="#selectKey：" class="headerlink" title="selectKey："></a><code>selectKey</code>：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">selectKey 适用范围广，支持所有类型数据库</span></span><br><span class="line"><span class="comment">keyColumn=&quot;id&quot; 指定主键列名</span></span><br><span class="line"><span class="comment">keyProperty=&quot;id&quot; 指定主键封装到实体的id属性中</span></span><br><span class="line"><span class="comment">resultType=&quot;int&quot; 指定主键类型</span></span><br><span class="line"><span class="comment">order=&quot;AFTER&quot; 设置在sql语句执行前（后），执行此语句</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID();</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO `user`(username,birthday,sex,address)</span><br><span class="line">values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">&quot;子慕&quot;</span>);</span><br><span class="line">user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">userMapper.save(user);</span><br><span class="line">System.out.println(<span class="string">&quot;返回主键:&quot;</span> + user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态Sql："><a href="#动态Sql：" class="headerlink" title="动态Sql："></a>动态<code>Sql</code>：</h3><p>​    需求：根据<code>id</code>和<code>username</code>查询，但是不确定两个都有值。</p><h4 id="动态Sql之-lt-if-gt-标签"><a href="#动态Sql之-lt-if-gt-标签" class="headerlink" title="动态Sql之&lt;if&gt;标签"></a>动态<code>Sql</code>之<code>&lt;if&gt;</code>标签</h4><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsernameIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">where标签相当于 where 1=1，但是如果没有条件，就不会拼接where关键字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsernameIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">AND id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">AND username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if标签 where标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByIdAndUsernameIf</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User param = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">// param.setId(42);</span></span><br><span class="line"><span class="comment">// param.setUsername(&quot;王小二&quot;);</span></span><br><span class="line">List&lt;User&gt; list = userMapper.findByIdAndUsernameIf(param);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态Sql之-lt-set-gt-标签"><a href="#动态Sql之-lt-set-gt-标签" class="headerlink" title="动态Sql之&lt;set&gt;标签"></a>动态<code>Sql</code>之<code>&lt;set&gt;</code>标签</h4><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code>映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">set标签在更新的时候，自动加上set关键字，然后去掉最后一个条件的逗号</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">UPDATE `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">username = #&#123;username&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">birthday = #&#123;birthday&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex !=null&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address !=null&quot;</span>&gt;</span></span><br><span class="line">address = #&#123;address&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateIf</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">&quot;小二王&quot;</span>);</span><br><span class="line">user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">userMapper.updateIf(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态Sql之-lt-foreach-gt-标签"><a href="#动态Sql之-lt-foreach-gt-标签" class="headerlink" title="动态Sql之&lt;foreach&gt;标签"></a>动态<code>Sql</code>之<code>&lt;foreach&gt;</code>标签</h4><p>​        <strong><code>foreach</code>主要是用来做数据的循环遍历</strong></p><p>​        例如： <code>select * from user where id in (1,2,3)</code>在这样的语句中，传入的参数部分必须依靠<code>foreach</code>遍历才能实现。</p><p><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：</p><ul><li><code>collection</code>代表要遍历的集合元素</li><li><code>open</code>代表语句的开始部分</li><li><code>close</code>代表结束语句</li><li><code>item</code>代表遍历集合的每个元素，生成的变量名</li><li><code>sperator</code>代表分隔符</li></ul><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><p>​    <code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByList</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br></pre></td></tr></table></figure><p>​    <code>UserMaper.xml</code>映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果查询条件为普通类型 List集合，collection属性值为：collection 或者 list</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;collection&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foreach标签 list</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ids.add(<span class="number">46</span>);</span><br><span class="line">ids.add(<span class="number">48</span>);</span><br><span class="line">ids.add(<span class="number">51</span>);</span><br><span class="line">List&lt;User&gt; list = userMapper.findByList(ids);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p><code>UserMapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByArray</span><span class="params">(Integer[] ids)</span></span>;</span><br></pre></td></tr></table></figure><p><code>UserMaper.xml</code>映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果查询条件为普通类型 Array数组，collection属性值为：array</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByArray&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foreach标签 array</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByArray</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">Integer[] ids = &#123;<span class="number">46</span>, <span class="number">48</span>, <span class="number">51</span>&#125;;</span><br><span class="line">List&lt;User&gt; list = userMapper.findByArray(ids);</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sql片段："><a href="#Sql片段：" class="headerlink" title="Sql片段："></a><code>Sql</code>片段：</h5><p>应用场景：</p><p>​    映射文件中可将重复的<code>sql</code>提取出来，使用时用<code>include</code>引用即可，最终达到<code>sql</code>重用的目的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取的sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;collection&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByArray&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer[]&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><code>Mybatis</code>映射文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>：查询</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span>&gt;</span>：插入</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span>&gt;</span>：修改</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span>：删除</span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span>&gt;</span>：返回主键</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span>：where条件</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span>&gt;</span>：if判断</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span>：for循环</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span>：set设置</span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span>&gt;</span>：sql片段抽取</span><br></pre></td></tr></table></figure><h2 id="Mybatis核心配置文件深入"><a href="#Mybatis核心配置文件深入" class="headerlink" title="Mybatis核心配置文件深入"></a>Mybatis核心配置文件深入</h2><h3 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h3><p>简介：<code>MyBatis</code>可以使用第三方的插件来对功能进行扩展，分页助手<code>PageHelper</code>是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据。</p><p>​    开发步骤：</p><ol><li>导入通用<code>PageHelper</code>的坐标。</li><li>在<code>mybatis</code>核心配置文件中配置<code>PageHelper</code>插件</li><li>测试分页数据获取</li></ol><h4 id="导入通用PageHelper坐标"><a href="#导入通用PageHelper坐标" class="headerlink" title="导入通用PageHelper坐标"></a>导入通用<code>PageHelper</code>坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>jsqlparser</code>需要用<code>0.9.5</code>版本，如果是使用<code>0.9.1</code>会直接报错。</p><h4 id="在mybatis核心配置文件中配置PageHelper插件"><a href="#在mybatis核心配置文件中配置PageHelper插件" class="headerlink" title="在mybatis核心配置文件中配置PageHelper插件"></a>在<code>mybatis</code>核心配置文件中配置<code>PageHelper</code>插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    注意：<code>plugin</code>标签外应该有<code>plugins</code>标签，而且<code>plugins</code>标签应该写在<code>environments</code>标签前，不然会报如下错误！</p><p>​    报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The content of element type &quot;configuration&quot; must match &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;.</span><br></pre></td></tr></table></figure><h4 id="测试分页代码实现"><a href="#测试分页代码实现" class="headerlink" title="测试分页代码实现"></a>测试分页代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line">            SqlSession sqlSession = build.openSession();</span><br><span class="line"></span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">// 设置分页助手</span></span><br><span class="line">            PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            </span><br><span class="line">            List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">            all.forEach(System.out::println);</span><br><span class="line">            <span class="comment">// 获得分页相关的其他参数，并且传入参数all</span></span><br><span class="line">            PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(all);</span><br><span class="line">            System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">            System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">            System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">            System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">            System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">            System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="获得分页相关的其他参数"><a href="#获得分页相关的其他参数" class="headerlink" title="获得分页相关的其他参数"></a>获得分页相关的其他参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据，select为对象参数</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(select);</span><br><span class="line">System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure><h4 id="知识小结"><a href="#知识小结" class="headerlink" title="知识小结"></a>知识小结</h4><p><code>MyBatis</code>核心配置文件常用标签：</p><ol><li><code>properties</code>标签：该标签可以加载外部的<code>properties</code>文件</li><li><code>typeAliases</code>标签：设置类型别名</li><li><code>environments</code>标签：数据源环境配置标签</li><li><code>plugins</code>标签：配置<code>MyBatis</code>的插件</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb踩坑记</title>
      <link href="posts/d0300bea.html"/>
      <url>posts/d0300bea.html</url>
      
        <content type="html"><![CDATA[<h4 id="报错：java-错误-不支持发行版本-13"><a href="#报错：java-错误-不支持发行版本-13" class="headerlink" title="报错：java: 错误: 不支持发行版本 13"></a>报错：java: 错误: 不支持发行版本 13</h4><p>​    在<code>pom.xml</code>文件里加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h4 id="数据库查询结果格式错误"><a href="#数据库查询结果格式错误" class="headerlink" title="数据库查询结果格式错误"></a>数据库查询结果格式错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.huafire.entity.User@644baf4a</span><br><span class="line">com.huafire.entity.User@7526515b</span><br></pre></td></tr></table></figure><p>User 文件不写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="IDE-无法及时加载jsp问题"><a href="#IDE-无法及时加载jsp问题" class="headerlink" title="IDE 无法及时加载jsp问题"></a>IDE 无法及时加载<code>jsp</code>问题</h4><p>​    昨天好好的项目，但是今天<code>jsp</code> 文件却无法更新，在网上找到的解决方法，并没有起到效果。</p><p>​    所以，今天自己来搞一下。</p><p>​    网上的方法：<img src="/posts/d0300bea/o.png" style="zoom:80%;"></p><p>​    我自己试了一下，并没有成功。</p><p>​    下面说一下我自己的设置：</p><img src="/posts/d0300bea/p.png" style="zoom:80%;"><img src="/posts/d0300bea/q.png" style="zoom:80%;"><p>​    然后重启<code>tomcat</code>，解决！</p><h4 id="日期写入数据库错误"><a href="#日期写入数据库错误" class="headerlink" title="日期写入数据库错误"></a>日期写入数据库错误</h4><p>​        将日期写入数据库时，我一开始用的是Date类型，格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">2000</span></span><br></pre></td></tr></table></figure><p>​        但是在向数据库里写入数据时，我只试了六七个日期，但是只有<code>12/12/2000</code>这个日期写入以后没有错误，其他日期写入以后，都会变成其他日期，目前我没有找到规律，比如：写入<code>26/03/2001</code>，数据库里会变成<code>2002-02-01</code>。</p><p>​        问过度娘无果后，我就直接将这个数据的类型改成了字符串类型，搞定！</p><p>​    其实以上的错误实在不该，加上就没事了。</p><p>​    应该没什么其他的问题了，有什么问题欢迎大家留言讨论~</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop分布式部署</title>
      <link href="posts/1be7f29f.html"/>
      <url>posts/1be7f29f.html</url>
      
        <content type="html"><![CDATA[<h2 id="hadoop-分布式部署"><a href="#hadoop-分布式部署" class="headerlink" title="hadoop 分布式部署"></a>hadoop 分布式部署</h2><blockquote><p>环境：3 台服务器，配置如下：</p><p>​    4核8G一台（主节点）系统：Centos7.6</p><p>​    1核2G两台（副节点）系统：Centos7.4</p><p>jdk 版本：1.8.0_281</p><p>hadoop版本：3.1.4</p></blockquote><p>​    <code>hadoop</code>版本下载地址：<a href="https://archive.apache.org/dist/hadoop/common/">https://archive.apache.org/dist/hadoop/common/</a></p><p>​    <code>jdk</code>环境就不说了，下面开始配置<code>ssh</code></p><h3 id="hosts文件修改"><a href="#hosts文件修改" class="headerlink" title="hosts文件修改"></a>hosts文件修改</h3><p>​    将我们准备用来部署的服务器的地址放进去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">112.74.82.83 master</span><br><span class="line">182.92.113.245 slave1</span><br></pre></td></tr></table></figure><p>修改以后，测试一下是否可以<code>ping</code>通：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hua ~]# ping 112.74.82.83</span><br><span class="line">PING 112.74.82.83 (112.74.82.83) 56(84) bytes of data.</span><br><span class="line">64 bytes from 112.74.82.83: icmp_seq=1 ttl=56 time=47.3 ms</span><br><span class="line">64 bytes from 112.74.82.83: icmp_seq=2 ttl=56 time=47.3 ms</span><br><span class="line">64 bytes from 112.74.82.83: icmp_seq=3 ttl=56 time=47.2 ms</span><br><span class="line">^C</span><br><span class="line">--- 112.74.82.83 ping statistics ---</span><br><span class="line">4 packets transmitted, 3 received, 25% packet loss, time 3003ms</span><br><span class="line">rtt min/avg/max/mdev = 47.265/47.328/47.387/0.049 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    然后可以按照配置的顺序来重新命令三台服务器：</p><p>​    <strong>（注意：下面为命令，按照自己刚刚配置的文件名称来命令）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">hostnamectl set-hostname slave1</span><br><span class="line">hostnamectl set-hostname slave2</span><br></pre></td></tr></table></figure><h3 id="ssh免秘钥登录"><a href="#ssh免秘钥登录" class="headerlink" title="ssh免秘钥登录"></a>ssh免秘钥登录</h3><p>​    可能会有小伙伴想问了，<code>ssh</code>是什么，干什么用的</p><p>​    其实我一开始也挺懵，但是想想就明白了，我想要搭建的是<code>hadoop</code>集群，既然是集群，那么各个节点就需要互相<code>ping</code>通，既要安全，又要互相通讯，<code>ssh</code>就满足了我们的需要。</p><p>​    那么为什么要免密登录呢，<code>hadoop</code>运行时，各个主机需要频繁的通讯，我们不希望因为频繁的输入密码，而浪费了大量的时间。所以需要设置各个主机间的免密登录。</p><p>​    执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>​    执行后，需要几次回车，就会出现如下的代码：</p><p><code>slave1</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@hua ~]# ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:V6Czlhyaj9c5exDnIi7u9TIkims2y4U6ZTLRZDknwoE root@hua</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|o...      .      |</span><br><span class="line">|E.* .    . .     |</span><br><span class="line">| = +    +   .    |</span><br><span class="line">|. .    + =...    |</span><br><span class="line">| .    o S .+     |</span><br><span class="line">|o o.  .+ooo..    |</span><br><span class="line">| =.....++.+o     |</span><br><span class="line">|.o=.. .o+. o.    |</span><br><span class="line">|.+++ oo. oo.     |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <code>slave2</code>和<code>master</code>同理。</p><p>​    执行完以后，我们会在<code>/root/.ssh/</code>文件夹下看到以下几个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 .ssh]# ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><p>​    其中<code>id_rsa</code>是私钥<code>id_rsa.pub</code>是公钥，我们登录时，一般要用到公钥。</p><p>​    然后，我们需要将公钥加入到一个文件中，然后将这个文件发送到每台机器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在slave1和slave2下分别把id_rsa.pub发送到主机上</span></span><br><span class="line">scp id_rsa.pub root@master:~/.ssh/id_rsa.pub.slave1</span><br><span class="line">scp id_rsa.pub root@master:~/.ssh/id_rsa.pub.slave2</span><br></pre></td></tr></table></figure><p>​    <code>scp</code>命令本人运行时报错，所以本人没有使用这种方法，而是直接下载，并手动上传，覆盖掉了原来的文件夹。如有高人知道原因，请在评论区留言，感激不尽！</p><p>​    在<code>master</code>中的<code>/root/.ssh</code>下把<code>id_rsa.pub</code>、<code>id_rsa.pub.slave1</code>、<code>id_rsa.pub.slave2</code>追加到<code>authorized_keys</code>中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys </span><br><span class="line">cat id_rsa.pub.slave1 &gt;&gt; authorized_keys </span><br><span class="line">cat id_rsa.pub.slave2 &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>​    然后把<code>authorized_keys</code>传回到<code>slave1</code>和<code>slave2</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp authorized_keys root@slave1:~/.ssh </span><br><span class="line">scp authorized_keys root@slave2:~/.ssh</span><br></pre></td></tr></table></figure><p>​    最后修改文件权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ~</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure><p>​    这个时候，我们再用命令从<code>master</code>登录<code>slave1</code>，就不需要密码了。出现下面的命令，就说明我们的<code>ssh</code>配置好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ssh slave1</span><br><span class="line">Last login: Thu Apr  1 13:01:50 2021 from 123.7.182.188</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure><h3 id="安装并配置Hadoop"><a href="#安装并配置Hadoop" class="headerlink" title="安装并配置Hadoop"></a>安装并配置Hadoop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压缩：</span></span><br><span class="line">[root@master local]# tar -zxvf /home/tool/hadoop-2.7.1.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名为hadoop</span></span><br><span class="line">[root@master local]# mv hadoop-2.7.1/ hadoop</span><br></pre></td></tr></table></figure><p>​    新建几个文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir  /root/hadoop</span><br><span class="line">mkdir  /root/hadoop/tmp</span><br><span class="line">mkdir  /root/hadoop/var</span><br><span class="line">mkdir  /root/hadoop/dfs</span><br><span class="line">mkdir  /root/hadoop/dfs/name</span><br><span class="line">mkdir  /root/hadoop/dfs/data</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>​    我的配置文件在<code>/usr/local/hadoop/etc/hadoop</code>下</p><h5 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置<code>core-site.xml</code></h5><p>​    修改<code>core-site.xml</code>，在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>之间插入如下语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 namenode 的通信地址 默认 8020 端口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定 hadoop 运行时产生文件的存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置hadoop-env-sh"><a href="#配置hadoop-env-sh" class="headerlink" title="配置hadoop-env.sh"></a>配置<code>hadoop-env.sh</code></h5><p>​    修改<code>hadoop-env.sh</code>，将<code>export JAVA_HOME=$&#123;JAVA_HOME&#125;</code>中的<code>$&#123;JAVA_HOME&#125;</code>改成自己的<code>jdk</code>安装路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_281</span><br></pre></td></tr></table></figure><h5 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置<code>hdfs-site.xml</code></h5><p>​    修改<code>hdfs-site.xml</code>文件，在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>中加入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- namenode 上存储 hdfs 名字空间元数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- datanode 上数据块的物理存储位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置 hdfs 副本数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置<code>mapred-site.xml</code></h5><p>​    修改<code>mapred-site.xml</code>，并在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定yarn运行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="配置workers文件"><a href="#配置workers文件" class="headerlink" title="配置workers文件"></a>配置<code>workers</code>文件</h5><p>​    修改<code>workers</code>文件，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><h5 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置<code>yarn-site.xml</code></h5><p>​    修改<code>yarn-site.xml</code>文件，在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>中加入配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- reducer取数据的方式是mapreduce_shuffle --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置start-dfs-sh和stop-dfs-sh"><a href="#配置start-dfs-sh和stop-dfs-sh" class="headerlink" title="配置start-dfs.sh和stop-dfs.sh"></a>配置<code>start-dfs.sh</code>和<code>stop-dfs.sh</code></h5><p>​    这两个文件在 <code>/usr/local/hadoop/sbin/</code> 中，分别在<code>start-dfs.sh</code>和<code>stop-dfs.sh</code>文件的最前面，添加如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_DATANODE_SECURE_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure><h5 id="配置start-yarn-sh-和-stop-yarn-sh"><a href="#配置start-yarn-sh-和-stop-yarn-sh" class="headerlink" title="配置start-yarn.sh 和 stop-yarn.sh"></a>配置<code>start-yarn.sh</code> 和 <code>stop-yarn.sh</code></h5><p>这两个文件在 <code>/usr/local/hadoop/sbin/</code> 中，分别在<code>start-yarn.sh</code>和<code>stop-yarn.sh</code>文件的最前面，添加如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><h3 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h3><p>在 <code>~/.bashrc</code> 中追加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop/hadoop-3.1.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><p>刷新<code>~/.bashrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><p>​    先在<code>namenode</code>上进行初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# ./bin/hadoop namenode -format</span><br></pre></td></tr></table></figure><p>​    启动<code>hadoop</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# ./sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>​    输入两次 yes 后，即可成功。</p><p>​    关闭<code>hadoop</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# ./sbin/stop-all.sh</span><br></pre></td></tr></table></figure><h3 id="踩过的坑："><a href="#踩过的坑：" class="headerlink" title="踩过的坑："></a>踩过的坑：</h3><h4 id="master节点中的namenode无法启动"><a href="#master节点中的namenode无法启动" class="headerlink" title="master节点中的namenode无法启动"></a><code>master</code>节点中的<code>namenode</code>无法启动</h4><p>​    原因：因为我用的是三台阿里云的服务器，度娘说，好像只有阿里云的服务器才会这样，在<code>master</code>，<code>slave1</code>和<code>slave2</code>节点中<code>/etc/hosts</code>下，将<code>master</code>的<code>ip</code>改成私网<code>ip</code>，注意：只修改<code>master</code>的<code>ip</code>，<code>slave1</code>和<code>slave2</code>节点<code>ip</code>还是公网<code>ip</code>。</p><h4 id="namenode节点启动后，无法访问50070端口"><a href="#namenode节点启动后，无法访问50070端口" class="headerlink" title="namenode节点启动后，无法访问50070端口"></a><code>namenode</code>节点启动后，无法访问50070端口</h4><p>​    已经配置过了阿里云的安全组，但是还是无法访问，问过度娘以后，找到如下方法：</p><p>​    在<code>hdfs-site.xml</code>文件中，加入下面的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    重启<code>hadoop</code>，重新格式化<code>namenode</code>，成功访问50070端口。</p><p>​    还要注意一点哈，<code>hadoop</code>成功运行以后，是有两个端口的，一个是50070，另一个是8088，需要将<code>master</code>的这两个节点开放。</p><p>​    注意：还有一件小事，不要随便关掉防火墙，cpu占用一直是百分百，各种方法尝试后无效，无奈之下，只能重装系统。</p><blockquote><p>hadoop应该是我们的必备技能，之后还会扩展，持续更新哦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个JavaWeb项目</title>
      <link href="posts/69718bed.html"/>
      <url>posts/69718bed.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一个-JavaWeb-项目"><a href="#第一个-JavaWeb-项目" class="headerlink" title="第一个 JavaWeb 项目"></a>第一个 JavaWeb 项目</h2><blockquote><p>环境：</p><p>JDK 版本13.0.2，tomcat 版本8.5.64，maven 版本3.6.3</p><p>IDE 版本2020.3.2</p></blockquote><p>​    环境就不说了，tomcat 的环境变量有两个<code>bin</code>和<code>lib</code>。</p><p>​    由于本人是小白，所以从最简单的项目开始，均为小白操作，大佬勿喷。</p><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><p>​    首先我们先建立一个空的项目，如下：</p><img src="/posts/69718bed/a.png" style="zoom:80%;"><p>​    下面我们就需要写项目名了，也就是文件夹的名字，写好项目名以后，会跳出另一个页面，也就是基本配置。</p><p>​    如果我们已经有<code>Module</code>了，我们可以选择第二个<code>Import Module</code>，如果没有，我们可以选择<code>New Module</code>。</p><img src="/posts/69718bed/b.png" style="zoom:80%;"><p>​    我这里就选择了一个<code>New Module</code>，然后就开始配置<code>maven</code>环境了。选择<code>maven</code>，<code>next</code>即可。</p><img src="/posts/69718bed/c.png" style="zoom:80%;"><p>​    下面会让填写<code>New Module</code>的名字，填写一个 OK 了。（注意：不能跟上面的名字一样，因为上面会新建一个文件夹，这里也会新建一个文件夹，文件夹不可重名。）点击<code>Final</code>就可以了。</p><p>​    出现下面这个页面就说明我们的<code>New Module</code>新建成功了。</p><img src="/posts/69718bed/d.png" style="zoom:80%;"><p>​    这时我们点击一下 OK 就好了。</p><p>​    到此，我们已经配置好<code>Module</code>了。下面就要开始对整个工程配置环境了</p><h3 id="配置工程环境"><a href="#配置工程环境" class="headerlink" title="配置工程环境"></a>配置工程环境</h3><p>​    我们进入以后，整个项目的目录如下：</p><img src="/posts/69718bed/e.png" style="zoom:80%;"><p>​    点击一下右上角的<code>Add Configuration</code>，然后就可以直接开始配置环境了。</p><img src="/posts/69718bed/g.png" style="zoom:80%;"><img src="/posts/69718bed/h.png" style="zoom:80%;"><img src="/posts/69718bed/i.png" style="zoom:80%;"><img src="/posts/69718bed/j.png" style="zoom:80%;"><img src="/posts/69718bed/k.png" style="zoom:80%;"><p>​    然后我们点击一下<code>OK</code>就可以了。此时 tomcat 的环境我们已经配置好了，页面如下：</p><img src="/posts/69718bed/l.png" style="zoom:80%;"><p>​    还有一个重点，我一开始写好以后，一直运行不成功，就问了一下度娘，配置如下图：</p><p>​    右键项目名</p><img src="/posts/69718bed/m.png" style="zoom:80%;"><img src="/posts/69718bed/n.png" style="zoom:80%;"><p>​    这样就没问题了。</p><p>​    默认各位大佬的<code>mysql</code>数据库已经配置好了。</p><p>​    sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_db`;</span><br><span class="line">USE `mybatis_db`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment,</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">`birthday` datetime <span class="keyword">default</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">`sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`address` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- insert....</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`username`,`birthday`,`sex`,`address`) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;子慕&#x27;</span>,<span class="string">&#x27;2020-11-11 00:00:00&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京海淀&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;应颠&#x27;</span>,<span class="string">&#x27;2020-12-12 00:00:00&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京海淀&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    下面就是建立包，建立<code>java</code>文件，配置文件怎么写，话不多说，直接上图：</p><img src="/posts/69718bed/z.png" style="zoom:80%;"><p>​    红色框里的都是新建的，蓝色框是运行后出现的，少什么新建什么。</p><p>​    直接放代码：</p><p>​    pom.xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    User 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huafire.entity;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    UserMapper 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huafire.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huafire.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    mybatisConfig.xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://local:3306/mybatis_db&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    UserMapper.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huafire.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.huafire.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    TestMybatis 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.huafire.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.huafire.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatisConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line">            SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">            UserMapper maper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            List&lt;User&gt; all = maper.findAll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    运行以后，会自动生成一个<code>index.jsp</code>，里面就是前端了。</p><p>​    踩过的坑会专门整理成一篇文章的哦~</p><p>​    传送门在这里哦—-&gt;<a href="https://likanghua.gitee.io/posts/d0300bea.html"><code>javaWeb踩坑记</code></a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos配置环境</title>
      <link href="posts/6bb8a1e9.html"/>
      <url>posts/6bb8a1e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装python3-7-0环境"><a href="#安装python3-7-0环境" class="headerlink" title="安装python3.7.0环境"></a>安装python3.7.0环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun &#x2F;]# tar -zxf Python-3.7.0.tgz</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# cd Python-3.7.0</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum -y install libffi-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc gcc-c++ openssl-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# .&#x2F;configure</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# make</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# make install</span><br></pre></td></tr></table></figure><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><blockquote><p>说明：这里安装的是Oracle JDK，但是本人在 Centos7.4 版本上和 Centos7.7 版本上，安装 OpenJDK 13 时，并未发现问题，如有问题，欢迎在下方评论处讨论。</p></blockquote><p>​    我安装的是 <code>OpenJDK 13</code> ，并将其直接放在了 <code>home</code> 文件夹下。</p><p>​    先找到已经安装的 <code>OpenJDK</code>，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure><p>​    将带有<code>OpenJDK</code>字样的都删除掉，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br></pre></td></tr></table></figure><p>​    下面开始安装：</p><p>​    解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹，并进入</span></span><br><span class="line">cd /usr/local/</span><br><span class="line">mkdir java</span><br><span class="line">cd java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将准备好的 JDK安装包解压到当前文件夹下</span></span><br><span class="line">tar -zxvf /home/jdk-8u161-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure><p>​    解压完之后， /usr/local/java ⽬录中会出现⼀个<code>jdk13.0.2</code>的文件夹.</p><p>​    配置<code>JDK</code>环境</p><p>​    编辑<code>/etc/profile</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>​    在⽂件尾部加⼊如下JDK 环境配置即可。（<strong>注意：根据自己的<code>JDK</code>的版本号配置</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java/jdk-13.0.2</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><p>​    配置好以后，刷新一下环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>​    输入下面的命令验证结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -verison</span><br><span class="line">javac</span><br></pre></td></tr></table></figure><p><img src="/posts/6bb8a1e9/a.png"></p><h2 id="Centos7-4安装mysql"><a href="#Centos7-4安装mysql" class="headerlink" title="Centos7.4安装mysql"></a>Centos7.4安装mysql</h2><blockquote><p>下面的文章参考某站博主<code>CodeSheep</code>大神写的开源文档，侵删！</p><p>文档在 Github 开源项目链接：<a href="https://github.com/hansonwang99/JavaCollection">https://github.com/hansonwang99/JavaCollection</a></p></blockquote><h3 id="卸载系统⾃带的MARIADB（如果有）"><a href="#卸载系统⾃带的MARIADB（如果有）" class="headerlink" title="卸载系统⾃带的MARIADB（如果有）"></a>卸载系统⾃带的MARIADB（如果有）</h3><p>​    如果系统之前⾃带<code>Mariadb</code>，可以先卸载之。</p><p>​    ⾸先查询已安装的<code>Mariadb</code>安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/b.jpg" style="zoom:80%;"><p>​    卸载命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mariadb-server-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-devel-5.5.56-2.el7.x86_64</span><br><span class="line">yum -y remove mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="解压Mysql安装包"><a href="#解压Mysql安装包" class="headerlink" title="解压Mysql安装包"></a>解压<code>Mysql</code>安装包</h3><p>​    将上⾯准备好的<code>MySQL</code>安装包解压到<code>/usr/local/</code>⽬录，并重命名为<code>mysql</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /root/mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class="line">mv mysql-5.7.30-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure><h3 id="创建Mysql用户和用户组"><a href="#创建Mysql用户和用户组" class="headerlink" title="创建Mysql用户和用户组"></a>创建<code>Mysql</code>用户和用户组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure><p>​    同时新建<code>/usr/local/mysql/data</code>⽬录，后续备⽤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/mysql/data</span><br></pre></td></tr></table></figure><h3 id="修改Mysql⽬录的归属⽤户"><a href="#修改Mysql⽬录的归属⽤户" class="headerlink" title="修改Mysql⽬录的归属⽤户"></a>修改<code>Mysql</code>⽬录的归属⽤户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure><h3 id="准备MYSQL的配置⽂件"><a href="#准备MYSQL的配置⽂件" class="headerlink" title="准备MYSQL的配置⽂件"></a>准备MYSQL的配置⽂件</h3><p>​    在<code>/etc</code>⽬录下新建<code>my.cnf</code>⽂件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/my.cnf</span><br></pre></td></tr></table></figure><p>写⼊如下简化配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">#设置3306端⼝</span><br><span class="line">port &#x3D; 3306</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line"># 设置mysql的安装⽬录</span><br><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line"># 设置mysql数据库的数据的存放⽬录</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"># 允许最⼤连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 服务端使⽤的字符集默认为8⽐特编码的latin1字符集</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使⽤的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">max_allowed_packet&#x3D;16M</span><br></pre></td></tr></table></figure><p>​    同时使⽤如下命令创建<code>/var/lib/mysql</code>⽬录，并修改权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/mysql</span><br><span class="line">chmod 777 /var/lib/mysql</span><br></pre></td></tr></table></figure><h3 id="正式开始安装Mysql"><a href="#正式开始安装Mysql" class="headerlink" title="正式开始安装Mysql"></a>正式开始安装<code>Mysql</code></h3><p>​    执⾏如下命令正式开始安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/c.jpg" style="zoom:80%;"><p>​    <strong>注意：记住上⾯打印出来的root 的密码，后⾯⾸次登陆需要使⽤</strong></p><h3 id="复制启动脚本到资源⽬录"><a href="#复制启动脚本到资源⽬录" class="headerlink" title="复制启动脚本到资源⽬录"></a>复制启动脚本到资源⽬录</h3><p>​    执⾏如下命令复制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# cp ./support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><p>​    并修改<code>/etc/init.d/mysqld</code>，找到并修改其<code>basedir</code>和<code>datadir</code>为实际对应⽬录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br></pre></td></tr></table></figure><p>​    ⾸先增加mysqld 服务控制脚本执⾏权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><p>​    同时将mysqld 服务加⼊到系统服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><p>​    最后检查mysqld 服务是否已经⽣效即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list mysqld</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/d.jpg" style="zoom:80%;"><p>​    这样就表明<code>mysqld</code>服务已经⽣效了，在2、3、4、5运⾏级别随系统启动⽽⾃动启动，以后可以直接使⽤<code>service</code>命令控制<code>mysql</code>的启停。</p><h3 id="启动Mysqld"><a href="#启动Mysqld" class="headerlink" title="启动Mysqld"></a>启动Mysqld</h3><p>​    直接执⾏：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/e.jpg" style="zoom:80%;"><h3 id="将Mysql-的bin⽬录加⼊PATH环境变量"><a href="#将Mysql-的bin⽬录加⼊PATH环境变量" class="headerlink" title="将Mysql 的bin⽬录加⼊PATH环境变量"></a>将<code>Mysql</code> 的<code>bin</code>⽬录加⼊<code>PATH</code>环境变量</h3><p>​    这样⽅便以后在任意⽬录上都可以使⽤<code>mysql</code>提供的命令。</p><p>​    编辑 <code>~/.bash_profile</code>⽂件，在⽂件末尾处追加如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/f.jpg" style="zoom:80%;"><p>​        最后执⾏如下命令使环境变量⽣效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="⾸次登陆Mysql"><a href="#⾸次登陆Mysql" class="headerlink" title="⾸次登陆Mysql"></a>⾸次登陆<code>Mysql</code></h3><p>​    以<code>root</code>账户登录<code>mysql</code>，使⽤上⽂安装完成提示的密码进⾏登⼊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/g.jpg" style="zoom:80%;"><h3 id="接下来修改ROOT账户密码"><a href="#接下来修改ROOT账户密码" class="headerlink" title="接下来修改ROOT账户密码"></a>接下来修改ROOT账户密码</h3><p>​    在<code>mysql</code>的命令⾏执⾏如下命令即可，密码可以换成你想⽤的密码即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user user() identified by <span class="string">&quot;111111&quot;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><img src="/posts/6bb8a1e9/h.jpg" style="zoom:80%;"><p>​    ⽐如这⾥将密码设置成简单的“111111”了。</p><h3 id="设置远程主机登录"><a href="#设置远程主机登录" class="headerlink" title="设置远程主机登录"></a>设置远程主机登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update user <span class="built_in">set</span> user.Host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user.User=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><p>​    最后利⽤<code>Navicat</code>等⼯具进⾏测试即可。</p><blockquote><p>​    个人想法，本人目前还在学习阶段，其实进入公司以后，应该都会有专门的<code>mysql</code>数据库，一般不会直接让在服务器里安装<code>mysql</code>数据库的，但是以后可能用不到，那是以后的事情了，技多不压身，好好学习，一起加油吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复同时使用hexo-asset-image和hexo-abbrlink时导致图片加载失败的问题</title>
      <link href="posts/81ea4a90.html"/>
      <url>posts/81ea4a90.html</url>
      
        <content type="html"><![CDATA[<h1 id="修复同时使用hexo-asset-image和hexo-abbrlink时导致图片加载失败的问题"><a href="#修复同时使用hexo-asset-image和hexo-abbrlink时导致图片加载失败的问题" class="headerlink" title="修复同时使用hexo-asset-image和hexo-abbrlink时导致图片加载失败的问题"></a>修复同时使用hexo-asset-image和hexo-abbrlink时导致图片加载失败的问题</h1><blockquote><p>转载自：<br>文章作者: <a href="mailto:793986752@qq.com">Valley</a><br>文章链接: <a href="http://example.com/posts/81ea4a90.html">http://example.com/posts/81ea4a90.html</a></p></blockquote><p>​    当<code>hexo-abbrlink</code> 与 <code>hexo-asset-image</code> 一起用时图片展示出现问题，因为所需要的相对路径为 <code>abbrlink/</code>，但是编写的是 <code>title/</code>，那么需要实现类似重定向的功能即可解决问题，添加此功能的 <code>hexo-asset-image</code> 插件已经有人发布在 <code>GitHub</code> 上了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">https://github.com/foreveryang321/hexo-asset-image</span><br></pre></td></tr></table></figure><p>​    网上有些方法是修改<code>hexo-asset-image</code>的源码来解决的，但是有些繁琐，直接使用别人造好的轮子多香啊。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>​    卸载掉原来的<code>hexo-asset-image</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">npm uninstall hexo-asset-image</span><br></pre></td></tr></table></figure><p>​    安装新的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">npm install https://github.com/foreveryang321/hexo-asset-image.git --save</span><br></pre></td></tr></table></figure><p>​    然后一键三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>​    必需确认<code>_config.yml</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>​    可以使用下面几种方式来引入图片<code>logo.jpg</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">![logo](logo.jpg)</span><br><span class="line">![logo](MacGesture2-Publish/logo.jpg)</span><br><span class="line">![logo](D:/MacGesture2-Publish/logo.jpg)</span><br><span class="line">&#123;% asset_img logo.jpg %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-asset-image </tag>
            
            <tag> hexo-abbrlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git报错</title>
      <link href="posts/f04a0382.html"/>
      <url>posts/f04a0382.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git-报错-nothing-to-commit-working-tree-clean"><a href="#Git-报错-nothing-to-commit-working-tree-clean" class="headerlink" title="Git 报错 nothing to commit, working tree clean"></a>Git 报错 nothing to commit, working tree clean</h2><p>​    就在前两天，在我重新提交在本地部署好的博客时，git 报错 nothing to commit, working tree clean，我确定 git add . 和 git commit 都是正确的，那么问题来了，我分明有改动，为什么说我没有改动呢？</p><p>​    我运行 git branch 命令，返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\Hexo&gt; git branch</span><br><span class="line">* (no branch, rebasing hexo)</span><br><span class="line">  hexo</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>​    同时切换分支时和提交结果时报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">E:\Hexo&gt; git checkout master</span><br><span class="line">  error: Your <span class="built_in">local</span> changes to the following files would be overwritten by checkout:</span><br><span class="line">        _config.yml</span><br><span class="line">        <span class="built_in">source</span>/_posts/***.md</span><br><span class="line">        <span class="built_in">source</span>/_posts/***.md</span><br><span class="line">  Please commit your changes or stash them before you switch branches.</span><br><span class="line">  Aborting</span><br><span class="line"> </span><br><span class="line"> E:\Hexo&gt; git commit -m 处理分支错误</span><br><span class="line">  [detached HEAD c0a7e36] 处理分支错误</span><br><span class="line">   18 files changed, 475 insertions(+)</span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256.md&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/1.jpg&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\ create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/11.jpg<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/12.jpg<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/13.jpg<span class="string">&quot;</span></span><br><span class="line"><span class="string">  347\275\256/14.jpg&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/15.jpg&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/2.jpg&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/3.jpg&quot;</span></span><br><span class="line">   create mode 100644 <span class="string">&quot;source/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\ create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/5.png<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/6.png<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/7.png<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/8.png<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 &quot;</span><span class="built_in">source</span>/_posts/Ubuntu\350\231\232\346\213\237\346\234\272\351\205\215\347\275\256/9.png<span class="string">&quot;</span></span><br><span class="line"><span class="string">   create mode 100644 source/_posts/Windows_Terminal.md</span></span><br><span class="line"><span class="string">   create mode 100644 source/_posts/Windows_Terminal/1.png</span></span><br><span class="line"><span class="string">  PS E:\Hexo&gt; git push</span></span><br><span class="line"><span class="string">  fatal: You are not currently on a branch.</span></span><br><span class="line"><span class="string">  state now, use</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    git push origin HEAD:&lt;name-of-remote-branch&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">E:\Hexo&gt; git push origin HEAD:master</span></span><br><span class="line"><span class="string">To https://gitee.com/likanghua/likanghua.git</span></span><br><span class="line"><span class="string"> ! [rejected]        HEAD -&gt; master (fetch first)</span></span><br><span class="line"><span class="string">hint: Updates were rejected because the remote contains work that you do</span></span><br><span class="line"><span class="string">hint: not have locally. This is usually caused by another repository pushing</span></span><br><span class="line"><span class="string">hint: to the same ref. You may want to first integrate the remote changes</span></span><br><span class="line"><span class="string">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span></span><br><span class="line"><span class="string">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span></span><br><span class="line"><span class="string">PS E:\Hexo&gt; git pull</span></span><br><span class="line"><span class="string">remote: Enumerating objects: 765, done.</span></span><br><span class="line"><span class="string">remote: Compressing objects: 100% (233/233), done.</span></span><br><span class="line"><span class="string">remote: Total 720 (delta 337), reused 592 (delta 256), pack-reused 0</span></span><br><span class="line"><span class="string">Receiving objects: 100% (720/720), 4.60 MiB | 545.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Resolving deltas: 100% (337/337), completed with 15 local objects.</span></span><br><span class="line"><span class="string">From https://gitee.com/likanghua/likanghua</span></span><br><span class="line"><span class="string">   be15239..c22922a  master     -&gt; origin/master</span></span><br><span class="line"><span class="string">You are not currently on a branch.</span></span><br><span class="line"><span class="string">Please specify which branch you want to merge with.</span></span><br><span class="line"><span class="string">See git-pull(1) for details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    git pull &lt;remote&gt; &lt;branch&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PS E:\Hexo&gt; git push origin HEAD:master</span></span><br><span class="line"><span class="string">To https://gitee.com/likanghua/likanghua.git</span></span><br><span class="line"><span class="string"> ! [rejected]        HEAD -&gt; master (non-fast-forward)</span></span><br><span class="line"><span class="string">error: failed to push some refs to &#x27;https://gitee.com/likanghua/likanghua.git&#x27;</span></span><br><span class="line"><span class="string">hint: Updates were rejected because a pushed branch tip is behind its remote</span></span><br><span class="line"><span class="string">hint: counterpart. Check out this branch and integrate the remote changes</span></span><br><span class="line"><span class="string">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span></span><br><span class="line"><span class="string">PS E:\Hexo&gt; git checkout master</span></span><br><span class="line"><span class="string">error: Your local changes to the following files would be overwritten by checkout:</span></span><br><span class="line"><span class="string">        _config.yml</span></span><br><span class="line"><span class="string">        source/_posts/Centos服务器配置.md</span></span><br><span class="line"><span class="string">        source/_posts/Git命令.md</span></span><br><span class="line"><span class="string">        source/_posts/Ubuntu虚拟机配置.md</span></span><br><span class="line"><span class="string">Please commit your changes or stash them before you switch branches.</span></span><br><span class="line"><span class="string">Aborting</span></span><br></pre></td></tr></table></figure><p>​    可能会有小伙伴说，可以试试强行推送，我试了试，还是推不上去，而且，个人不建议强推。</p><h2 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h2><p>​    先将代码从远程仓库里拉下来，然后跟自己修改后的对比，比较一下缺少哪一部分，再一点一点的补，切记，一定一定不要着急，慢慢补，只要修改不是特别特别的大，用不了半个小时就好了。</p><h2 id="git切换分支报错："><a href="#git切换分支报错：" class="headerlink" title="git切换分支报错："></a>git切换分支报错：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br></pre></td></tr></table></figure><p>强行切换会将一些文件删掉，注意保存文件！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -f hexo</span><br></pre></td></tr></table></figure><p><code>hexo</code>为我想切换的分支，切换完以后，再将文件重新复制，粘贴进去，再次推送，一键三连：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m 提交</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>搞定！！</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="posts/38943.html"/>
      <url>posts/38943.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>​    由于疫情，在家里上课…虽然有时候不方便，比如，我在三月底才拿到书…但是毕竟比在学校的事情少好多，闲暇时间</p><p>整理一下Java的笔记。</p><p>​    在刚刚开始的时候，老师建议用eclipse，并且上课用的也是eclipse，但是个人感觉还是idea用起来比较舒服，但是对于</p><p>小白来说，idea并不友好，我也是用了一个下午，才搞懂了idea，那我就简单说一下idea吧。</p><h2 id="idea篇"><a href="#idea篇" class="headerlink" title="idea篇"></a>idea篇</h2><p>​    在我下载好idea后，刚刚一打开，我电脑中的风扇抽筋似的，疯狂转了起来，打开任务管理器后发现idea占用CPU，90%之多（我的电脑是i5的处理器，16G内存，Win10系统）对于像我这种的小白来说，第一件事肯定是先关掉idea，问过度娘以后才知道，想解决问题，可以改一下软件的配置，找到安装idea的路径D:\program files\JetBrains\IntelliJ IDEA 2019.3.4\bin\idea.exe.vmoptions，用记事本打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-Xms2048m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line">-ea</span><br><span class="line">-XX:CICompilerCount&#x3D;2</span><br><span class="line">-Dsun.io.useCanonPrefixCache&#x3D;false</span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes&#x3D;&quot;&quot;</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Djdk.attach.allowAttachSelf&#x3D;true</span><br><span class="line">-Dkotlinx.coroutines.debug&#x3D;off</span><br><span class="line">-Djdk.module.illegalAccess.silent&#x3D;true</span><br></pre></td></tr></table></figure><p>​    将前两个数值改大，我的本来是200多，这个是内存，至于改多大，看个人电脑的配置，我的电脑内存比较大，就改的大了一点。</p><p>​    然后，当我打开idea以后，发现程序是没有办法运行的，原因是因为我安装的是jdk13.0，但是idea默认的是jdk1.8，这个在File\settings…里面，找到改一下就好了。</p><p>​    其他的基本就没有什么了，注意整理好包就好了。（因为我是初学，所以，写的程序都是独立的，不整理好包的话，会很乱）哦，对了，还有一点，就是建立包的时候，一开始我找不到新建包在哪里，右键并没有新建包，问过度娘之后，才知道，在我们新建一个文件夹以后，要想在里面建包，要右键，找到 Make Directory as… \Sources Root 点一下，我们再右键，在新建里就会出现包这个选项。</p><h2 id="Java基础语法篇"><a href="#Java基础语法篇" class="headerlink" title="Java基础语法篇"></a>Java基础语法篇</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>​    关于Java的基础语法的学习我就不多做介绍了，这些资源网上有好多，就大概写几个比较常用的好了</p><ol><li>if 判断语句中是逻辑判断</li><li>switch条件语句</li><li>for循环和 do…while循环</li><li>break、continue跳转语句</li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法：一段可以重复使用的代码。（一般分为有参方法和无参方法，有参方法需要返回值，无参的不用返回值）</p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>​        定义：函数名可以相同，但方法中的参数个数或类型不同，通过传入不同的参数，就可以确定调用哪个方法。</p><p>​        <strong>注意：方法的重载与返回值类型无关，它需要满足两个条件，一是方法名相同，二是参数个数或者参数类型不同。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//下面是针对求和方法的调用</span></span><br><span class="line">        <span class="keyword">int</span> sum1 = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> sum2 = add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">double</span> sum3 = add(<span class="number">1.2</span>, <span class="number">1.3</span>);</span><br><span class="line">        <span class="comment">//下面的代码是打印出来求和的结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sum1 = &quot;</span> + sum1);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum2 = &quot;</span> + sum2);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum3 = &quot;</span> + sum3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面的方法实现了两个整数相加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面的方法实现了三个整数相加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面的方法实现了两个小数相加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span> <span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>​    数组很重要！！！很重要！！！很重要！！！</p><p>​    定义：数组是指一组元素的集合，数组中的每个元素被称作元素</p><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>​    元素默认值</p><table><thead><tr><th align="center">数据类型</th><th align="center">默认初始化值</th></tr></thead><tbody><tr><td align="center">byte、short、int、long</td><td align="center">0</td></tr><tr><td align="center">float、double</td><td align="center">0.0</td></tr><tr><td align="center">char</td><td align="center">一个空字符，即‘\u000’</td></tr><tr><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">引用数据类型</td><td align="center">null，表示变量不引用任何对象</td></tr></tbody></table><p>​    给数组中的变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">x[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="使用for循环遍历数组"><a href="#使用for循环遍历数组" class="headerlink" title="使用for循环遍历数组"></a>使用for循环遍历数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)&#123;</span><br><span class="line">           System.out.println(x[i]);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>​    这个时候，程序会有一个警告，会建议我们，使用增强for循环来完成遍历数组。</p><p>​    增强for循环相比较for循环来说，更为简便，下面的就是增强for循环了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : x)&#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="数组最值"><a href="#数组最值" class="headerlink" title="数组最值"></a>数组最值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;     <span class="comment">// 定义一个数组</span></span><br><span class="line">    <span class="keyword">int</span> max = getMax (arr);     <span class="comment">// 调用有参方法getMax</span></span><br><span class="line">    System.out.println(<span class="string">&quot;max = &quot;</span>+max);       <span class="comment">// 打印最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span> <span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];       <span class="comment">// 定义变量max为最大值，且假设第一个是最大值</span></span><br><span class="line">    <span class="comment">// 下面通过一个for循环遍历数组中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>;x &lt; arr.length; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[x] &gt; max)&#123;      <span class="comment">// 比较arr[x]的值是否大于max</span></span><br><span class="line">            max = arr[x];       <span class="comment">// 条件成立，将arr[x]的值赋给max</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;<span class="comment">// 返回max</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><p>​    冒泡法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;冒泡排序前：&quot;</span>);</span><br><span class="line">        PrintArray(arr);        <span class="comment">//调用方法printArray</span></span><br><span class="line">        bubbleSort(arr);        <span class="comment">// 调用方法bubbleSort</span></span><br><span class="line">        System.out.print(<span class="string">&quot;冒泡排序后：&quot;</span>);</span><br><span class="line">        PrintArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义打印数组元素方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="meta">@NotNull</span> <span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使用增强for循环，遍历数组的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: arr)&#123;</span><br><span class="line">            System.out.print(i+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="meta">@NotNull</span> <span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义外层循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 定义内层循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>])&#123;<span class="comment">// 比较相邻元素</span></span><br><span class="line">                    <span class="comment">// 下面三行代码用于交换元素</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;论排序后：&quot;</span>);</span><br><span class="line">            PrintArray(arr);<span class="comment">//每轮比较完以后打印数组元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>​    多维数组的定义</p><p>​        <strong>3.5.1 第一种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>​    如图</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>xx[0] [0]</td><td>xx[0] [0]</td><td>xx[0] [2]</td><td>xx[0] [3]</td></tr><tr><td>xx[1] [0]</td><td>xx[1] [0]</td><td>xx[1] [1]</td><td>xx[1] [3]</td></tr><tr><td>xx[2] [0]</td><td>xx[2] [0]</td><td>xx[2] [1]</td><td>xx[2] [3]</td></tr></tbody></table><p>​        </p><p><strong>3.5.2 第二种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><p>​    如图</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>xx[0] [0]</td><td></td><td></td></tr><tr><td>xx[1] [0]</td><td>xx[1] [1]</td><td></td></tr><tr><td>xx[2] [0]</td><td>xx[2] [1]</td><td>xx[2] [2]</td></tr></tbody></table><p>​        </p><p><strong>3.5.3 第三种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>​    如图</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center"></td></tr></tbody></table><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>​        三大特性：封装性、继承性、多态性</p><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><h5 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h5><p>​        类是对象的抽象，用于描述一组对象的共同特征和行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;        <span class="comment">// 定义int型变量age</span></span><br><span class="line">    <span class="comment">// 定义speak()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好，我今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面程序中定义了一个类，其中Person是类名，age是成员变量，speak()是成员方法，方法里的变量被称为局部变量。在成员方法speak()中可以直接访问成员变量age。</p><h5 id="对象的创建与使用"><a href="#对象的创建与使用" class="headerlink" title="对象的创建与使用"></a>对象的创建与使用</h5><p>​        创建对象格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>​    例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();<span class="comment">// 创建对象p</span></span><br></pre></td></tr></table></figure><p>​    实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;        <span class="comment">// 定义int类型的变量age</span></span><br><span class="line">    <span class="comment">// 定义speak()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好，我今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();   <span class="comment">// 创建第一个Person对象，p1</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();   <span class="comment">// 创建第二个Person对象，p2</span></span><br><span class="line">        p1.age = <span class="number">18</span>;                <span class="comment">// 为age属性赋值</span></span><br><span class="line">        p1.speak();                 <span class="comment">//调用对象方法</span></span><br><span class="line">        p2.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>注意：上面程序中的p1和p2不能定义为null，如果定义为null，就会变成垃圾对象</strong></p><p>​        </p><h5 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h5><p>​    定义一个类中的多个属性，就是类的设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    String name;    <span class="comment">// 定义一个姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;        <span class="comment">// 定义一个年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方法中打印属性 name 和 age 的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大家好，我叫&quot;</span> + name + <span class="string">&quot;.我今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        </p><h5 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h5><p>​    类的封装是指在定义一个类的时候，将类中的属性私有化，即使用private关键字来修饰。私有属性只能在它所在的类中被访问，如果外界想要访问私有属性，需要提供一些使用public修饰的公有方法。</p><p>​    简单来说，我的理解就是，要想访问私有属性，就要写出来一个共有的方法，并且这个共有的方法里要有用到私有属性，然后再调用共有方法的同时，也就调用了私有属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.chapter03.example04;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类的封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 将name属性私有化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 将age属性私有化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是公有的 getXxx 和 setXxx 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String stuName)</span> </span>&#123;</span><br><span class="line">name = stuName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> stuAge)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 下面是对传入的参数进行检查</span></span><br><span class="line"><span class="keyword">if</span> (stuAge &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;对不起，您输入的年龄不合法...&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">age = stuAge; <span class="comment">// 对属性赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;大家好，我叫&quot;</span> + name + <span class="string">&quot;,我今年&quot;</span> + age + <span class="string">&quot;岁!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example04</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setAge(-<span class="number">30</span>);</span><br><span class="line">stu.setName(<span class="string">&quot;韩强&quot;</span>);</span><br><span class="line">stu.introduce();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>注意：一个Java文件里可以有多个类，但是只能有一个类被 public 修饰</strong></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="构造方法的定义"><a href="#构造方法的定义" class="headerlink" title="构造方法的定义"></a>构造方法的定义</h5><p>​    在一个类里，满足下面三点的方法被称为构造方法：</p><ol><li>方法名与类名相同。</li><li>在方法名的前面没有返回值的声明。</li><li>在方法中不能使用 return 语句返回一个值，但是可以单独写 return 语句来作为方法的结束。</li></ol><p>补充：应用 new 关键字调用构造方法，为新对象初始化</p><p>例（无参构造方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 下面是类的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参的构造方法被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();   <span class="comment">// 实例化 Person 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>注意：上面的代码中 Person p1 = new Person(); 不仅会实例化对象，还会调用构造方法Person()。</strong></p><p>例（有参构造方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 定义有参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义无参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今年我已经&quot;</span> + age + <span class="string">&quot;岁了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>);   <span class="comment">// 实例化 Person 对象,调用了有参的构造方法，并传入参数</span></span><br><span class="line">        p1.speak();<span class="comment">// 调用无参的构造方法speak</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>注意：Person p1 = new Person(20); 的功能有三个，1.实例化 Person 对象，2.调用了有参的构造方法，3.传入参数</strong></p><p>​        </p><h5 id="构造方法的重载（实现多态）"><a href="#构造方法的重载（实现多态）" class="headerlink" title="构造方法的重载（实现多态）"></a>构造方法的重载（实现多态）</h5><p>​    与普通的方法一样，构造方法也可以重载，在一个类中可以定义多个构造方法，只要每个构造方法的参数类型或者参数个数不同即可，在创建对象时，可以通过调用不同的构造方法来为不同的属性赋值。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 定义两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String con_name, <span class="keyword">int</span> con_age)</span></span>&#123;</span><br><span class="line">        name = con_name;</span><br><span class="line">        age = con_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String con_name)</span></span>&#123;</span><br><span class="line">        name = con_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 打印 name 和 age 的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今年&quot;</span> + name + <span class="string">&quot;已经&quot;</span> + age + <span class="string">&quot;岁了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 分别创建两个对象 ps1 和 ps2</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;韩强&quot;</span>);<span class="comment">// 调用的是第二个一个参数的构造方法</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;晓英&quot;</span>, <span class="number">20</span>);<span class="comment">// 调用的是第一个两个参数的构造方法</span></span><br><span class="line">        p1.speak();</span><br><span class="line">        p2.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>注意：在Java中的每个类都至少有一个构造方法，要是在一个类里没有定义构造方法，系统就会自动为这个类创建一个默认的构造方法，这个默认的构造方法没有参数，方法体中没有任何代码，即什么也不做。</strong></p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>​    为了使程序可读性好，且避免成员变量和局部变量产生冲突，Java中提供了 this 来指代当前对象，用于在方法中访问对象的其他成员。</p><p>​    this有三种常见的用法</p><p>​    1、通过this关键字可以明确地访问一个类的成员变量，解决与局部变量名称冲突问题。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;<span class="comment">// 定义成员变量age</span></span><br><span class="line">    <span class="comment">// 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;<span class="comment">// 定义局部变量age</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;<span class="comment">// this.age中的age是成员变量，后面的age是局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码的构造方法中，使用 this.age 访问的是成员变量，使用 age 则访问的是局部变量。</p><p>​    2、通过 this 关键字调用成员方法</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义成员方法 openMouth</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openMouth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openMouth();<span class="comment">// 调用成员方法openMouth</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中 this.openMouth(); 中的 this 可以省略，也就是说在上面的代码中，写成“ this.openMouth(); ” 和 “ openMouth(); ” 是一样的。</p><p>​    3、在其他构造方法中调用其他构造方法</p><p>​    构造方法是在实例化对象时被Java虚拟机自动调用，在程序中不能像调用其他的方法一样去调用构造方法，但是可以在一个构造方法中使用 “ this([参数1，参数2…]) ” 的形式来调用其他的构造方法。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参的构造方法被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();<span class="comment">// 调用无参的构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;有参的构造方法被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;itcast&quot;</span>);<span class="comment">// 实例化 Person 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的例子中，第二个构造方法中的 this(); 直接调用了第一个构造方法，而在实例化对象的时候，调用了有参的构造方法，所以这两个构造方法都被调用了。</p><p>​    <strong>注意：</strong></p><ol><li><strong>只能在构造方法中使用 this 调用其他的构造方法，不能在成员方法中使用。</strong></li><li><strong>在构造方法中，使用 this 调用构造方法的语句必须放到第一行，且只能出现一次。</strong></li><li><strong>不能在一个类里的两个构造方法中使用 this 互相调用。</strong></li></ol><p>注意 2  例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;小寒&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码会报错，因为 this(); 没有放到第一行。</p><p>注意 3  例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span> (<span class="string">&quot;小韩&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;无参的构造方法被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;有参的构造方法被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码也会报错，因为一个类的两个构造方法中，使用 this 互相调用，所以编译的时候会报错。</p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>​    为了解决对象会占用大量的内存空间，Java里引入了垃圾回收机制，可以自动回收，当然也可以手动回收。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义的finalize方法会在垃圾回收前调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象将被作为垃圾回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 下面是创建了两个Person对像</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 下面是将变量重置为null，让对象变成垃圾</span></span><br><span class="line">        p1 = <span class="keyword">null</span>;</span><br><span class="line">        p2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 调用方法进行垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 为了延长程序运行时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面是代码中，我们调用了系统的 System.gc(); 方法来通知Java虚拟机立即进行垃圾回收，。当一个对象在内存中被释放时，它的 finalize 方法会被自动调用，所以可以在类中定义 finalize() 等方法来观察对象何时被释放。</p><p>​    注意，Person中定义了一个 finalize() 方法，这个方法的返回值必须是 void ，并且要用public修饰。当 p1，p2 这两个变量的值变成 null 以后，就变成了垃圾，就可以用 System.gc(); 语句来通知Java虚拟机进行垃圾回收。同时Java虚拟机进行垃圾回收前，调用了两个对象的 finalize() 方法。</p><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><p>​    static用于修饰类的成员，如成员变量、成员方法以及代码块，被static修饰的成员具备一些特殊性，下面进行讲解。</p><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>​    在Java中，每一个实例化后的对象，都会有一些属性，如果有一个属性所有对象都有，我们就不想给每个对象加上属性了，因为那样会很麻烦，我们可以单独设置一个属性，每次需要的时候，就可以让对象直接来访问这个属性就可以了。</p><p>​    在一个类里，可以用 static 关键字来修饰成员变量，该变量被称为静态变量。<strong>静态变量被所有实例共享</strong>，可以用 “类名.变量名” 来访问。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String schoolName;       <span class="comment">// 定义静态变量schoolName</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();       <span class="comment">// 创建学生对象</span></span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Student.schoolName = <span class="string">&quot;传智博客&quot;</span>;    <span class="comment">// 为静态变量赋值</span></span><br><span class="line">        <span class="comment">// 打印第一个学生对象的学校</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我的学校是&quot;</span> + stu1.schoolName);</span><br><span class="line">        <span class="comment">// 打印第二个学生对象的学校</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我的学校是&quot;</span> + stu2.schoolName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面代码中，由于schoolName是静态变量，所以可以直接使用 Student.schoolName 访问，也可以像上面的方式，通过 Student 的实例对象来调用，如：stu1.schoolName</p><p>​    <strong>注意：static关键字只能用于修饰成员变量，不能用于修饰局部变量，否则会报错，例题如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">// 这行代码是非法的，编译会报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    </p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>​    有的时候，我们希望在不创建对象的情况下就可以调用某个方法，换句话说就是不必将方法和对象绑在一起。实现这样的效果，只需要在类定义的方法前加上 static 关键字，通常称这种方法为静态方法。而调用这种方法，可以使用” 类名.方法名 “的方法来访问，当然也可以通过类的实例对象来访问。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 类名.方法名调用静态方法</span></span><br><span class="line">        Person.sayHello();</span><br><span class="line">        <span class="comment">// 实例化对象的方式调用静态方法</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    从上面的代码中可以看出，我们可以用 类名.方法名 调用静态方法，同时我们也可以用实例化对象的方式调用静态方法。</p><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><p>​    静态代码块就是用 static 修饰的代码块。当类被加载时，静态代码块会执行，由于类只加载一次，所以静态代码块只执行一次。在程序中，通常会使用静态代码块来对类的成员变量进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态的代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试类的静态代码块执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下面是一个静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类中的静态代码块执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码在运行时，是先运行两个静态方法，其中 p2 并没有作用，删掉也可以，但是不能将 p1 和 p2 全删掉，因为如果全删掉的话，Person方法就不会被调用，只会输出第一句话（测试类的…）。这个时候，就会有小伙伴问，那为什么要 new 两个  Person 呢，这是因为这个程序想告诉我们，静态代码块在类第一次使用的时，才会被加载，且只会被加载一次。</p><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><p>​    在Java中，可以在一个类中定义另一个类，这个类被称为内部类。根据内部类的位置、修饰符、定义的方式分为成员内部类、静态内部类、方法内部类。</p><p>​    在内部类中，可以访问外部类的所有成员。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">4</span>;    <span class="comment">//定义类的成员变量</span></span><br><span class="line">    <span class="comment">//下面代码定义了一个成员方法，方法中访问内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//在成员内部类的方法中访问外部类的成员方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();  <span class="comment">//创建外部类对象</span></span><br><span class="line">        outer.test();   <span class="comment">//调用 test() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中，定义了一个外部类 Outer ，在外部类中创建了一个内部类的实例化对象，并调用了内部类 Inner 中的 show() 方法，在内部类中调用了外部类的 num 变量，所以可以看出，内部类可以在外部类中被调用，并能访问外部类的成员。</p><p>​    如果想通过外部类访问内部类，则要通过外部类对象去创建内部类对象，创建内部类对象的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 变量名() = <span class="keyword">new</span> 外部类名().new 内部类名();</span><br></pre></td></tr></table></figure><p>​    同时，上面的代码中的主函数也可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.show();   <span class="comment">//调用 test() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    但是如果将文件中的内部类 Inner 用 private 修饰，则会编译错误。</p><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><h5 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h5><p>​    在Java中，类的继承是指在一个现有的类的基础上构建一个新的类，构建出来的新类被称作子类，现有类被称为父类，子类会自动拥有父类所有可继承的属性和方法。</p><p>​    在程序中，要声明一个类继承另一个类，需要使用 extends 关键字。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    String name;      <span class="comment">// 定义 name 属性</span></span><br><span class="line">    <span class="comment">//定义动物叫的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出叫声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个打印 name 的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();<span class="comment">// 创建一个 Dog 类的实例化对象</span></span><br><span class="line">        dog.name = <span class="string">&quot;沙皮狗&quot;</span>;<span class="comment">// 为 Dog 类的 name 属性进行赋值</span></span><br><span class="line">        dog.printName();<span class="comment">// 调用 Dog 类的 getInfo() 方法</span></span><br><span class="line">        dog.shout();<span class="comment">// 调用 dog 类继承来的 shout() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    从上面代码可以看出，Dog 类继承了 Animal 类，同时也拥有了 name 属性和 shout() 方法。说明子类在继承父类的时候，会自动拥有父类的所有的成员。</p><p><strong>注意</strong></p><p>1、在Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接的父类，下面的情况是不合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span>()// <span class="title">C</span>不可以同时继承 <span class="title">A</span> 类和 <span class="title">B</span> 类</span></span><br></pre></td></tr></table></figure><p>2、多个类可以同时继承同一个父类，下面的情况是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">C</span> <span class="title">ectends</span> <span class="title">A</span>()// 类 <span class="title">B</span> 和类 <span class="title">C</span> 都可以继承类 <span class="title">A</span></span></span><br></pre></td></tr></table></figure><p>3、 在Java中，多继承是可以的，也就是一个类再去继承其他的父类，下面的情况是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>()// 类 <span class="title">B</span> 继承类 <span class="title">A</span>，类 <span class="title">B</span> 是类 <span class="title">A</span> 的子项</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">C</span> <span class="title">ectends</span> <span class="title">B</span>()// 类 <span class="title">C</span> 继承类 <span class="title">B</span>，类 <span class="title">C</span> 是类 <span class="title">B</span> 的子项。同时也是类 <span class="title">A</span> 的子项</span></span><br></pre></td></tr></table></figure><p>4、在Java中，父类和子类是抽象的概念，也就是说，一个类可以是另一个类的子类，同时也可以是另一个类的父类。</p><h5 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h5><p>​    可覆盖父类里的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义动物叫的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出叫声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义狗叫的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪汪...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    子类 Dog 覆盖了父类 Aniaml 里的 shout() 方法。</p><p><strong>注意：重写时，子类中重写的方法需要和父类被重写的方法具有相同的方法名、参数列表以及返回值类型。且不能使用比父类中被重写的方法更严格的访问权限</strong></p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p>​    再重写父类里的方法以后，子类对象就无法访问父类被重写的方法，为了解决这个问题，就有了 super 关键字。</p><p>1、使用 super 关键字访问父类成员变量和成员方法，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.成员变量</span><br><span class="line"><span class="keyword">super</span>.成员方法([参数<span class="number">1</span>、])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="comment">//定义动物叫的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出叫声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;犬类&quot;</span>;</span><br><span class="line">    <span class="comment">// 重写父类的 shout 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shout();      <span class="comment">// 访问父类的成员方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义打印 name 的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="keyword">super</span>.name);     <span class="comment">// 访问父类的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();    <span class="comment">// 创建一个 Dog 对象</span></span><br><span class="line">        dog.shout();            <span class="comment">// 调用 dog 对象重写的 shout() 方法</span></span><br><span class="line">        dog.printName();        <span class="comment">// 调用 dog 对象重写的 printName() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面代码，可以看出在 printName 方法中的 super.name 调用的是父类方法。</p><p>2、使用 super 关键字访问父类的构造方法，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>([参数<span class="number">1</span>，参数<span class="number">2.</span>.....])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义 Animal 类的有参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;沙皮狗&quot;</span>);       <span class="comment">// 调用父类有参的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();    <span class="comment">// 实例化子类 Dog 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中，我们可以看到 Dog 类是继承了 Animal 类，Dog 类里的构造方法体中，用 super 调用了 Animal 类里的构造方法，所以在调用 Dog 类里的构造法时，也调用了 Animal 类里的构造方法。</p><p><strong>注意：通过 super 调用父类构造方法的代码必须位于子类构造方法的第一行，并且只能出现一次</strong></p><p>​    在上面的代码中，如果去掉 super(“沙皮狗”); 这行代码则会报错，原因：程序默认调用无参的构造方法，但是在 Animal 类里，我们只定义了有参的构造方法，并没有定义无参的构造方法，所以程序会报错。解决方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义 Animal 无参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只动物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义 Animal 有参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义 Dog 类无参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 方法体中无代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();    <span class="comment">// 实例化子类 Dog 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    从上面代码中可以看出，子类在实例化对象时，默认调用了父类无参的构造方法。</p><p><strong>注意：在定义一个类的时候，我们尽量在类中给你定义一个无参的构造方法，避免被继承时出现错误。</strong></p><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><h5 id="final-关键字修饰类"><a href="#final-关键字修饰类" class="headerlink" title="final 关键字修饰类"></a>final 关键字修饰类</h5><p>​    在Java中，被 final 修饰的类不能被继承。</p><p>​    下面这个程序就会报错</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 final 关键字来修饰 Animal 类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 方法体为空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 方法体为空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();    <span class="comment">// 创建 Dog 类的实例对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>程序报错：Cannot inherit from final ‘test.Animal’</strong></p><h5 id="final-关键字修饰方法"><a href="#final-关键字修饰方法" class="headerlink" title="final 关键字修饰方法"></a>final 关键字修饰方法</h5><p>​    当一个类的方法被 final 修饰以后，这个类的子类将不能重写该方法。</p><p>​    下面程序会报错</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 final 关键字来修饰 Animal 类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 程序代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dog 类继承 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 重写 Animal 类的 shout() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 程序代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();    <span class="comment">// 创建 Dog 类的实例对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>程序报错：’shout()’ cannot override ‘shout()’; overridden method is final.</strong></p><h5 id="final-关键字修饰变量"><a href="#final-关键字修饰变量" class="headerlink" title="final 关键字修饰变量"></a>final 关键字修饰变量</h5><p>​    在Java中，被 final 修饰的变量称为常量，它只能被赋值一次，也就是说，被 final 修饰的变量一旦被赋值，就不能被修改。</p><p>​    下面程序会报错</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">2</span>;  <span class="comment">// 第一次赋值</span></span><br><span class="line">        num = <span class="number">4</span>;            <span class="comment">// 第二次赋值会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>程序报错：Cannot assign a value to final varible ‘num’</strong></p><p>​    下面这个程序可以说明，被 final 修饰的局部变量Java虚拟机不会对其进行初始化。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name;   <span class="comment">// 使用 final 关键字修饰 name 属性</span></span><br><span class="line">    <span class="comment">// 定义 instroduce() 方法，打印学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">instroduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，是一名学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.instroduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>程序报错：Variable ‘name’ might not have been initialized</strong></p><p>​    如果将第二行代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String name = <span class="string">&quot;韩寒&quot;</span>;</span><br></pre></td></tr></table></figure><p>则程序就没有错误了。</p><p>​    这是因为，被 final 修饰的成员变量时，Java虚拟机不会对其进行初始化。所以使用 final 修饰局部变量时，需要在定义变量的同时，赋予一个初始值。</p><h4 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h4><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p>​    一个方法中无法准确的描述一个类的行为特征，比如在上面的动物的叫声，狗的叫声和其他动物的叫声是不同的，我们无法都用同样的叫声描述所有动物。</p><p>​    在Java中，我们可以在定义方法的时候，不写方法体。不包含方法体的方法被称为抽象方法，必须用 abstract 修饰。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;<span class="comment">// 定义抽象方法</span></span><br></pre></td></tr></table></figure><p>​    当一个类里有抽象方法，这个类也必须用 abstract 修饰，被 abstract 修饰的类被称为抽象类。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义抽象方法 shout()</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>包含抽象方法的类一定是抽象类，但是抽象类里可以不包含任何抽象方法。</li><li>抽象类不可以被实例化，因为抽象方法里没有方法体，不可以被调用，如果想调用抽象类里的方法，则需要创建一个子类，在子类中将抽象方法实现。</li></ol><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法 shout()</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    由上面的代码我们可以看出，Dog 类继承了 Animal 类，同时也实现了 shout() 方法。</p><p>​    <strong>扩展：上面的代码倒数第二行 Animal dog = new Dog(); 可书上写的是 Dog dog = new Dog(); ，以自己琢磨一下，后面的多态(4.9.2)里会说到。</strong></p><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>​    (提示：这一节文字较多，但是都是需要认真看的。)</p><p>​    如果一个抽象类里的所有方法都是抽象的，则可以将这个类用另一中方法来定义，被称为接口。</p><p>​    接口是由常量和抽象方法组成的特殊类，是对抽象方法的进一步抽象。</p><p>​    定义接口的时候，需要使用 interface 关键字声明，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[public] interface 接口名 [extends 接口1, 接口2...]&#123;</span><br><span class="line">[<span class="keyword">public</span>] [<span class="keyword">static</span>] [<span class="keyword">final</span>] 数据类型 常量名 = 常量值；</span><br><span class="line">[<span class="keyword">public</span>] [<span class="keyword">abstract</span>] 返回值 抽象方法名(参数列表);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在上面的语法中，一个接口可以有多个父类的接口，它们之间用逗号隔开。Java使用接口的目的是为了克服单继承的限制，因为一个类只能有一个父类，但是可以实现多个接口，接口中的变量默认使用 ‘public static final’ 修饰，即全局变量。接口中定义的方法默认使用 ‘public abstract’ 修饰，即抽象方法。如果接口声明是 public ，那么接口中的变量和方法全部为 public。</p><p>​    由于接口中的方法都是抽象的，因此不能通过实例化对象的方式来调用接口，此时就要定义一个类，并使用implements关键字实现接口中的所有方法。一个类可以在继承另一个类的同时实现多个接口，这些接口在 implements 子句中要使用英文逗号隔开，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;修饰符&gt;] class &lt;类名&gt; [extdends &lt;超类名&gt;] [implements &lt;接口1&gt;, &lt;接口2&gt;, ...]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义全局变量，其默认修饰为 public static final</span></span><br><span class="line">    String ANIMAL_BEHAVIOR = <span class="string">&quot;动物的行为&quot;</span>;</span><br><span class="line">    <span class="comment">// 定义抽象方法 breathe()，其默认修饰为 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 实现 breathe() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ANIMAL_BEHAVIOR + <span class="string">&quot;：狗在呼吸...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现 run() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ANIMAL_BEHAVIOR + <span class="string">&quot;：狗在叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.breathe();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    由上面的代码中我们可以看出，类 Dog 在实现了 Animal 接口后，是可以被实例化的，并且实例化以后，就可以调用 Dog 类里的方法。<strong>注意：一个类实现一个接口，必须给出接口中所有方法的实现，如果不能实现某个方法，也必须写出一个空方法。</strong></p><p>​    (在Java里，“ ” 用双引号引起来的在java中会被当作一个字符串类型（String）进行处理，‘ ’ 用单引号引起来的在java中会被当作字符类型（Char）的来处理 ,Char可直接转换成 int 类型（及它所对应的ASCII码），所以在上面程序中的 “动物的行为” 只能用双引号。)</p><p>​    当然，一个接口也可以用 extends 关键字去继承另一个接口，例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义全局变量，其默认修饰为 public static final</span></span><br><span class="line">    String ANIMAL_BEHAVIOR = <span class="string">&quot;动物的行为&quot;</span>;</span><br><span class="line">    <span class="comment">// 定义抽象方法 breathe() 和 run()，其默认修饰为 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义接口 LandAnimal 继承接口 Animal </span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LandAnimal</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义抽象方法 liveOnLand()</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">liveOnLand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">LandAnimal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 实现 breathe() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ANIMAL_BEHAVIOR + <span class="string">&quot;:狗在呼吸...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现 run() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ANIMAL_BEHAVIOR + <span class="string">&quot;:狗在叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现 liveOnLand() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">liveOnLand</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗是陆地上的动物...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        LandAnimal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.breathe();</span><br><span class="line">        dog.run();</span><br><span class="line">        dog.liveOnLand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中，LandAnimal 接口继承了 Animal 接口，同时拥有了 Animal 接口里的所有的抽象方法。当 Dog 类实现实例化接口的时候，需要实例化这两个接口里的所有抽象方法。</p><p>接口的特点：</p><ul><li>接口中的方法都是抽象的，不能实例化对象。</li><li>接口中的属性只能是常量。</li><li>当一个类实现接口时，如果这个类是抽象类，则实现接口中的部分方法即可，否则需要实现接口中的所有方法。</li><li>一个类通过 implements 关键字实现接口的时，可以实现多个接口的时候，被实现的多个接口之间要用逗号隔开。实例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LandAnimal</span></span>&#123;</span><br><span class="line"><span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span>, <span class="title">LandAnimal</span></span>&#123;</span><br><span class="line"><span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个接口可以通过 extends 关键字来继承多个接口，接口之间用逗号隔开，实例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LandAnimal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span>, <span class="title">LandAnimal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 程序...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类在继承另一个类的同时，也可以实现接口，但是 extends 关键字必须在 implements 关键字之前。实例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Canidae</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 程序...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="多态概述"><a href="#多态概述" class="headerlink" title="多态概述"></a>多态概述</h5><p>​    多态概述：在同一个方法中，这种由于参数类型不同，而导致执行结果效果各异的现象就是多态。</p><p>​    继承是多态实现的基础。</p><p>​    个人理解：多态是指同名的不同方法在程序中共存。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Animal 接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定于 Cat 类，实现 Animal 接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 实现 shout() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义 Dog 类，实现 Animal 接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 实现 dhout() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal an1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal an2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        animalShout(an1);<span class="comment">// 调用 animalShout() 方法，并传入参数</span></span><br><span class="line">        animalShout(an2);<span class="comment">// 调用 animalShout() 方法，并传入参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义静态的 animalShout() 方法，接收一个 Animal 类型的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal an)</span></span>&#123;</span><br><span class="line">        an.shout();<span class="comment">// 调用实际参数的 shout() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中，我们定义了 Animal 接口，同时也定义了 Dog 类和 Cat 类，通过传入的参数不同，使用了不同的方法。由此可见，多态不仅解决了方法的同名的问题，而且还使程序变的更加灵活，从而有效的提高了程序的可扩展性和可维护性。</p><h5 id="对象的类型转换"><a href="#对象的类型转换" class="headerlink" title="对象的类型转换"></a>对象的类型转换</h5><p>​    我们在使用多态时，常常涉及到将子类对象当作父类类型使用，这种情况在 Java 中被称为 “向上转型” ，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal an1 = <span class="keyword">new</span> Cat();<span class="comment">// 将 Cat 对象当作 Animal 类型来用</span></span><br><span class="line">Animal an2 = <span class="keyword">new</span> Dog();<span class="comment">// 将 Dog 对象当作 Animal 类型来用</span></span><br></pre></td></tr></table></figure><p>​    将子类对象当作父类对象使用时不需要任何显示地声明，但是需要注意的是，此时不能通过父类变量去调用子类中特有的方法。</p><p>​    下面的代码是演示对象的类型转换情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        animalShout(cat);<span class="comment">// 向 animalShout 方法里传入参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        animal.shout();<span class="comment">// 调用 shout() 方法</span></span><br><span class="line">        animal.sleep();<span class="comment">// 调用 sleep() 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码会报错：Cannot resolve method ‘sleep’ in ‘Animal’</p><p>​    这是因为 animalShout 方法里的参数类型是 Animal 类型，但是 Animal 类里没有定义 sleep 方法，所以会提示在 Animal 类里找不到 sleep 方法。</p><p>​    修改方法有两种：</p><p>第一种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        Cat cat = (Cat) animal; <span class="comment">// 将 animal 对象强制转换为 Cat 类型</span></span><br><span class="line">        cat.shout();</span><br><span class="line">        cat.sleep();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    这种方法是把 animalShout() 方法中的 Animal 类型的变量强制转化为 Cat 类型。</p><p>第二种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Cat animal)</span></span>&#123;<span class="comment">// 直接定义为 Cat 类型的参数</span></span><br><span class="line">        animal.shout();</span><br><span class="line">        animal.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    虽然看起来是两种方法，但是原理都是一样的，都是将参数传到 Cat 类型里。</p><p>​    在Java中，我们也可以用 instanceof 关键字来判断一个对象是否为某个类(或接口)的实例或者子类实例，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象(或者对象引用变量) <span class="keyword">instanceof</span> 类(或接口)</span><br></pre></td></tr></table></figure><p>​    实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//    void shout();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        animalShout(cat);</span><br><span class="line">        animalShout(dog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.shout();</span><br><span class="line">            cat.sleep();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This animal is not a Cat.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h5><p>​    在 JDK 中提供了一个 Object 类，<strong>它是类层次结构的根类，每个类都直接或间接继承自该类，所有对象 (包括数组) 都实现了这个类的方法</strong>，如下图：</p><table><thead><tr><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">equals()</td><td align="center">指示其他某个对象是否与此对象“相等”</td></tr><tr><td align="center">getClass()</td><td align="center">返回此 Object 的运行时的类</td></tr><tr><td align="center">hashCode()</td><td align="center">返回该对象的哈希码值</td></tr><tr><td align="center">toString()</td><td align="center">返回该对象的字符串表示</td></tr></tbody></table><p>​    下面是 Object 类里的 toString() 方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物叫!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        System.out.println(animal.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    运行结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.Animal@2f4d3709</span><br></pre></td></tr></table></figure><p>​    Animal 类里并没有 toString() 方法，但是调用的时候，并没有报错，因为 Animal 类默认继承 Object 类，Object 类里定义了 toString() 方法，在这个方法里输出了对象所属类的类名。Object 类里的 toString() 方法中的具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br></pre></td></tr></table></figure><p>​    上面的代码具体含义如下：</p><ul><li><p>getClass().getName() 代表返回对象所属类的类名，即 Animal。</p></li><li><p>hashCode() 代表返回该对象的哈希值。</p></li><li><p>Integer.toHexString(hashCode()) 代表将对象的哈希值用十六进制表示。</p><p>​    其中，hashCode() 是 Object 类中的一个方法，这个方法将对象的内存地址进行哈希运算，返回一个 int 类型的哈希值。</p><p>​    在实际运用中，通常希望对象的 toString() 方法返回的不仅仅是基本信息，而是一些特有的信息。这时就要重写 Object 类中的 toString() 方法了。</p><p>​    例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Animal 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这个是一只动物...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        System.out.println(animal.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    重写了 toString() 方法以后，当我们调用这个方法以后，就打印出了 Animal 类里的描述信息 “这个是一只动物…”。</p></li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>​    在Java中，在类里的定义的类称为内部类 (Inner Class) ，内部类是外部类的成员。Java 的内部类可以分为成员内部类、方法内部类和匿名内部类等。</p><p>​    我们可以用匿名内部类来实现接口。匿名内部类就是没有名字的内部类，表面看起来好像有名字，实际那并不是它的名字。当程序使用匿名类的时候，在定义匿名内部类的地方往往直接创建该类的一个对象。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个内部类 Cat 来实现 Animal 接口</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;喵喵...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        animalShout(<span class="keyword">new</span> Cat());<span class="comment">// 调用 animalShout() 方法并传入 Cat 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义静态方法 animalShout()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal an)</span></span>&#123;</span><br><span class="line">        an.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    在上面的代码中，可以看出内部类 Cat 类实现了 Animal 接口，在调用 animalShout() 方法时，将 Cat 类的实例对象作为参数传入到方法中，从而输出相应的结果。</p><p>​    匿名内部类的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类(参数列表) 或 父接口()&#123;</span><br><span class="line">    <span class="comment">// 匿名内部类实现部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    改写后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义匿名内部类作为参数传递给 animalShout() 方法</span></span><br><span class="line">        animalShout(<span class="keyword">new</span> Animal() &#123;</span><br><span class="line">            <span class="comment">// 实现 shout() 方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;喵喵...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义静态方法 animalShout()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span><span class="params">(Animal an)</span></span>&#123;</span><br><span class="line">        an.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的两块代码，运行结果是一样的，但是后者的代码比较难理解。</p><p>​    下面分两步说明匿名内部类：</p><ol><li><p>在调用 animalShout() 方法时，在方法的参数位置写上 new Animal(){};，这相当于创建了一个实例对象，并将对此昂作为参数传给 animalShout() 方法。在 new Animal() 后面有一对大括号，表示创建的对象为 Animal 的子类实例，该子类是匿名的。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animalShout(<span class="keyword">new</span> Animal()&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在大括号中编写匿名子类的实现代码，如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">animalShout(<span class="keyword">new</span> Animal()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    至此便完成了匿名内部类的编写。匿名内部类是实现接口的一中简便的写法，在程序中不一定非要用匿名内部类。不要求完全掌握，了解即可。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><h5 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h5><p>​    异常就是程序遇到 Bug 了。</p><p>​    在 Java 中提供了大量的异常类，这些类都继承自 java.lang.Throwable 类。Throwable 类有两个直接子类，一个是 Error 类，代表程序产生的错误，另一个是 Exception 类，代表程序中产生的异常。</p><ul><li><p><strong>Error 类</strong></p><p>​    Error类称为错误类，它代表 Java 运行时产生的系统内部错误或者资源耗尽的错误，是比较严重的，仅靠修改程序本身是不能恢复执行的。例如：使用 Java 命令去执行一个不存在的类就会出现 Error 错误。</p></li><li><p><strong>Exception 类</strong></p><p>​    Exception 类称为异常类，它表示程序本身可以处理的错误。在开发 Java 程序中进行的异常处理都是针对 Exception 类及其子类。在 Exception 类的众多子类中有一个特殊的 RuntimeException 类，该类及其子类用于表示运行时异常。除了此类，Exception 类下所有其他子类都用于表示编译异常。</p></li></ul><p>下面用树状图表示继承关系：</p><pre class="mermaid">graph TDA(其他子类) --> B(Error)C(AWTError) --> BD(IOError) --> BE(其他子类) --> F(RuntimeException)G(ClassCastException) --> FH(ArithmeticException) --> FI(其他子类) --> J(Exception)F --> JB --> K(Throwable)J --> K</pre><p>​                                                                        <strong>Throwable体系架构图</strong></p><p>​    Throwable 类中常用的方法：</p><table><thead><tr><th align="center">方法声明</th><th align="left">功 能 描 述</th></tr></thead><tbody><tr><td align="center">String getMessage()</td><td align="left">返回此 throwable 的详细消息字符串</td></tr><tr><td align="center">void printStackTrace()</td><td align="left">将此 throwable 及其追踪输出至标准错误流</td></tr><tr><td align="center">void printStackTrace(PrintStream s)</td><td align="left">将此 throwable 及其追踪输出到指定的输出流</td></tr></tbody></table><p>​    注：由于 Error 和 Exception 都继承自 Thowable 类，所以它们都有这些方法。</p><h5 id="try…catch-和-finally"><a href="#try…catch-和-finally" class="headerlink" title="try…catch 和 finally"></a>try…catch 和 finally</h5><p>​    在程序运行的时候，因为发生了异常导致程序立刻终止，所以无法继续向下执行了。Java 中提供了对异常处理的方式———异常捕获。通常用 try…catch 语句，例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//程序代码块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType(Exception 类及其子类) e)&#123;</span><br><span class="line">    <span class="comment">//对 ExceptionType 处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    其中，try 代码块中是可能发生异常的 Java 语句，catch 代码块中编写针对异常进行处理的代码。当 try 中的代码发生了异常，系统会将这个异常信息封装成一个异常对象，并将这个对象传递给 catch 代码块。catch 代码块需要参数指明它所能够接收的异常类型，这个参数的类型必须是 Exception 类或者子类。</p><p>​    例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> result = divide(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获的异常行为:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续向下执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x / y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    输出结果：捕获的异常行为为:/ by zero<br>​    程序继续向下执行…</p><p>​    上面的程序中，我们用 try…catch 对可能发生异常的代码进行了处理，发生异常语句后面的代码是不会被执行的，当我们调用 getMessage 方法对异常处理完后，代码会（跳出 try…catch）继续向下执行。</p><p>​    在程序中，我们有时候希望有些语句无论是否发生异常都要执行，这个时候就需要在 try…catch 语句后加上一个 finally 代码块。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> result = divide(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获的异常行为为:&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//用于结束当前语句</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入finally代码块...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续向下执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x / y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在 catch 代码块中增加一个 return 语句，用于结束当前方法，此时第12行代码就不会被执行了，但是 finally 里的语句还是会执行，并不会受到 return 语句的影响。也就是说，不论程序是发生了异常还是使用 return 语句，都不会影响 finally 语句的执行。所以，我们通常会在 try…catch 后加上 finally 来完成必须执行的事情，例如：释放系统资源。</p><p>​    注意：只有一种情况 finally 是不会被执行的，那就是在 try…catch 中执行 System.exit(0) 语句，System.exit(0)代表的是退出当前Java虚拟机，Java虚拟机停止了，任何程序都无法运行了。</p><h5 id="throws-关键字"><a href="#throws-关键字" class="headerlink" title="throws 关键字"></a>throws 关键字</h5><p>​    我们在写代码的时候，我们自己清楚自己写的代码哪里可能会出错，但是别人调用的时候可能就不知道，我们可以使用 throws 方法，先声明这个方法可能会发生的异常，这样调用者在调用方法的时候，就知道这个方法可能有异常，这样就可以在程序中对异常处理。</p><p>​    throws 关键字使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名([参数<span class="number">1</span>, 参数<span class="number">2.</span>.....])<span class="keyword">throws</span> ExceptionType1 [, Exception Type2......]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = divide(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x / y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在 IDEA 中程序报错：Unhandled exception: java.lang.Exception。</p><p>​    运行后报错：Error:(5, 28) java: 未报告的异常错误 java.lang.Exception; 必须对其进行捕获或声明以便抛出。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows_Terminal</title>
      <link href="posts/29343.html"/>
      <url>posts/29343.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p>​    windows Terminal 可直接在 win 商店安装。</p><p>​    windows Terminal 同时支持一些 Linux 系统的命令，比如：ls 命令，相当于 windows 系统的 dir 命令。</p><p>​    <strong>注意：在 Windows Terminal 中是无法使用 &amp;&amp; 的，在 cmd 中，&amp;&amp; 可以连接两个命令，表示先运行第一个命令，再运行第二个命令，在 Windows Terminal 中可以使用 ; 来代替 &amp;&amp; 。</strong></p><h3 id="修改背景"><a href="#修改背景" class="headerlink" title="修改背景"></a>修改背景</h3><img src="/posts/29343/1.png" style="zoom: 80%;"><p>​    可以用记事本打开，当然也可以用其他编辑器打开</p><p>​    不做任何修改，找到下面的代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;list&quot;:</span><br><span class="line">       [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">               <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure><p>​    在中间加上一行代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;list&quot;:</span><br><span class="line">       [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">               <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;E:\\backgroud\\backgroud_\\timg (6).jpg&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure><p>​    注意：最好是在倒数第二行加，其中要用双斜杠，否则会报错。</p><h3 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h3><p>​    与上面的修改背景同理：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;list&quot;:</span><br><span class="line">      [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">              <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;fontSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">           <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;E:\\backgroud\\backgroud_\\timg (6).jpg&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure><p>下面是我的配置文件，注释写过了，但是想要直接用的话，要修改几个地方：</p><ol><li>默认配置： “defaultProfile”: “{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}”， 根据你的<code>list</code>选择对应的<code>guid</code>的值</li><li>初始目录： “startingDirectory”: “C://Users//12123//Desktop”, 这里的用户名自己修改</li><li>背景图像： “backgroundImage”: “E://backgroud//backgroud_//timg (6).jpg”, 修改为自己的图片地址</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.0.1401.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line">    <span class="comment">// 默认使用的终端 (ubuntu/powershell/cmd....)</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line">    <span class="comment">// 主题设置</span></span><br><span class="line">    <span class="attr">&quot;theme&quot;</span>: <span class="string">&quot;dark&quot;</span>, <span class="comment">// --------- 这里有改动 ------------- &quot;dark/light/system&quot; 就标题栏有变化....</span></span><br><span class="line">    <span class="comment">// 启动设置</span></span><br><span class="line">    <span class="comment">// 1、以最大化方式启动</span></span><br><span class="line">    <span class="attr">&quot;launchMode&quot;</span>: <span class="string">&quot;default&quot;</span>, <span class="comment">// &quot;maximized&quot;</span></span><br><span class="line">    <span class="comment">// 2、启动位置</span></span><br><span class="line">    <span class="attr">&quot;initialPosition&quot;</span>: <span class="string">&quot;500,250&quot;</span>,</span><br><span class="line">    <span class="comment">// 3、首次启动时的列</span></span><br><span class="line">    <span class="attr">&quot;initialCols&quot;</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="comment">// 4、首次启动时的行</span></span><br><span class="line">    <span class="attr">&quot;initialRows&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span>: <span class="literal">true</span>, <span class="comment">// --- 这里有改动 ----默认 false  ， 选中复制，右键粘贴</span></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 滚动速度</span></span><br><span class="line">    <span class="attr">&quot;rowsToScroll&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="comment">// 这是滚动鼠标滚轮一次滚动的行数 默认 &quot;system&quot;</span></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">// 初始目录设置</span></span><br><span class="line">            <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;C:\\Users\\12136\\Desktop&quot;</span>,</span><br><span class="line">            <span class="comment">// 文本设置</span></span><br><span class="line">            <span class="comment">// 字体</span></span><br><span class="line">            <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Cascadia Mono&quot;</span>,</span><br><span class="line">            <span class="comment">// 字体大小</span></span><br><span class="line">            <span class="attr">&quot;fontSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="comment">// 边距</span></span><br><span class="line">            <span class="attr">&quot;padding&quot;</span>: <span class="string">&quot;2,2,2,2&quot;</span>,</span><br><span class="line">            <span class="comment">// 消除文本锯齿</span></span><br><span class="line">            <span class="attr">&quot;antialiasingMode&quot;</span>: <span class="string">&quot;cleartype&quot;</span>,</span><br><span class="line">            <span class="comment">// 颜色设置</span></span><br><span class="line">            <span class="comment">// 配色方案,   配色方案是在 schemes 对象中定义的, 有几个预先定义的方案， 查看 https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/color-schemes</span></span><br><span class="line">            <span class="attr">&quot;colorScheme&quot;</span>: <span class="string">&quot;One Half Dark&quot;</span>, <span class="comment">// One Half Dark,  One Half Light,  Solarized Dark,  Solarized Light, </span></span><br><span class="line">            <span class="comment">// Acrylic 设置</span></span><br><span class="line">            <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// Acrylic 不透明度</span></span><br><span class="line">            <span class="attr">&quot;acrylicOpacity&quot;</span>: <span class="number">0.8</span>,  </span><br><span class="line">            <span class="comment">// // 背景图像设置</span></span><br><span class="line">            <span class="attr">&quot;backgroundImage&quot;</span>:  <span class="string">&quot;E:\\backgroud\\backgroud_\\timg (6).jpg&quot;</span>,</span><br><span class="line">            <span class="comment">// // 背景图像拉伸模式 &quot;none&quot;、&quot;fill&quot;、&quot;uniform&quot;、&quot;uniformToFill&quot;</span></span><br><span class="line">            <span class="comment">// &quot;backgroundImageStretchMode&quot;: &quot;uniform&quot;,</span></span><br><span class="line">            <span class="comment">// // 背景图像不透明度</span></span><br><span class="line">            <span class="comment">// &quot;backgroundImageOpacity&quot;: 0.8,</span></span><br><span class="line">            <span class="comment">// 历史记录可现实行数</span></span><br><span class="line">            <span class="attr">&quot;historySize&quot;</span>: <span class="number">9001</span> <span class="comment">// default 9001 </span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;命令提示符&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ubuntu-18.04&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Wsl&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="comment">// 自定义配色方案， 我觉得没必要。。。不折腾.....   </span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span>: [],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">&quot;keybindings&quot;</span>: [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;copy&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;singleLine&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+c&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;paste&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+v&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;find&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+f&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;splitPane&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;split&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;splitMode&quot;</span>: <span class="string">&quot;duplicate&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+shift+d&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 下面是我自定义的快捷键</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;closePane&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+w&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;closeTab&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+w&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快捷键总结：</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt + F4</td><td>关闭窗口</td></tr><tr><td>Ctrl + Shift + F</td><td>查找</td></tr><tr><td>Ctrl + Shift + space</td><td>打开下拉菜单</td></tr><tr><td>F11 或 Alt+enter</td><td>切换全屏</td></tr><tr><td>Ctrl + Shift + D</td><td>复制当前选项卡</td></tr><tr><td>Ctrl + Shift + T</td><td>新建选项卡</td></tr><tr><td>Ctrl + Tab</td><td>打开下一个选项卡</td></tr><tr><td>Alt + 方向键</td><td>移动窗格焦点</td></tr><tr><td>Alt + Shift + plus</td><td>垂直拆分窗格</td></tr><tr><td>Alt + Shift + -</td><td>水平拆分窗格</td></tr><tr><td>Ctrl + w</td><td>关闭当前窗口</td></tr><tr><td>Ctrl + Shift + w</td><td>关闭当前窗口，分割后的</td></tr><tr><td>Ctrl + =/鼠标滚轮</td><td>调大字号</td></tr><tr><td>Ctrl + -/鼠标滚轮</td><td>调小字号</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu虚拟机配置</title>
      <link href="posts/49738.html"/>
      <url>posts/49738.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu虚拟机配置"><a href="#Ubuntu虚拟机配置" class="headerlink" title="Ubuntu虚拟机配置"></a>Ubuntu虚拟机配置</h1><p>​    前段时间因为被虚拟机搞的头大，所以写个笔记记录一下，以免忘记。</p><p>​    环境：Win10系统、Ubuntu19.04镜像、VMware或者Vbox、jdk13.0.2安装包、eclipse安装包</p><p>​    开始的时候，我们先打开虚拟机，导入Ubuntu19.04的镜像，这里是基本操作，就不多说了，但是需要注意的一点是：VMware一定要将网络配置成网桥模式，要是实在上不去网，再配置成NAT模式。</p><p>​    Vbox直接配置两个网络，第一个网桥，第二个网络地址转换（NAT），内存2G。（要是这样还上不去网，那就可能是宿主机的问题了，我见过的情况的都是宿主机网卡驱动没有安装好。）</p><p>​    因为VMware比较简单，以下是Vbox的分区</p><img src="/posts/49738/1.jpg" style="zoom:80%;"><img src="/posts/49738/2.jpg" style="zoom:80%;"><img src="/posts/49738/3.jpg" style="zoom:80%;"><p>然后直接安装就可以了</p><p>​    等到安装完成，虽然这个时候，可以上网，但是<code>sudo apt-get update</code> 和 vim 依然会被和谐，所以我们需要更新一下，升级成19.10版本的，就可以了</p><p>升级步骤如下：</p><img src="/posts/49738/4.jpg" style="zoom:80%;"><img src="/posts/49738/5.png" style="zoom:80%;"><img src="/posts/49738/6.png" style="zoom:80%;"><p>​    这里要注意，一定要选择阿里云的镜像，不然很可能不成功</p><img src="/posts/49738/7.png" style="zoom:80%;"><img src="/posts/49738/8.png" style="zoom:80%;"><img src="/posts/49738/9.png" style="zoom:80%;"><p>​                 <img src="/posts/49738/10.png" style="zoom:80%;"></p><p>​    接下来等待就可以了</p><p>​    升级完成以后，就可以运行一下这两个命令了，一更新一下源（这个我不知道没必要没有，但是没有后果）：<code>sudo apt-get update</code>，第二个命令（安装vim）：<code>sudo apt-get install vim</code></p><h2 id="VMware篇"><a href="#VMware篇" class="headerlink" title="VMware篇"></a>VMware篇</h2><p>​    接下来安装 VMware tools，请直接参考这篇文章 <a href="https://blog.csdn.net/lixinghua666/article/details/82288938">https://blog.csdn.net/lixinghua666/article/details/82288938</a></p><p>​    先复制到桌面，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/vmware/<span class="comment"># 进入文件夹</span></span><br><span class="line">tar -zxvf VMwareTools-10.1.6-5214329.tar.gz<span class="comment"># 解压缩</span></span><br><span class="line"><span class="built_in">cd</span> vmware-tools-distrib/<span class="comment">#进入这个文件夹</span></span><br><span class="line">sudo ./vmware-install.pl<span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><p>接下来一直按回车，等待安装结束就可以了。</p><p>然后设置共享文件夹，用来进行宿主机和虚拟机的文件传输（E:/安装包/share都是自己设置的哈）</p><img src="/posts/49738/11.jpg" style="zoom:80%;"><p>​    设置完以后，可以在 Ubuntu 的 <code>/mnt/hgfs</code> 里找到，这样我们就可以直接进行宿主机和虚拟机之间的文件传输了</p><h2 id="Vbox篇"><a href="#Vbox篇" class="headerlink" title="Vbox篇"></a>Vbox篇</h2><p>​    Vbox需要安装增强功能，点击设备-&gt;安装增强功能，安装完成后重新启动下虚拟机即可。</p><p>​    然后设置共享文件夹。</p><p>​    <img src="/posts/49738/12.jpg" style="zoom:80%;"></p><p><img src="/posts/49738/13.jpg"></p><p>​    其中的<code>D:/program Files/BigData/winshare</code>是自己设置的。</p><p>​    打开终端，使用命令cd /mnt进入到mnt目录，然后使用命令sudo mkdir share创建share文件夹，随后使用命令 <code>sudo mount -t vboxsf winshare /mnt/share</code> 挂载共享文件夹，然后我们进入到 share 目录，ls 命令查看，就可以看到我们挂载的文件夹生效了。</p><p>​    为了能够实现开机自动挂载，在文件 <code>/etc/rc.local</code> 中（用root用户）追加如下命令：<code>sudo mount -t vboxsf winshare /mnt/share</code> 放在 exit 0 之前。</p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="1、首先先将准备好的jdk安装包cp到虚拟机中"><a href="#1、首先先将准备好的jdk安装包cp到虚拟机中" class="headerlink" title="1、首先先将准备好的jdk安装包cp到虚拟机中"></a>1、首先先将准备好的jdk安装包cp到虚拟机中</h3><h3 id="2、-解压到安装目录"><a href="#2、-解压到安装目录" class="headerlink" title="2、 解压到安装目录"></a>2、 解压到安装目录</h3><p>一般在 <code>/usr/local/java</code> java是自己命名的</p><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf jdk-10.0.1_linux-x64_bin.tar.gz -C /usr/<span class="built_in">local</span>/java/</span><br></pre></td></tr></table></figure><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>位置一般在 <code>~/.bashrc</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件的末尾处加上下面的环境变量 ，<strong>注意,不可以修改源文件任何内容。</strong></p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;用户名&#x2F;software&#x2F;jdk-10.0.1     创建一个java_home的路径</span><br><span class="line">export CLASSPATH&#x3D;.    java命令查找class文件的路径设置为当前目录</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk-13.0.2</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">exportCLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>保存并退出。</p><h3 id="4、刷新环境变量"><a href="#4、刷新环境变量" class="headerlink" title="4、刷新环境变量"></a>4、刷新环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>  ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>出现以下的版本信息，就是安装成功</p><p><img src="/posts/49738/14.jpg"></p><h2 id="安装eclipse"><a href="#安装eclipse" class="headerlink" title="安装eclipse"></a>安装eclipse</h2><h3 id="1、首先先将准备好的eclipse安装包cp到虚拟机中"><a href="#1、首先先将准备好的eclipse安装包cp到虚拟机中" class="headerlink" title="1、首先先将准备好的eclipse安装包cp到虚拟机中"></a>1、首先先将准备好的eclipse安装包cp到虚拟机中</h3><h3 id="2、-解压到安装目录-1"><a href="#2、-解压到安装目录-1" class="headerlink" title="2、 解压到安装目录"></a>2、 解压到安装目录</h3><p>一般在 <code>/opt</code> 下面</p><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf eclipse-java-2020-03-R-linux-gtk-x86_64.tar.gz -C /opt</span><br></pre></td></tr></table></figure><p>​    这个时候，我们就已经可以进入到 /opt/eclipse 下，用 ./eclipse 来运行eclipse了</p><h3 id="3、创建快捷方式"><a href="#3、创建快捷方式" class="headerlink" title="3、创建快捷方式"></a>3、创建快捷方式</h3><p>​    <strong>1、添加桌面图标</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/eclipse.desktop</span><br></pre></td></tr></table></figure><p>​    打开以后，在里面编辑以下的内容</p><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Name&#x3D;Eclipse</span><br><span class="line">Comment&#x3D;Eclipse</span><br><span class="line">Exec&#x3D;&#x2F;绝对路径&#x2F;eclipse&#x2F;eclipse</span><br><span class="line">Icon&#x3D;&#x2F;绝对路径&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">StartupNotify&#x3D;true</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Application;Development;</span><br></pre></td></tr></table></figure><p>例如我的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Name&#x3D;Eclipse</span><br><span class="line">Comment&#x3D;Eclipse</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;eclipse&#x2F;eclipse</span><br><span class="line">Icon&#x3D;&#x2F;opt&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">StartupNotify&#x3D;true</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Application;Development;</span><br></pre></td></tr></table></figure><p>​    <strong>2、给eclipse.desktop文件赋权</strong></p><p>​    用命令：<code>cd /usr/share/applications/</code> 进入 <code>eclipse.desktop</code> 文件的目录下</p><p>​    然后执行命令：<code>chmod u+x eclipse.desktop</code> 就完成了赋权</p><p>这个时候，我们就可以在这里找到了</p><img src="/posts/49738/15.jpg" style="zoom:80%;"><p>​    但是，我们会发现，还是打不开，会报错，找不到java路径，这需要我们建立一个软连接，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/eclipse <span class="comment"># /opt是eclipse的绝对路径</span></span><br><span class="line">sudo mkdir jre</span><br><span class="line"><span class="built_in">cd</span> jre</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/java/jdk-13.0.2/bin bin<span class="comment"># /usr/local/java/jdk-13.0.2是java安装路径</span></span><br></pre></td></tr></table></figure><p>​    这个时候，我们再点击 <code>eclipse</code> 的图标，就可以完美运行了。</p><p>​    至此，我们虚拟机环境就基本配置完成，小提示：升级过的19.10是自带 python3.7.5 的环境的哦，就不用小伙伴们自己配置了。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Vbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="posts/19993.html"/>
      <url>posts/19993.html</url>
      
        <content type="html"><![CDATA[<p>​    简单的说，git 是为了更方便的管理代码，我们可以通过 git 来管理自己的代码。</p><h3 id="git-工作命令-个人理解-："><a href="#git-工作命令-个人理解-：" class="headerlink" title="git 工作命令(个人理解)："></a>git 工作命令(个人理解)：</h3><p>​    先简单的说一下个人对 git 工作的方式，如果我们想要将代码上传到 GitHub 或者 Gitee 上，我们先要在本地建立起一个仓库，也就是下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>​    然后我们要将想要提交的代码加入缓存区，也就相当于是将想提交的代码先放到本地的仓库中，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>​    我就默认将这个文件夹里所有的代码都提交了，提交到本地仓库以后，我们开始连接到自己想要提交的仓库，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://...</span><br></pre></td></tr></table></figure><p>​    然后我们开始提交我们本次提交的信息的注释，命令如下：(注意：如果我们是第一次提交，则会让我们填写邮箱和用户名，我们按照命令的提示，直接输入就可以了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br></pre></td></tr></table></figure><p>​    与远程仓库建立起联系后，为了解决远程仓库和本地的冲突，要先将远程仓库的代码拉取到本地，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>​    将远程仓库的代码拉取到本地后，我们再将代码一起推到远程仓库上，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>​    <strong>特别注意：这个时候，一般会让输入用户名和密码，注意！！！一定一定要输入正确，修改的时候，不太好修改，不修改的话，是会一直报错的！！！</strong></p><h3 id="修改密码："><a href="#修改密码：" class="headerlink" title="修改密码："></a>修改密码：</h3><p>​    下面假设密码第一次输入错误，修改的时候，要先打开控制面板，点击用户账户。<br><img src="/posts/19993/a.jpg" style="zoom:80%;"></p><p>​    然后点击管理 Windows 凭据。</p><img src="/posts/19993/b.jpg" style="zoom:80%;"><p>​    然后我们就会看到如下界面，然后再点击编辑就可以了。</p><img src="/posts/19993/c.jpg" style="zoom:80%;"><p><img src="/posts/19993/a.jpg"></p><p>​    然后点击管理 Windows 凭据。</p><p><img src="/posts/19993/b.jpg"></p><p>​    然后我们就会看到如下界面，然后再点击编辑就可以了。</p><p><img src="/posts/19993/c.jpg"></p><h3 id="命令总结："><a href="#命令总结：" class="headerlink" title="命令总结："></a>命令总结：</h3><p>​    下面是个人总结的一些平时常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进入到工作目录中，开始初始化仓库(在当前文件夹下生成一个 .git 文件夹)</span></span><br><span class="line">E:\Test&gt; git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝一份远程仓库，也就是下载一个项目(默认是当前文件夹，后面可以自己加文件夹例如 D:\Test)</span></span><br><span class="line">E:\Hexo&gt; git <span class="built_in">clone</span> https://... D:\Test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">E:\Hexo&gt; git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 commit 注释</span></span><br><span class="line">E:\Hexo&gt; git commit -m <span class="string">&quot;提交内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看仓库当前的状态，显示有变更的文件</span></span><br><span class="line">E:\Hexo&gt; git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程仓库操作</span></span><br><span class="line">E:\Hexo&gt; git remote add origin https://...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载远程代码并合并</span></span><br><span class="line">E:\Hexo&gt; git pull --rebase origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传远程代码并合并</span></span><br><span class="line">E:\Hexo&gt; git push -u origin master</span><br></pre></td></tr></table></figure><p>git 创建、查看、切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支，例如创建 test 分支</span></span><br><span class="line">git branch <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支，例如切换为 test 分支</span></span><br><span class="line">git checkout <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支，例如删除 test 分支</span></span><br><span class="line">git branch -d <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos中docker的安装和基本使用</title>
      <link href="posts/50190.html"/>
      <url>posts/50190.html</url>
      
        <content type="html"><![CDATA[<pre><code>环境：centos操作系统</code></pre><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先更新 yum 源</span></span><br><span class="line">[root@aliyun /]# sudo yum update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原来的docker，如果原来没有安装过，就不用删除了</span></span><br><span class="line">[root@aliyun /]# sudo yum remove docker \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">&gt;                  docker-client-latest \</span></span><br><span class="line"><span class="bash">&gt;                  docker-common \</span></span><br><span class="line"><span class="bash">&gt;                  docker-latest \</span></span><br><span class="line"><span class="bash">&gt;                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">&gt;                  docker-logrotate \</span></span><br><span class="line"><span class="bash">&gt;                  docker-selinux \</span></span><br><span class="line"><span class="bash">&gt;                  docker-engine-selinux \</span></span><br><span class="line"><span class="bash">&gt;                  docker-engine</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在问度娘的时候，看到都要安装下面这个，也就安装了，应该没什么坏处</span></span><br><span class="line">[root@aliyun /]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置阿里云的源</span></span><br><span class="line">[root@aliyun /]# sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="/posts/50190/a.jpg"></p><p>下面开始安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看docker的版本</span></span><br><span class="line">[root@aliyun /]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line">已加载插件：fastestmirror, product-id, search-disabled-repos, subscription-manager</span><br><span class="line">可安装的软件包</span><br><span class="line">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">docker-ce.x86_64            3:19.03.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在这里我们使用最新的版本就可以了，默认安装的就是最新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun /]# yum -y install docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示你需要使用 --skip-broken ，那你就在命令后面加上 --skip-broken</span></span><br></pre></td></tr></table></figure><p>当然也可以安装指定版本的docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定版本为 ： 18.06.3.ce-3.el7</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装：</span> </span><br><span class="line">[root@aliyun /]# yum -y install docker-ce-18.06.3.ce-3.el7 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">[root@aliyun /]# docker -v</span><br><span class="line">Docker version 1.13.1, build 64e9980/1.13.1</span><br></pre></td></tr></table></figure><p>到这里就安装成功了。</p><p>下面是docker的一些命令，后面都会用到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行docker</span></span><br><span class="line">[root@aliyun /]# systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker</span></span><br><span class="line">[root@aliyun /]# systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">[root@aliyun /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器的状态</span></span><br><span class="line">[root@aliyun /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前正在运行的容器</span></span><br><span class="line">[root@aliyun /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker是否运行成功</span></span><br><span class="line">[root@aliyun /]# systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="/posts/50190/b.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动/停止某个容器</span></span><br><span class="line">[root@aliyun /]# docker start/stop id/name /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm -f id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个镜像</span></span><br><span class="line">[root@aliyun /]# docker rmi id/name </span><br></pre></td></tr></table></figure><h3 id="docker拉取镜像"><a href="#docker拉取镜像" class="headerlink" title="docker拉取镜像"></a>docker拉取镜像</h3><p>可以直接拉取网上做好的镜像，在心里谢过各位大佬以后，手上就不客气了…</p><h4 id="docker之centos镜像"><a href="#docker之centos镜像" class="headerlink" title="docker之centos镜像"></a>docker之centos镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找镜像</span></span><br><span class="line">[root@aliyun ~]# docker search mysql</span><br><span class="line">INDEX       NAME                                        DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/mysql                             MySQL is a widely used, open-source relati...   9482      [OK]       </span><br><span class="line">docker.io   docker.io/mariadb                           MariaDB is a community-developed fork of M...   3427      [OK]       </span><br><span class="line">docker.io   docker.io/mysql/mysql-server                Optimized MySQL Server Docker images. Crea...   695                  [OK]</span><br><span class="line">docker.io   docker.io/centos/mysql-57-centos7           MySQL 5.7 SQL database server                   75                   </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在这里我拉取的是兄长随手做着玩的一个centos系统镜像...</span></span><br><span class="line">[root@aliyun hua]# docker search lixinghua</span><br><span class="line">INDEX       NAME                              DESCRIPTION   STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/lixinghua/base_centos                 0                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像，可以看到命令是 docker pull [NAME]</span></span><br><span class="line">[root@aliyun hua]# docker pull docker.io/lixinghua/base_centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/lixinghua/base_centos ... </span><br><span class="line">latest: Pulling from docker.io/lixinghua/base_centos</span><br><span class="line">ab5ef0e58194: Downloading [====&gt;                                              ] 6.413 MB/75.78 MB</span><br><span class="line">ddb8d88277d9: Downloading [=&gt;                                                 ] 4.244 MB/151.3 MB</span><br><span class="line">67b026c9dda8: Downloading [===============&gt;                                   ] 7.722 MB/24.5 MB</span><br><span class="line">9345065e3dd4: Waiting </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用命令查看下载好的镜像，1.17G大概用了半分钟</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用tag命令给镜像打上标签，并用images命令查看</span></span><br><span class="line">[root@aliyun hua]# docker tag docker.io/lixinghua/base_centos:latest docker.io/lixinghua/base_centos:mysql</span><br><span class="line"></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里我们发现，我们打了一个标签，但是出现了两个，所以，我们可以把原来的删掉，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">[root@aliyun ~]# docker rmi docker.io/lixinghua/base_centos:latest</span><br><span class="line">Untagged: docker.io/lixinghua/base_centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看镜像，已删除多余镜像</span></span><br><span class="line">[root@aliyun ~]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器并运行</span></span><br><span class="line">[root@aliyun ~]# docker run -t -i docker.io/lixinghua/base_centos:centos /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出一个容器</span></span><br><span class="line">[root@cc214d175b8c /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@aliyun ~]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前正在运行的容器</span></span><br><span class="line">[root@aliyun ~]# docker ps -s</span><br><span class="line">CONTAINER ID        IMAGE                             COMMAND             CREATED             STATUS              PORTS               NAMES               SIZE</span><br><span class="line">cc214d175b8c        docker.io/lixinghua/base_centos   &quot;/bin/bash&quot;         35 hours ago        Up About a minute                       blissful_minsky     606 B (virtual 1.17 GB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前所有的容器</span></span><br><span class="line">[root@aliyun ~]# docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/posts/50190/c.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器（注意：我试了一下，如果最后不加上/bin/bash ，进不去，但是我看到网上好像有人可以，目前还不知道是什么问题）</span></span><br><span class="line">[root@aliyun ~]# docker exec -it cc214d175b8c /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止一个容器的运行</span></span><br><span class="line">[root@aliyun ~]# docker stop cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个已存在的容器</span></span><br><span class="line">[root@aliyun ~]# docker start cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="docker之mysql镜像"><a href="#docker之mysql镜像" class="headerlink" title="docker之mysql镜像"></a>docker之mysql镜像</h4><p>docker中的mysql镜像的运行方法，跟centos镜像不一样</p><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun hua]# docker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql docker.io/mysql:mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br><span class="line">d00c9f81cd6e3333ac234fdbdcc16c69f224ad5addadf170042f753e32a8af6e</span><br></pre></td></tr></table></figure><ul><li>run　run 是运行一个容器</li><li>-d　 表示后台运行</li><li>-p　　表示容器内部端口和服务器端口映射关联</li><li>–privileged=true　设值MySQL 的root用户权限, 否则外部不能使用root用户登陆</li><li>-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置</li><li>-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失</li><li>-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码</li><li>–name mysql　　　　 设值容器名称为mysql</li><li>mysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器</li><li>–character-set-server=utf8mb4 –collation-server=utf8mb4_general_ci 设置数据库默认编码</li></ul><p>​    记得开启远程服务的权限。<strong>还有，如果是阿里云的服务器，记得开放3306端口，否则连接不上的！！！</strong></p><p>​    如果不开启远程服务，则会出现以下的错误。</p><p><img src="/posts/50190/d.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL数据库开启远程连接权限，否则也会出现上面的错误</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 123456是mysql数据库的密码</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​     因为 mysql8.0 版本的加密方式不同，所以如果不更改加密方式，也可能会出现出现以上的错误（我没有试过5.7版本的，但是应该不用改），所以可以改一下 mysql 的加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">二、更改mysql的加密方式：</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER;</span></span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">三、更改root帐户密码：比如 123456</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH MYSQL_NATIVE_PASSWROD BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><h4 id="docker之redis镜像"><a href="#docker之redis镜像" class="headerlink" title="docker之redis镜像"></a>docker之redis镜像</h4><p>​    个人是用配置文件启动的，并保持数据持久化，所以需要提前准备好配置文件 redis.conf 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">[root@aliyun /]# docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动镜像 (redis.conf配置文件见E:\编程笔记\服务器篇\配置文件\redis配置文件\6379.conf)</span></span><br><span class="line">[root@aliyun /]# docker run -it --name redis -p 6379:6379 -v $PWD/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v $PWD/docker/redis/data:/data docker.io/redis:redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # Configuration loaded</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 6.0.5 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 1</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # Server initialized</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 * Ready to accept connections</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>（重点）命令解释：</strong></p><ul><li><p><strong>-i :</strong> 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p><strong>-t :</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>**–name :**为容器指定一个名字；</p></li><li><p>**-p :**将宿主机上的端口映射到容器里，如果是阿里云的服务器，记得开放端口；</p></li><li><p>**-v :**将宿主机的文件挂载到容器里，这里是将 redis.conf 和 data 挂载进去了，否则无法配置；</p></li><li><p>**docker.io/redis:redis :**指定用于启动的镜像，前后用空格与前面的命令隔开，位置可随意；</p></li><li><p>**redis-server /etc/redis/redis.conf  :**这个是关键配置，让redis不是无配置启动，而是按照 redis.conf 里的配置启动；</p></li><li><p>**–appendonly yes :**redis启动后数据持久化；</p></li></ul><p>​    <strong>踩过的坑：</strong>我在网上搜到的命令好多没有加 -it 这个参数，所以创建容器后发现，无法开启容器，当然也无法进入容器，其实到目前为止，我还不确定是不是因为 -it 这个参数，但是我对比了命令，好像也只有这个参数不一样，所以我只能将问题归结到参数 -it 上。</p><p>​    这个时候我们已经创建好了容器，进入容器并测试，就会发现需要输入密码了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@aliyun ~]# docker exec -it redis /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 redis 自带的客户端</span></span><br><span class="line">root@ef9d53c0b84a:/# redis-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：创建 key:value 为 foo:bar (如果报错，需要输入密码，则说明成功)</span></span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入密码</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：创建key:value</span></span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询</span></span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><p>​    到此，redis 容器创建成功。</p><h4 id="docker之nginx"><a href="#docker之nginx" class="headerlink" title="docker之nginx"></a>docker之nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">[root@aliyun ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/nginx ... </span><br><span class="line">latest: Pulling from docker.io/library/nginx</span><br><span class="line">8559a31e96f4: Already exists </span><br><span class="line">8d69e59170f7: Pull complete </span><br><span class="line">3f9f1ec1d262: Pull complete </span><br><span class="line">d1f5ff4f210d: Pull complete </span><br><span class="line">1e22bfa8652e: Pull complete </span><br><span class="line">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133</span><br><span class="line">Status: Downloaded newer image for docker.io/nginx:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-镜像制作"><a href="#docker-镜像制作" class="headerlink" title="docker 镜像制作"></a>docker 镜像制作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos为提交的描述内容，0622760f3e96为容器的CONTAINER ID</span></span><br><span class="line">[root@aliyun hua]# docker commit -m &#x27;centos&#x27; 0622760f3e96</span><br><span class="line">sha256:dd87d0bdb491d982d2d32055016f13f6432e052c194c5f7622d9007176718881</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到镜像已经制作完成</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;                              &lt;none&gt;              dd87d0bdb491       3 minutes ago     1.92 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为镜像命名打标签</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 huafire/centos:centos</span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">huafire/centos                    centos             dd87d0bdb491        6 minutes ago     1.92 GB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-镜像上传"><a href="#docker-镜像上传" class="headerlink" title="docker 镜像上传"></a>docker 镜像上传</h3><p>​    我上传的是阿里云的 docker hub 镜像站点：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories</a></p><p>​    阿里云的 docker 镜像文档：<a href="https://help.aliyun.com/document_detail/60743.html?spm=a2c4g.11174283.6.550.6a2d4541lMLQGt">https://help.aliyun.com/document_detail/60743.html?spm=a2c4g.11174283.6.550.6a2d4541lMLQGt</a></p><p>​    （阿里云的 docker hub 账号是另外申请的，容器镜像服务里，另外，创建好镜像仓库以后，可以看到管理。点进入就可以看到操作指南。）</p><p>​    <strong>注意：记得用阿里云的加速器，不然速度会很感人</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录阿里云，username= 后面是自己的阿里云的名字，然后输入密码</span></span><br><span class="line">[root@aliyun hua]# docker login --username=xxx registry.cn-beijing.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照阿里云的文档说明来命名镜像</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 registry.cn-beijing.aliyuncs.com/huafire/huafire:centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到命名成功了镜像名称=registry.cn-beijing.aliyuncs.com/huafire/huafire</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">镜像名称         centos              dd87d0bdb491        3 hours ago         1.92 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推向阿里云</span></span><br><span class="line">[root@aliyun hua]# docker push registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line">The push refers to a repository [registry.cn-beijing.aliyuncs.com/likanghua/likanghua]</span><br><span class="line">8330ff0b410f: Pushed </span><br><span class="line">0683de282177: Pushed </span><br><span class="line">centos: digest: sha256:cdac6c3308e08f2101258bf17c12298ddc545ae034c2fa0768a1b824bd044c18 size: 742</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从阿里云拉取镜像</span></span><br><span class="line">[root@aliyun hua]# docker pull registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line">Trying to pull repository registry.cn-beijing.aliyuncs.com/likanghua/likanghua ... </span><br><span class="line">centos: Pulling from registry.cn-beijing.aliyuncs.com/likanghua/likanghua</span><br><span class="line">Digest: sha256:cdac6c3308e08f2101258bf17c12298ddc545ae034c2fa0768a1b824bd044c18</span><br><span class="line">Status: Image is up to date for registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-常用命令总结"><a href="#docker-常用命令总结" class="headerlink" title="docker 常用命令总结"></a>docker 常用命令总结</h3><h4 id="启动，关闭docker"><a href="#启动，关闭docker" class="headerlink" title="启动，关闭docker"></a>启动，关闭docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行docker</span></span><br><span class="line">[root@aliyun /]# systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker</span></span><br><span class="line">[root@aliyun /]# systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="查看镜像和容器"><a href="#查看镜像和容器" class="headerlink" title="查看镜像和容器"></a>查看镜像和容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">[root@aliyun /]# docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器的状态</span></span><br><span class="line">[root@aliyun /]# docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前正在运行的容器</span></span><br><span class="line">[root@aliyun /]# docker ps</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找并拉取镜像"><a href="#查找并拉取镜像" class="headerlink" title="查找并拉取镜像"></a>查找并拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找镜像</span></span><br><span class="line">[root@aliyun ~]# docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像，可以看到命令是 docker pull [NAME]</span></span><br><span class="line">[root@aliyun hua]# docker pull docker.io/lixinghua/base_centos</span><br></pre></td></tr></table></figure><h4 id="给镜像打标签"><a href="#给镜像打标签" class="headerlink" title="给镜像打标签"></a>给镜像打标签</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用tag命令给镜像打上标签</span></span><br><span class="line">[root@aliyun hua]# docker tag docker.io/lixinghua/base_centos:latest docker.io/lixinghua/base_centos:mysql</span><br></pre></td></tr></table></figure><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器并运行</span></span><br><span class="line">[root@aliyun ~]# docker run -t -i docker.io/lixinghua/base_centos:centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个是创建并运行MySQL容器，需要映射端口，上文有详细的命令解释</span></span><br><span class="line">[root@aliyun hua]# docker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql docker.io/mysql:mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><h4 id="进入、退出容器"><a href="#进入、退出容器" class="headerlink" title="进入、退出容器"></a>进入、退出容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器（注意：我试了一下，如果最后不加上/bin/bash ，进不去，但是我看到网上好像有人可以，目前还不知道是什么问题）</span></span><br><span class="line">[root@aliyun ~]# docker exec -it cc214d175b8c /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出一个容器</span></span><br><span class="line">[root@cc214d175b8c /]# exit</span><br></pre></td></tr></table></figure><h4 id="停止、运行容器"><a href="#停止、运行容器" class="headerlink" title="停止、运行容器"></a>停止、运行容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止一个容器的运行</span></span><br><span class="line">[root@aliyun ~]# docker stop cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个已存在的容器</span></span><br><span class="line">[root@aliyun ~]# docker start cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br></pre></td></tr></table></figure><h4 id="将本地文件上传到容器的指定目录中"><a href="#将本地文件上传到容器的指定目录中" class="headerlink" title="将本地文件上传到容器的指定目录中"></a>将本地文件上传到容器的指定目录中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun ~]#docker cp 本地文件路径 ID全称:容器路径</span><br></pre></td></tr></table></figure><h4 id="删除容器和镜像"><a href="#删除容器和镜像" class="headerlink" title="删除容器和镜像"></a>删除容器和镜像</h4><p>​    <strong>注意：在删除镜像前要先删除容器，不然删除不了，会报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm -f id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除前的镜像</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql                   latest              a7a67c95e831        2 weeks ago         541 MB</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像[REPOSITORY]:[TAG]</span></span><br><span class="line">[root@aliyun hua]# sudo docker rmi docker.io/lixinghua/base_centos:latest</span><br><span class="line">Untagged: docker.io/lixinghua/base_centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除后的镜像</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql                   latest              a7a67c95e831        2 weeks ago         541 MB</span><br><span class="line">docker.io/lixinghua/base_centos   mysql               1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重命名容器</span></span><br><span class="line">[root@aliyun ~]# docker rename musing_mestorf mysql</span><br></pre></td></tr></table></figure><p><img src="/posts/50190/e.jpg"></p><h4 id="登录阿里云"><a href="#登录阿里云" class="headerlink" title="登录阿里云"></a>登录阿里云</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录阿里云，username= 后面是自己的阿里云的名字，然后输入密码</span></span><br><span class="line">[root@aliyun hua]# docker login --username=xxx registry.cn-beijing.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="制作镜像并推出"><a href="#制作镜像并推出" class="headerlink" title="制作镜像并推出"></a>制作镜像并推出</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos为提交的描述内容，0622760f3e96为容器的CONTAINER ID</span></span><br><span class="line">[root@aliyun hua]# docker commit -m &#x27;centos&#x27; 0622760f3e96</span><br><span class="line">sha256:dd87d0bdb491d982d2d32055016f13f6432e052c194c5f7622d9007176718881</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照阿里云的文档说明来命名镜像</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 registry.cn-beijing.aliyuncs.com/huafire/huafire:centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推向阿里云</span></span><br><span class="line">[root@aliyun hua]# docker push registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br></pre></td></tr></table></figure><p>​    总结：docker 对于我们是必备技能之一，但是在快速部署大量服务器的时候，dockerfile应该更好用一些，但是作为初学者，还是先熟练运用 docker 镜像和容器更好一些，同时也建议百度一下 docker ，看看原理可以更好的帮助我们学习，dockerfile 的用法以后也会详细的讲到，上文如果有不妥之处，敬请斧正！</p>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos服务器配置</title>
      <link href="posts/1ea2ed25.html"/>
      <url>posts/1ea2ed25.html</url>
      
        <content type="html"><![CDATA[<pre><code>环境：centos操作系统</code></pre><h2 id="安装python3-7-0环境"><a href="#安装python3-7-0环境" class="headerlink" title="安装python3.7.0环境"></a>安装python3.7.0环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun &#x2F;]# tar -zxf Python-3.7.0.tgz</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# cd Python-3.7.0</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum -y install libffi-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc gcc-c++ openssl-devel</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# .&#x2F;configure</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# make</span><br><span class="line"></span><br><span class="line">[root@aliyun &#x2F;]# make install</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先更新 yum 源</span></span><br><span class="line">[root@aliyun /]# sudo yum update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原来的docker，如果原来没有安装过，就不用删除了</span></span><br><span class="line">[root@aliyun /]# sudo yum remove docker \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">&gt;                  docker-client-latest \</span></span><br><span class="line"><span class="bash">&gt;                  docker-common \</span></span><br><span class="line"><span class="bash">&gt;                  docker-latest \</span></span><br><span class="line"><span class="bash">&gt;                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">&gt;                  docker-logrotate \</span></span><br><span class="line"><span class="bash">&gt;                  docker-selinux \</span></span><br><span class="line"><span class="bash">&gt;                  docker-engine-selinux \</span></span><br><span class="line"><span class="bash">&gt;                  docker-engine</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在问度娘的时候，看到都要安装下面这个，也就安装了，应该没什么坏处</span></span><br><span class="line">[root@aliyun /]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置阿里云的源</span></span><br><span class="line">[root@aliyun /]# sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="/posts/1ea2ed25/a.jpg"></p><p>下面开始安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看docker的版本</span></span><br><span class="line">[root@aliyun /]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line">已加载插件：fastestmirror, product-id, search-disabled-repos, subscription-manager</span><br><span class="line">可安装的软件包</span><br><span class="line">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">docker-ce.x86_64            3:19.03.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在这里我们使用最新的版本就可以了，默认安装的就是最新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun /]# yum -y install docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示你需要使用 --skip-broken ，那你就在命令后面加上 --skip-broken</span></span><br></pre></td></tr></table></figure><p>当然也可以安装指定版本的docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定版本为 ： 18.06.3.ce-3.el7</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装：</span> </span><br><span class="line">[root@aliyun /]# yum -y install docker-ce-18.06.3.ce-3.el7 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">[root@aliyun /]# docker -v</span><br><span class="line">Docker version 1.13.1, build 64e9980/1.13.1</span><br></pre></td></tr></table></figure><p>到这里就安装成功了。</p><p>下面是docker的一些命令，后面都会用到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行docker</span></span><br><span class="line">[root@aliyun /]# systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker</span></span><br><span class="line">[root@aliyun /]# systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">[root@aliyun /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器的状态</span></span><br><span class="line">[root@aliyun /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前正在运行的容器</span></span><br><span class="line">[root@aliyun /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker是否运行成功</span></span><br><span class="line">[root@aliyun /]# systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="/posts/1ea2ed25/b.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动/停止某个容器</span></span><br><span class="line">[root@aliyun /]# docker start/stop id/name /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm -f id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个镜像</span></span><br><span class="line">[root@aliyun /]# docker rmi id/name </span><br></pre></td></tr></table></figure><h3 id="docker拉取镜像"><a href="#docker拉取镜像" class="headerlink" title="docker拉取镜像"></a>docker拉取镜像</h3><p>可以直接拉取网上做好的镜像，在心里谢过各位大佬以后，手上就不客气了…</p><h4 id="docker之centos镜像"><a href="#docker之centos镜像" class="headerlink" title="docker之centos镜像"></a>docker之centos镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找镜像</span></span><br><span class="line">[root@aliyun ~]# docker search mysql</span><br><span class="line">INDEX       NAME                                        DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/mysql                             MySQL is a widely used, open-source relati...   9482      [OK]       </span><br><span class="line">docker.io   docker.io/mariadb                           MariaDB is a community-developed fork of M...   3427      [OK]       </span><br><span class="line">docker.io   docker.io/mysql/mysql-server                Optimized MySQL Server Docker images. Crea...   695                  [OK]</span><br><span class="line">docker.io   docker.io/centos/mysql-57-centos7           MySQL 5.7 SQL database server                   75                   </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在这里我拉取的是兄长随手做着玩的一个centos系统镜像...</span></span><br><span class="line">[root@aliyun hua]# docker search lixinghua</span><br><span class="line">INDEX       NAME                              DESCRIPTION   STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/lixinghua/base_centos                 0                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像，可以看到命令是 docker pull [NAME]</span></span><br><span class="line">[root@aliyun hua]# docker pull docker.io/lixinghua/base_centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/lixinghua/base_centos ... </span><br><span class="line">latest: Pulling from docker.io/lixinghua/base_centos</span><br><span class="line">ab5ef0e58194: Downloading [====&gt;                                              ] 6.413 MB/75.78 MB</span><br><span class="line">ddb8d88277d9: Downloading [=&gt;                                                 ] 4.244 MB/151.3 MB</span><br><span class="line">67b026c9dda8: Downloading [===============&gt;                                   ] 7.722 MB/24.5 MB</span><br><span class="line">9345065e3dd4: Waiting </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用命令查看下载好的镜像，1.17G大概用了半分钟</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用tag命令给镜像打上标签，并用images命令查看</span></span><br><span class="line">[root@aliyun hua]# docker tag docker.io/lixinghua/base_centos:latest docker.io/lixinghua/base_centos:mysql</span><br><span class="line"></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里我们发现，我们打了一个标签，但是出现了两个，所以，我们可以把原来的删掉，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">[root@aliyun ~]# docker rmi docker.io/lixinghua/base_centos:latest</span><br><span class="line">Untagged: docker.io/lixinghua/base_centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看镜像，已删除多余镜像</span></span><br><span class="line">[root@aliyun ~]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器并运行</span></span><br><span class="line">[root@aliyun ~]# docker run -t -i docker.io/lixinghua/base_centos:centos /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出一个容器</span></span><br><span class="line">[root@cc214d175b8c /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@aliyun ~]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前正在运行的容器</span></span><br><span class="line">[root@aliyun ~]# docker ps -s</span><br><span class="line">CONTAINER ID        IMAGE                             COMMAND             CREATED             STATUS              PORTS               NAMES               SIZE</span><br><span class="line">cc214d175b8c        docker.io/lixinghua/base_centos   &quot;/bin/bash&quot;         35 hours ago        Up About a minute                       blissful_minsky     606 B (virtual 1.17 GB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前所有的容器</span></span><br><span class="line">[root@aliyun ~]# docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/posts/1ea2ed25/c.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器（注意：我试了一下，如果最后不加上/bin/bash ，进不去，但是我看到网上好像有人可以，目前还不知道是什么问题）</span></span><br><span class="line">[root@aliyun ~]# docker exec -it cc214d175b8c /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止一个容器的运行</span></span><br><span class="line">[root@aliyun ~]# docker stop cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个已存在的容器</span></span><br><span class="line">[root@aliyun ~]# docker start cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="docker之mysql镜像"><a href="#docker之mysql镜像" class="headerlink" title="docker之mysql镜像"></a>docker之mysql镜像</h4><p>docker中的mysql镜像的运行方法，跟centos镜像不一样</p><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun hua]# docker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql docker.io/mysql:mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br><span class="line">d00c9f81cd6e3333ac234fdbdcc16c69f224ad5addadf170042f753e32a8af6e</span><br></pre></td></tr></table></figure><ul><li>run　run 是运行一个容器</li><li>-d　 表示后台运行</li><li>-p　　表示容器内部端口和服务器端口映射关联</li><li>–privileged=true　设值MySQL 的root用户权限, 否则外部不能使用root用户登陆</li><li>-v /docker/mysql/conf/my.cnf:/etc/my.cnf 将服务器中的my.cnf配置映射到docker中的/docker/mysql/conf/my.cnf配置</li><li>-v /docker/mysql/data:/var/lib/mysql　　同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失</li><li>-e MYSQL_ROOT_PASSWORD=123456　　　设置MySQL数据库root用户的密码</li><li>–name mysql　　　　 设值容器名称为mysql</li><li>mysql:5.7　　表示从docker镜像mysql:5.7中启动一个容器</li><li>–character-set-server=utf8mb4 –collation-server=utf8mb4_general_ci 设置数据库默认编码</li></ul><p>​    记得开启远程服务的权限。<strong>还有，如果是阿里云的服务器，记得开放3306端口，否则连接不上的！！！</strong></p><p>​    如果不开启远程服务，则会出现以下的错误。</p><p><img src="/posts/1ea2ed25/d.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL数据库开启远程连接权限，否则也会出现上面的错误</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 123456是mysql数据库的密码</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​     因为 mysql8.0 版本的加密方式不同，所以如果不更改加密方式，也可能会出现出现以上的错误（我没有试过5.7版本的，但是应该不用改），所以可以改一下 mysql 的加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">二、更改mysql的加密方式：</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER;</span></span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">三、更改root帐户密码：比如 123456</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH MYSQL_NATIVE_PASSWROD BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><h4 id="docker之redis镜像"><a href="#docker之redis镜像" class="headerlink" title="docker之redis镜像"></a>docker之redis镜像</h4><p>​    个人是用配置文件启动的，并保持数据持久化，所以需要提前准备好配置文件 redis.conf 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">[root@aliyun /]# docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动镜像 (redis.conf配置文件见E:\编程笔记\服务器篇\配置文件\redis配置文件\6379.conf)</span></span><br><span class="line">[root@aliyun /]# docker run -it --name redis -p 6379:6379 -v $PWD/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v $PWD/docker/redis/data:/data docker.io/redis:redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:C 01 Jul 2020 15:52:32.947 # Configuration loaded</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 6.0.5 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 1</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # Server initialized</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">1:M 01 Jul 2020 15:52:32.949 * Ready to accept connections</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>（重点）命令解释：</strong></p><ul><li><p><strong>-i :</strong> 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p><strong>-t :</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>**–name :**为容器指定一个名字；</p></li><li><p>**-p :**将宿主机上的端口映射到容器里，如果是阿里云的服务器，记得开放端口；</p></li><li><p>**-v :**将宿主机的文件挂载到容器里，这里是将 redis.conf 和 data 挂载进去了，否则无法配置；</p></li><li><p>**docker.io/redis:redis :**指定用于启动的镜像，前后用空格与前面的命令隔开，位置可随意；</p></li><li><p>**redis-server /etc/redis/redis.conf  :**这个是关键配置，让redis不是无配置启动，而是按照 redis.conf 里的配置启动；</p></li><li><p>**–appendonly yes :**redis启动后数据持久化；</p></li></ul><p>​    <strong>踩过的坑：</strong>我在网上搜到的命令好多没有加 -it 这个参数，所以创建容器后发现，无法开启容器，当然也无法进入容器，其实到目前为止，我还不确定是不是因为 -it 这个参数，但是我对比了命令，好像也只有这个参数不一样，所以我只能将问题归结到参数 -it 上。</p><p>​    这个时候我们已经创建好了容器，进入容器并测试，就会发现需要输入密码了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@aliyun ~]# docker exec -it redis /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 redis 自带的客户端</span></span><br><span class="line">root@ef9d53c0b84a:/# redis-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：创建 key:value 为 foo:bar (如果报错，需要输入密码，则说明成功)</span></span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入密码</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：创建key:value</span></span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询</span></span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><p>​    到此，redis 容器创建成功。</p><h4 id="docker之nginx"><a href="#docker之nginx" class="headerlink" title="docker之nginx"></a>docker之nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">[root@aliyun ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/nginx ... </span><br><span class="line">latest: Pulling from docker.io/library/nginx</span><br><span class="line">8559a31e96f4: Already exists </span><br><span class="line">8d69e59170f7: Pull complete </span><br><span class="line">3f9f1ec1d262: Pull complete </span><br><span class="line">d1f5ff4f210d: Pull complete </span><br><span class="line">1e22bfa8652e: Pull complete </span><br><span class="line">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133</span><br><span class="line">Status: Downloaded newer image for docker.io/nginx:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-镜像制作"><a href="#docker-镜像制作" class="headerlink" title="docker 镜像制作"></a>docker 镜像制作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos为提交的描述内容，0622760f3e96为容器的CONTAINER ID</span></span><br><span class="line">[root@aliyun hua]# docker commit -m &#x27;centos&#x27; 0622760f3e96</span><br><span class="line">sha256:dd87d0bdb491d982d2d32055016f13f6432e052c194c5f7622d9007176718881</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到镜像已经制作完成</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;                              &lt;none&gt;              dd87d0bdb491       3 minutes ago     1.92 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为镜像命名打标签</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 huafire/centos:centos</span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">huafire/centos                    centos             dd87d0bdb491        6 minutes ago     1.92 GB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-镜像上传"><a href="#docker-镜像上传" class="headerlink" title="docker 镜像上传"></a>docker 镜像上传</h3><p>​    我上传的是阿里云的 docker hub 镜像站点：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories</a></p><p>​    阿里云的 docker 镜像文档：<a href="https://help.aliyun.com/document_detail/60743.html?spm=a2c4g.11174283.6.550.6a2d4541lMLQGt">https://help.aliyun.com/document_detail/60743.html?spm=a2c4g.11174283.6.550.6a2d4541lMLQGt</a></p><p>​    （阿里云的 docker hub 账号是另外申请的，容器镜像服务里，另外，创建好镜像仓库以后，可以看到管理。点进入就可以看到操作指南。）</p><p>​    <strong>注意：记得用阿里云的加速器，不然速度会很感人</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录阿里云，username= 后面是自己的阿里云的名字，然后输入密码</span></span><br><span class="line">[root@aliyun hua]# docker login --username=xxx registry.cn-beijing.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照阿里云的文档说明来命名镜像</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 registry.cn-beijing.aliyuncs.com/huafire/huafire:centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到命名成功了镜像名称=registry.cn-beijing.aliyuncs.com/huafire/huafire</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">镜像名称         centos              dd87d0bdb491        3 hours ago         1.92 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推向阿里云</span></span><br><span class="line">[root@aliyun hua]# docker push registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line">The push refers to a repository [registry.cn-beijing.aliyuncs.com/likanghua/likanghua]</span><br><span class="line">8330ff0b410f: Pushed </span><br><span class="line">0683de282177: Pushed </span><br><span class="line">centos: digest: sha256:cdac6c3308e08f2101258bf17c12298ddc545ae034c2fa0768a1b824bd044c18 size: 742</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从阿里云拉取镜像</span></span><br><span class="line">[root@aliyun hua]# docker pull registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line">Trying to pull repository registry.cn-beijing.aliyuncs.com/likanghua/likanghua ... </span><br><span class="line">centos: Pulling from registry.cn-beijing.aliyuncs.com/likanghua/likanghua</span><br><span class="line">Digest: sha256:cdac6c3308e08f2101258bf17c12298ddc545ae034c2fa0768a1b824bd044c18</span><br><span class="line">Status: Image is up to date for registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-常用命令总结"><a href="#docker-常用命令总结" class="headerlink" title="docker 常用命令总结"></a>docker 常用命令总结</h3><h4 id="启动，关闭docker"><a href="#启动，关闭docker" class="headerlink" title="启动，关闭docker"></a>启动，关闭docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行docker</span></span><br><span class="line">[root@aliyun /]# systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker</span></span><br><span class="line">[root@aliyun /]# systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="查看镜像和容器"><a href="#查看镜像和容器" class="headerlink" title="查看镜像和容器"></a>查看镜像和容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">[root@aliyun /]# docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器的状态</span></span><br><span class="line">[root@aliyun /]# docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前正在运行的容器</span></span><br><span class="line">[root@aliyun /]# docker ps</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找并拉取镜像"><a href="#查找并拉取镜像" class="headerlink" title="查找并拉取镜像"></a>查找并拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找镜像</span></span><br><span class="line">[root@aliyun ~]# docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像，可以看到命令是 docker pull [NAME]</span></span><br><span class="line">[root@aliyun hua]# docker pull docker.io/lixinghua/base_centos</span><br></pre></td></tr></table></figure><h4 id="给镜像打标签"><a href="#给镜像打标签" class="headerlink" title="给镜像打标签"></a>给镜像打标签</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用tag命令给镜像打上标签</span></span><br><span class="line">[root@aliyun hua]# docker tag docker.io/lixinghua/base_centos:latest docker.io/lixinghua/base_centos:mysql</span><br></pre></td></tr></table></figure><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器并运行</span></span><br><span class="line">[root@aliyun ~]# docker run -t -i docker.io/lixinghua/base_centos:centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个是创建并运行MySQL容器，需要映射端口，上文有详细的命令解释</span></span><br><span class="line">[root@aliyun hua]# docker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql docker.io/mysql:mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><h4 id="进入、退出容器"><a href="#进入、退出容器" class="headerlink" title="进入、退出容器"></a>进入、退出容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器（注意：我试了一下，如果最后不加上/bin/bash ，进不去，但是我看到网上好像有人可以，目前还不知道是什么问题）</span></span><br><span class="line">[root@aliyun ~]# docker exec -it cc214d175b8c /bin/bash</span><br><span class="line">[root@cc214d175b8c /]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出一个容器</span></span><br><span class="line">[root@cc214d175b8c /]# exit</span><br></pre></td></tr></table></figure><h4 id="停止、运行容器"><a href="#停止、运行容器" class="headerlink" title="停止、运行容器"></a>停止、运行容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止一个容器的运行</span></span><br><span class="line">[root@aliyun ~]# docker stop cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个已存在的容器</span></span><br><span class="line">[root@aliyun ~]# docker start cc214d175b8c</span><br><span class="line">cc214d175b8c</span><br></pre></td></tr></table></figure><h4 id="将本地文件上传到容器的指定目录中"><a href="#将本地文件上传到容器的指定目录中" class="headerlink" title="将本地文件上传到容器的指定目录中"></a>将本地文件上传到容器的指定目录中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun ~]#docker cp 本地文件路径 ID全称:容器路径</span><br></pre></td></tr></table></figure><h4 id="删除容器和镜像"><a href="#删除容器和镜像" class="headerlink" title="删除容器和镜像"></a>删除容器和镜像</h4><p>​    <strong>注意：在删除镜像前要先删除容器，不然删除不了，会报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除某个容器</span></span><br><span class="line">[root@aliyun /]# docker rm -f id/name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除前的镜像</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql                   latest              a7a67c95e831        2 weeks ago         541 MB</span><br><span class="line">docker.io/lixinghua/base_centos   latest              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line">docker.io/lixinghua/base_centos   centos              1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像[REPOSITORY]:[TAG]</span></span><br><span class="line">[root@aliyun hua]# sudo docker rmi docker.io/lixinghua/base_centos:latest</span><br><span class="line">Untagged: docker.io/lixinghua/base_centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除后的镜像</span></span><br><span class="line">[root@aliyun hua]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql                   latest              a7a67c95e831        2 weeks ago         541 MB</span><br><span class="line">docker.io/lixinghua/base_centos   mysql               1322bd0fef2c        5 months ago        1.17 GB</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重命名容器</span></span><br><span class="line">[root@aliyun ~]# docker rename musing_mestorf mysql</span><br></pre></td></tr></table></figure><p><img src="/posts/1ea2ed25/e.jpg"></p><h4 id="登录阿里云"><a href="#登录阿里云" class="headerlink" title="登录阿里云"></a>登录阿里云</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录阿里云，username= 后面是自己的阿里云的名字，然后输入密码</span></span><br><span class="line">[root@aliyun hua]# docker login --username=xxx registry.cn-beijing.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="制作镜像并推出"><a href="#制作镜像并推出" class="headerlink" title="制作镜像并推出"></a>制作镜像并推出</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos为提交的描述内容，0622760f3e96为容器的CONTAINER ID</span></span><br><span class="line">[root@aliyun hua]# docker commit -m &#x27;centos&#x27; 0622760f3e96</span><br><span class="line">sha256:dd87d0bdb491d982d2d32055016f13f6432e052c194c5f7622d9007176718881</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照阿里云的文档说明来命名镜像</span></span><br><span class="line">[root@aliyun hua]# docker tag dd87d0bdb491 registry.cn-beijing.aliyuncs.com/huafire/huafire:centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推向阿里云</span></span><br><span class="line">[root@aliyun hua]# docker push registry.cn-beijing.aliyuncs.com/likanghua/likanghua:centos</span><br></pre></td></tr></table></figure><p>​    总结：docker 对于我们是必备技能之一，但是在快速部署大量服务器的时候，dockerfile应该更好用一些，但是作为初学者，还是先熟练运用 docker 镜像和容器更好一些，同时也建议百度一下 docker ，看看原理可以更好的帮助我们学习，dockerfile 的用法以后也会详细的讲到，上文如果有不妥之处，敬请斧正！</p>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Gitee搭建个人博客</title>
      <link href="posts/47918.html"/>
      <url>posts/47918.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>​    首先要安装 git 和 nodejs，git 的安装可以直接在电脑管家里的软件管理直接安装，当然，也可以自己下载安装包安装，官网：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> ，同样的，nodejs 也可以直接在电脑管家里的软件管理安装，也可以自己下载安装包，官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> ， 会自动弹出是否下载。</p><p>​    github 和 gitee 都可以部署，各有优缺点。在 github 上部署的话，访问比较慢，毕竟是国外的，在 gitee 上部署的话，每次更新都需要自己手动点几下。</p><h2 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h2><p>​    个人是在 gitee 上部署的，首先建立一个仓库。</p><img src="/posts/47918/a.jpg" style="zoom:67%;"><p>​    <strong>仓库名一定要是你 gitee 的昵称。</strong>不要问我为什么，我不想回答…</p><p>​    选项按照下面就可以。</p><p><img src="/posts/47918/b.jpg"></p><p>​    </p><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><p>​    建立好仓库以后，在本地建立一个文件夹个人建立文件夹路径：E:\Hexo ，然后开始全局安装 hexo ，打开 cmd（注：这里也可以用 git bash ，都可以），命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装hexo</span></span><br><span class="line">E:\Hexo&gt; npm install -g hexo</span><br></pre></td></tr></table></figure><p>​    运行完这条命令以后，检查 hexo 是否可用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Hexo&gt; hexo -v</span><br></pre></td></tr></table></figure><p>​    如果可用，就会显示 hexo 的版本号，如果不能用，则会报错。如果没有报错，请忽视下面这一段。</p><p>​    我的就报错了，不是内部或者外部命令，不要慌，这个原因是没有加入环境变量，手动加上环境变量就ok了，我的 hexo 默认安装到 D:\program files\nodejs\node_cache 这个文件夹下面了，所以我们只要讲这个路径手动加到环境变量就ok了。注意：这个时候需要重新打开一个 cmd ，原来的 cmd 是没有刷新的。</p><p>​    hexo 可以用了以后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进入到我们刚刚建立的文件夹里，然后开始初始化项目</span></span><br><span class="line">C:\Users\12136&gt; E:</span><br><span class="line">E:\&gt; <span class="built_in">cd</span> Hexo</span><br><span class="line">E:\Hexo&gt; hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再编译工程，自动生成站点</span></span><br><span class="line">E:\Hexo&gt; hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地服务</span></span><br><span class="line">E:\Hexo&gt; hexo s</span><br></pre></td></tr></table></figure><p>​    注：hexo g 和 hexo s 可以合并，写成一条命令： hexo g &amp;&amp; hexo s</p><p>​    这个时候我们打开浏览器，输入网址：127.0.0.1:4000，就可以看到我们在本地的个人博客了。</p><p>​    </p><p>​    修改 _config.yml 配置文件</p><p>​    我们打开刚刚建立的 Hexo 文件夹，编辑 _config.yml 文件，直接找到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: </span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;likanghua&#x2F;likanghua.git #https:&#x2F;&#x2F;gitee.com&#x2F;likanghua&#x2F;likanghua.git为仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>​    注意：</p><p>​    1、每个冒号后面都有一个空格。</p><p>​    2、repo 后面的地址是自己仓库的地址，如下图：</p><p><img src="/posts/47918/c.jpg"></p><p>​    下面的过程就是我们上传到 gitee 仓库的过程了，肯定要用到 git 命令，所以总结了一下常用的几个 git 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">E:\Hexo&gt; git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">E:\Hexo&gt; git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区内容添加到仓库中</span></span><br><span class="line">E:\Hexo&gt; git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝一份远程仓库，也就是下载一个项目</span></span><br><span class="line">E:\Hexo&gt; git <span class="built_in">clone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看仓库当前的状态，显示有变更的文件</span></span><br><span class="line">E:\Hexo&gt; git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程仓库操作</span></span><br><span class="line">E:\Hexo&gt; git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载远程代码并合并</span></span><br><span class="line">E:\Hexo&gt; git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传远程代码并合并</span></span><br><span class="line">E:\Hexo&gt; git push</span><br></pre></td></tr></table></figure><h2 id="上传到仓库"><a href="#上传到仓库" class="headerlink" title="上传到仓库"></a>上传到仓库</h2><p>​    下面开始将我们已经在本地部署好的个人博客上传到 gitee 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">E:\Hexo&gt;git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> E:/Hexo/.git/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">E:\Hexo&gt;git add .</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> package.json.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接自己的仓库，其中 https://gitee.com/***/***.git 是自己的仓库</span></span><br><span class="line">E:\Hexo&gt;git remote add origin https://gitee.com/***/***.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：第一次应该会让填写邮箱和仓库名</span></span><br><span class="line">E:\Hexo&gt;git commit -m <span class="string">&quot;hexo初始化&quot;</span></span><br><span class="line">[master (root-commit) c49d245] hexo初始化</span><br><span class="line"> 93 files changed, 7127 insertions(+)</span><br><span class="line"> create mode 100644 .gitignore</span><br><span class="line"> create mode 100644 _config.yml</span><br><span class="line"> create mode 100644 package-lock.json</span><br><span class="line"> create mode 100644 package.json</span><br><span class="line"> create mode 100644 scaffolds/draft.md</span><br><span class="line"> create mode 100644 scaffolds/page.md</span><br><span class="line"> create mode 100644 scaffolds/post.md</span><br><span class="line"> create mode 100644 <span class="built_in">source</span>/_posts/hello-world.md</span><br><span class="line"> create mode 100644 themes/landscape/.gitignore</span><br><span class="line"> create mode 100644 themes/landscape/Gruntfile.js</span><br><span class="line"> create mode 100644 themes/landscape/LICENSE</span><br><span class="line"> create mode 100644 themes/landscape/README.md</span><br><span class="line"> create mode 100644 themes/landscape/_config.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/de.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/default.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/es.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/fr.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/ja.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/ko.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/nl.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/no.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/pt.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/ru.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/zh-CN.yml</span><br><span class="line"> create mode 100644 themes/landscape/languages/zh-TW.yml</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/after-footer.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/archive-post.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/archive.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/article.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/footer.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/gauges-analytics.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/google-analytics.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/head.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/header.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/mobile-nav.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/category.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/date.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/gallery.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/nav.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/tag.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/post/title.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_partial/sidebar.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_widget/archive.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_widget/category.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_widget/recent_posts.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_widget/tag.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/_widget/tagcloud.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/archive.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/category.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/index.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/layout.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/page.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/post.ejs</span><br><span class="line"> create mode 100644 themes/landscape/layout/tag.ejs</span><br><span class="line"> create mode 100644 themes/landscape/package.json</span><br><span class="line"> create mode 100644 themes/landscape/scripts/fancybox.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_extend.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/archive.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/article.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/comment.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/footer.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/header.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/highlight.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/mobile.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/sidebar-aside.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/sidebar-bottom.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_partial/sidebar.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_util/grid.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_util/mixin.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/_variables.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/images/banner.jpg</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/css/style.styl</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/blank.gif</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/fancybox_loading.gif</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/fancybox_loading@2x.gif</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/fancybox_overlay.png</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/fancybox_sprite.png</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/fancybox_sprite@2x.png</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/fancybox_buttons.png</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/jquery.fancybox.css</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/jquery.fancybox.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/fancybox/jquery.fancybox.pack.js</span><br><span class="line"> create mode 100644 themes/landscape/<span class="built_in">source</span>/js/script.js</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解决远程和本地的冲突（可以不运行）</span></span><br><span class="line">E:\Hexo&gt;git pull --rebase origin master</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (4/4), 1.42 KiB | 5.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://gitee.com/likanghua/likanghua</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决完冲突以后，推出（与上一条命令一起用）</span></span><br><span class="line">E:\Hexo&gt;git push -u origin master</span><br><span class="line">Enumerating objects: 115, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (115/115), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (104/104), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (114/114), 533.21 KiB | 11.85 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 114 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class="line">To https://gitee.com/likanghua/likanghua.git</span><br><span class="line">   b3a7783..6610b37  master -&gt; master</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装推送插件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署/更新博客，首次发布需要在 shell 中输入账号和密码。</span></span><br><span class="line">E:\Hexo&gt;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>然后回到 gitee 仓库，选择 Pages 。</p><p><img src="/posts/47918/d.jpg"></p><p>​    再点击更新就可以了</p><p><img src="/posts/47918/e.jpg"></p><h2 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 cmd ，进入到 Hexo 文件夹后，输入以下命令</span></span><br><span class="line">E:\Hexo&gt;hexo new 第一篇博客</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写好以后更新博客</span></span><br><span class="line">E:\Hexo&gt;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>​    再到 gitee 上，点击更新就可以了。</p><p>​    博客主题可以自己换哦~</p><h2 id="补充图片挂掉的问题"><a href="#补充图片挂掉的问题" class="headerlink" title="补充图片挂掉的问题"></a>补充图片挂掉的问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装上传图片的插件</span></span><br><span class="line">E:\Hexo&gt; npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>​    这个时候再运行 hexo new ** 时，会生成一个同名文件夹，将图片放进去，正常引用就可以了。</p><p>​    <strong>注意：</strong></p><p>​    <strong>1、要用相对路径。</strong></p><p>​    <strong>2、图片中间要用 / ，不要用 \ ，否则图片会挂掉。</strong></p><h2 id="直接拉取配置好的-hexo，主题为butterfly"><a href="#直接拉取配置好的-hexo，主题为butterfly" class="headerlink" title="直接拉取配置好的 hexo，主题为butterfly"></a>直接拉取配置好的 hexo，主题为butterfly</h2><p>​        由于发现每次配置都需要大量的配置，有的电脑网不好，或者环境没有配置好，就会很麻烦，所以本人建立了一个仓库，可以直接拉取配置好的框架，拉取到本地以后，用hexo命令就可以直接运行。</p><p>​        <code>gitee</code>网址：<a href="https://gitee.com/likanghua/hexo-butterfly.git">https://gitee.com/likanghua/hexo-butterfly.git</a></p><p>​        拉取命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/likanghua/hexo-butterfly.git</span><br></pre></td></tr></table></figure><p>​        记得翻到网页的最下面，点一个Star哦，这个对本人目前很是重要，谢谢啦~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+Gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
